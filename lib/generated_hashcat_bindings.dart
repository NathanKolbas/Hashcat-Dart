// ignore_for_file: no_leading_underscores_for_local_identifiers, non_constant_identifier_names, constant_identifier_names, camel_case_types, library_private_types_in_public_api

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings needed from Hashcat
class HashcatBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HashcatBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HashcatBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int chmod(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _chmod(
      arg0,
      arg1,
    );
  }

  late final _chmodPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'chmod');
  late final _chmod =
      _chmodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fchmod(
    int arg0,
    int arg1,
  ) {
    return _fchmod(
      arg0,
      arg1,
    );
  }

  late final _fchmodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, mode_t)>>('fchmod');
  late final _fchmod = _fchmodPtr.asFunction<int Function(int, int)>();

  int fstat(
    int arg0,
    ffi.Pointer<stat> arg1,
  ) {
    return _fstat(
      arg0,
      arg1,
    );
  }

  late final _fstatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<stat>)>>(
          'fstat');
  late final _fstat =
      _fstatPtr.asFunction<int Function(int, ffi.Pointer<stat>)>();

  int lstat(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<stat> arg1,
  ) {
    return _lstat(
      arg0,
      arg1,
    );
  }

  late final _lstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>>('lstat');
  late final _lstat = _lstatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>();

  int mkdir(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mkdir(
      arg0,
      arg1,
    );
  }

  late final _mkdirPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'mkdir');
  late final _mkdir =
      _mkdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkfifo(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mkfifo(
      arg0,
      arg1,
    );
  }

  late final _mkfifoPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'mkfifo');
  late final _mkfifo =
      _mkfifoPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int stat1(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<stat> arg1,
  ) {
    return _stat1(
      arg0,
      arg1,
    );
  }

  late final _stat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>>('stat');
  late final _stat1 = _stat1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>();

  int mknod(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mknodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t, dev_t)>>('mknod');
  late final _mknod =
      _mknodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int umask(
    int arg0,
  ) {
    return _umask(
      arg0,
    );
  }

  late final _umaskPtr =
      _lookup<ffi.NativeFunction<mode_t Function(mode_t)>>('umask');
  late final _umask = _umaskPtr.asFunction<int Function(int)>();

  int fchmodat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _fchmodat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fchmodatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, mode_t, ffi.Int)>>('fchmodat');
  late final _fchmodat = _fchmodatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int fstatat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<stat> arg2,
    int arg3,
  ) {
    return _fstatat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fstatatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<stat>,
              ffi.Int)>>('fstatat');
  late final _fstatat = _fstatatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<stat>, int)>();

  int mkdirat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mkdirat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mkdiratPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, mode_t)>>('mkdirat');
  late final _mkdirat =
      _mkdiratPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int futimens(
    int __fd,
    ffi.Pointer<timespec> __times,
  ) {
    return _futimens(
      __fd,
      __times,
    );
  }

  late final _futimensPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>>(
      'futimens');
  late final _futimens =
      _futimensPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int utimensat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<timespec> __times,
    int __flag,
  ) {
    return _utimensat(
      __fd,
      __path,
      __times,
      __flag,
    );
  }

  late final _utimensatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<timespec>, ffi.Int)>>('utimensat');
  late final _utimensat = _utimensatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<timespec>, int)>();

  int chflags(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _chflags(
      arg0,
      arg1,
    );
  }

  late final _chflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uint32_t)>>('chflags');
  late final _chflags =
      _chflagsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int chmodx_np(
    ffi.Pointer<ffi.Char> arg0,
    filesec_t arg1,
  ) {
    return _chmodx_np(
      arg0,
      arg1,
    );
  }

  late final _chmodx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, filesec_t)>>('chmodx_np');
  late final _chmodx_np = _chmodx_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, filesec_t)>();

  int fchflags(
    int arg0,
    int arg1,
  ) {
    return _fchflags(
      arg0,
      arg1,
    );
  }

  late final _fchflagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __uint32_t)>>(
          'fchflags');
  late final _fchflags = _fchflagsPtr.asFunction<int Function(int, int)>();

  int fchmodx_np(
    int arg0,
    filesec_t arg1,
  ) {
    return _fchmodx_np(
      arg0,
      arg1,
    );
  }

  late final _fchmodx_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, filesec_t)>>(
          'fchmodx_np');
  late final _fchmodx_np =
      _fchmodx_npPtr.asFunction<int Function(int, filesec_t)>();

  int fstatx_np(
    int arg0,
    ffi.Pointer<stat> arg1,
    filesec_t arg2,
  ) {
    return _fstatx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fstatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<stat>, filesec_t)>>('fstatx_np');
  late final _fstatx_np = _fstatx_npPtr
      .asFunction<int Function(int, ffi.Pointer<stat>, filesec_t)>();

  int lchflags(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _lchflags(
      arg0,
      arg1,
    );
  }

  late final _lchflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uint32_t)>>('lchflags');
  late final _lchflags =
      _lchflagsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int lchmod(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _lchmod(
      arg0,
      arg1,
    );
  }

  late final _lchmodPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'lchmod');
  late final _lchmod =
      _lchmodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int lstatx_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<stat> arg1,
    filesec_t arg2,
  ) {
    return _lstatx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lstatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>,
              filesec_t)>>('lstatx_np');
  late final _lstatx_np = _lstatx_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>, filesec_t)>();

  int mkdirx_np(
    ffi.Pointer<ffi.Char> arg0,
    filesec_t arg1,
  ) {
    return _mkdirx_np(
      arg0,
      arg1,
    );
  }

  late final _mkdirx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, filesec_t)>>('mkdirx_np');
  late final _mkdirx_np = _mkdirx_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, filesec_t)>();

  int mkfifox_np(
    ffi.Pointer<ffi.Char> arg0,
    filesec_t arg1,
  ) {
    return _mkfifox_np(
      arg0,
      arg1,
    );
  }

  late final _mkfifox_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, filesec_t)>>('mkfifox_np');
  late final _mkfifox_np = _mkfifox_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, filesec_t)>();

  int statx_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<stat> arg1,
    filesec_t arg2,
  ) {
    return _statx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _statx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>,
              filesec_t)>>('statx_np');
  late final _statx_np = _statx_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>, filesec_t)>();

  int umaskx_np(
    filesec_t arg0,
  ) {
    return _umaskx_np(
      arg0,
    );
  }

  late final _umaskx_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(filesec_t)>>('umaskx_np');
  late final _umaskx_np = _umaskx_npPtr.asFunction<int Function(filesec_t)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone1 = _lookup<ffi.Long>('timezone');

  int get timezone1 => _timezone1.value;

  set timezone1(int value) => _timezone1.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.Int32)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int adjtime(
    ffi.Pointer<timeval> arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _adjtime(
      arg0,
      arg1,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int futimes(
    int arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _futimes(
      arg0,
      arg1,
    );
  }

  late final _futimesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>(
      'futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _lutimes(
      arg0,
      arg1,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int settimeofday(
    ffi.Pointer<timeval> arg0,
    ffi.Pointer<timezone> arg1,
  ) {
    return _settimeofday(
      arg0,
      arg1,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone>)>();

  int getitimer(
    int arg0,
    ffi.Pointer<itimerval> arg1,
  ) {
    return _getitimer(
      arg0,
      arg1,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int gettimeofday(
    ffi.Pointer<timeval> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _gettimeofday(
      arg0,
      arg1,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int setitimer(
    int arg0,
    ffi.Pointer<itimerval> arg1,
    ffi.Pointer<itimerval> arg2,
  ) {
    return _setitimer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _utimes(
      arg0,
      arg1,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistbulkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Uint64)>>('getattrlistbulk');
  late final _getattrlistbulk = _getattrlistbulkPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedLong)>>('getattrlistat');
  late final _getattrlistat = _getattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Uint32)>>('setattrlistat');
  late final _setattrlistat = _setattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int faccessat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, uid_t, gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int linkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int readlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  void _exit(
    int arg0,
  ) {
    return __exit(
      arg0,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int access(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _access(
      arg0,
      arg1,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int alarm(
    int arg0,
  ) {
    return _alarm(
      arg0,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int chdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chdir(
      arg0,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int chown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int dup(
    int arg0,
  ) {
    return _dup(
      arg0,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int arg0,
    int arg1,
  ) {
    return _dup2(
      arg0,
      arg1,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execl(
      __path,
      __arg0,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execle(
      __path,
      __arg0,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execlp(
      __file,
      __arg0,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execve(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getcwd(
      arg0,
      arg1,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _getgroups(
      arg0,
      arg1,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int isatty(
    int arg0,
  ) {
    return _isatty(
      arg0,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int link(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _link(
      arg0,
      arg1,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Int, off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _pathconf(
      arg0,
      arg1,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int pipe(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _pipe(
      arg0,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rmdir(
      arg0,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, pid_t)>>('setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int sleep(
    int arg0,
  ) {
    return _sleep(
      arg0,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int sysconf(
    int arg0,
  ) {
    return _sysconf(
      arg0,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int tcgetpgrp(
    int arg0,
  ) {
    return _tcgetpgrp(
      arg0,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> ttyname(
    int arg0,
  ) {
    return _ttyname(
      arg0,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unlink(
      arg0,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int confstr(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _brk(
      arg0,
    );
  }

  late final _brkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('brk');
  late final _brk = _brkPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int chroot(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chroot(
      arg0,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _crypt(
      arg0,
      arg1,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void encrypt(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _encrypt(
      arg0,
      arg1,
    );
  }

  late final _encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('encrypt');
  late final _encrypt =
      _encryptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  int fchdir(
    int arg0,
  ) {
    return _fchdir(
      arg0,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getpass(
      arg0,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getwd(
      arg0,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int lchown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int nice(
    int arg0,
  ) {
    return _nice(
      arg0,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    return _sbrk(
      arg0,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t, gid_t)>>('setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, uid_t)>>('setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _truncate(
      arg0,
      arg1,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ualarm(
    int arg0,
    int arg1,
  ) {
    return _ualarm(
      arg0,
      arg1,
    );
  }

  late final _ualarmPtr =
      _lookup<ffi.NativeFunction<useconds_t Function(useconds_t, useconds_t)>>(
          'ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int arg0,
  ) {
    return _usleep(
      arg0,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  int fsync(
    int arg0,
  ) {
    return _fsync(
      arg0,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, uid_t, gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int gethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _gethostname(
      arg0,
      arg1,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int readlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int symlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _symlink(
      arg0,
      arg1,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<sigset_t> arg5,
  ) {
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<sigset_t>)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
  ) {
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _accessx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<accessx_descriptor>, ffi.Size,
              ffi.Pointer<ffi.Int>, uid_t)>>('accessx_np');
  late final _accessx_np = _accessx_npPtr.asFunction<
      int Function(
          ffi.Pointer<accessx_descriptor>, int, ffi.Pointer<ffi.Int>, int)>();

  int acct(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _acct(
      arg0,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int add_profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _add_profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('add_profil');
  late final _add_profil = _add_profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  int execvP(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __searchpath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  late final _execvPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvP');
  late final _execvP = _execvPPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> fflagstostr(
    int arg0,
  ) {
    return _fflagstostr(
      arg0,
    );
  }

  late final _fflagstostrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'fflagstostr');
  late final _fflagstostr =
      _fflagstostrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  late final _getdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int getgrouplist(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getgrouplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('getgrouplist');
  late final _getgrouplist = _getgrouplistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int gethostuuid(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<timespec>)>>('gethostuuid');
  late final _gethostuuid = _gethostuuidPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<timespec>)>();

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getmode(
      arg0,
      arg1,
    );
  }

  late final _getmodePtr = _lookup<
          ffi.NativeFunction<mode_t Function(ffi.Pointer<ffi.Void>, mode_t)>>(
      'getmode');
  late final _getmode =
      _getmodePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int getpeereid(
    int arg0,
    ffi.Pointer<uid_t> arg1,
    ffi.Pointer<gid_t> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('getpeereid');
  late final _getpeereid = _getpeereidPtr
      .asFunction<int Function(int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int getsgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getsgroups_np');
  late final _getsgroups_np = _getsgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getwgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getwgroups_np');
  late final _getwgroups_np = _getwgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  int initgroups(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _initgroups(
      arg0,
      arg1,
    );
  }

  late final _initgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'initgroups');
  late final _initgroups =
      _initgroupsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int issetugid() {
    return _issetugid();
  }

  late final _issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('issetugid');
  late final _issetugid = _issetugidPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkdtemp(
      arg0,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkpath_np(
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpath_np(
      path,
      omode,
    );
  }

  late final _mkpath_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'mkpath_np');
  late final _mkpath_np =
      _mkpath_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkpathat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  late final _mkpathat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, mode_t)>>('mkpathat_np');
  late final _mkpathat_np = _mkpathat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkostemp(
    ffi.Pointer<ffi.Char> path,
    int oflags,
  ) {
    return _mkostemp(
      path,
      oflags,
    );
  }

  late final _mkostempPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkostemp');
  late final _mkostemp =
      _mkostempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkostemps(
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('mkostemps');
  late final _mkostemps =
      _mkostempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mkstemp_dprotected_np(
    ffi.Pointer<ffi.Char> path,
    int dpclass,
    int dpflags,
  ) {
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  late final _mkstemp_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkstemp_dprotected_np');
  late final _mkstemp_dprotected_np = _mkstemp_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> mkdtempat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  late final _mkdtempat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('mkdtempat_np');
  late final _mkdtempat_np = _mkdtempat_npPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
  ) {
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  late final _mkstempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mkstempsat_np');
  late final _mkstempsat_np = _mkstempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkostempsat_np');
  late final _mkostempsat_np = _mkostempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  late final _nfssvcPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'nfssvc');
  late final _nfssvc =
      _nfssvcPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_setugid_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, gid_t)>>(
          'pthread_setugid_np');
  late final _pthread_setugid_np =
      _pthread_setugid_npPtr.asFunction<int Function(int, int)>();

  int pthread_getugid_np(
    ffi.Pointer<uid_t> arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_getugid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('pthread_getugid_np');
  late final _pthread_getugid_np = _pthread_getugid_npPtr
      .asFunction<int Function(ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int reboot(
    int arg0,
  ) {
    return _reboot(
      arg0,
    );
  }

  late final _rebootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('reboot');
  late final _reboot = _rebootPtr.asFunction<int Function(int)>();

  int revoke(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _revoke(
      arg0,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _rcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('rcmd');
  late final _rcmd = _rcmdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
    int arg6,
  ) {
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _rcmd_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('rcmd_af');
  late final _rcmd_af = _rcmd_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int rresvport(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _rresvport(
      arg0,
    );
  }

  late final _rresvportPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'rresvport');
  late final _rresvport =
      _rresvportPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int rresvport_af(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  late final _rresvport_afPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'rresvport_af');
  late final _rresvport_af =
      _rresvport_afPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _iruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('iruserok');
  late final _iruserok = _iruserokPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _iruserok_saPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('iruserok_sa');
  late final _iruserok_sa = _iruserok_saPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ruserok(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ruserok');
  late final _ruserok = _ruserokPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  late final _setdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _setgroups(
      arg0,
      arg1,
    );
  }

  late final _setgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'setgroups');
  late final _setgroups =
      _setgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<void Function(int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sethostname(
      arg0,
      arg1,
    );
  }

  late final _sethostnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int setlogin(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setlogin(
      arg0,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setmode(
      arg0,
    );
  }

  late final _setmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>>('setmode');
  late final _setmode = _setmodePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setrgid');
  late final _setrgid = _setrgidPtr.asFunction<int Function(int)>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setruid');
  late final _setruid = _setruidPtr.asFunction<int Function(int)>();

  int setsgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setsgroups_np');
  late final _setsgroups_np = _setsgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int setwgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setwgroups_np');
  late final _setwgroups_np = _setwgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  int strtofflags(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.UnsignedLong> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
  ) {
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strtofflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>)>>('strtofflags');
  late final _strtofflags = _strtofflagsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.UnsignedLong>)>();

  int swapon(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _swapon(
      arg0,
    );
  }

  late final _swaponPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'swapon');
  late final _swapon =
      _swaponPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int undelete(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _undelete(
      arg0,
    );
  }

  late final _undeletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'undelete');
  late final _undelete =
      _undeletePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unwhiteout(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unwhiteout(
      arg0,
    );
  }

  late final _unwhiteoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unwhiteout');
  late final _unwhiteout =
      _unwhiteoutPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int arg0,
  ) {
    return _syscall(
      arg0,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fgetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fgetattrlist');
  late final _fgetattrlist = _fgetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fsetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fsetattrlist');
  late final _fsetattrlist = _fsetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('getattrlist');
  late final _getattrlist = _getattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('setattrlist');
  late final _setattrlist = _setattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int exchangedata(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _exchangedataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('exchangedata');
  late final _exchangedata = _exchangedataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
    int arg7,
  ) {
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _getdirentriesattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('getdirentriesattr');
  late final _getdirentriesattr = _getdirentriesattrPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          int)>();

  int searchfs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _searchfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<fssearchblock>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<searchstate>)>>('searchfs');
  late final _searchfs = _searchfsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<fssearchblock>,
          ffi.Pointer<ffi.UnsignedLong>, int, int, ffi.Pointer<searchstate>)>();

  int fsctl(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('fsctl');
  late final _fsctl = _fsctlPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>, int)>();

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ffsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedLong, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ffsctl');
  late final _ffsctl = _ffsctlPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _fsync_volume_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'fsync_volume_np');
  late final _fsync_volume_np =
      _fsync_volume_npPtr.asFunction<int Function(int, int)>();

  int sync_volume_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _sync_volume_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sync_volume_np');
  late final _sync_volume_np =
      _sync_volume_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _optreset = _lookup<ffi.Int>('optreset');

  int get optreset => _optreset.value;

  set optreset(int value) => _optreset.value = value;

  int __math_errhandling() {
    return ___math_errhandling();
  }

  late final ___math_errhandlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__math_errhandling');
  late final ___math_errhandling =
      ___math_errhandlingPtr.asFunction<int Function()>();

  int __fpclassifyf(
    double arg0,
  ) {
    return ___fpclassifyf(
      arg0,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __fpclassifyd(
    double arg0,
  ) {
    return ___fpclassifyd(
      arg0,
    );
  }

  late final ___fpclassifydPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__fpclassifyd');
  late final ___fpclassifyd =
      ___fpclassifydPtr.asFunction<int Function(double)>();

  /// *
  /// Math Functions                                *
  /// *
  double acosf(
    double arg0,
  ) {
    return _acosf(
      arg0,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acos(
    double arg0,
  ) {
    return _acos(
      arg0,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asinf(
    double arg0,
  ) {
    return _asinf(
      arg0,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asin(
    double arg0,
  ) {
    return _asin(
      arg0,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atanf(
    double arg0,
  ) {
    return _atanf(
      arg0,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan(
    double arg0,
  ) {
    return _atan(
      arg0,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2f(
    double arg0,
    double arg1,
  ) {
    return _atan2f(
      arg0,
      arg1,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atan2(
    double arg0,
    double arg1,
  ) {
    return _atan2(
      arg0,
      arg1,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cosf(
    double arg0,
  ) {
    return _cosf(
      arg0,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cos(
    double arg0,
  ) {
    return _cos(
      arg0,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sinf(
    double arg0,
  ) {
    return _sinf(
      arg0,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sin(
    double arg0,
  ) {
    return _sin(
      arg0,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tanf(
    double arg0,
  ) {
    return _tanf(
      arg0,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tan(
    double arg0,
  ) {
    return _tan(
      arg0,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double acoshf(
    double arg0,
  ) {
    return _acoshf(
      arg0,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double acosh(
    double arg0,
  ) {
    return _acosh(
      arg0,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinhf(
    double arg0,
  ) {
    return _asinhf(
      arg0,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double asinh(
    double arg0,
  ) {
    return _asinh(
      arg0,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanhf(
    double arg0,
  ) {
    return _atanhf(
      arg0,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double atanh(
    double arg0,
  ) {
    return _atanh(
      arg0,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double coshf(
    double arg0,
  ) {
    return _coshf(
      arg0,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double cosh(
    double arg0,
  ) {
    return _cosh(
      arg0,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinhf(
    double arg0,
  ) {
    return _sinhf(
      arg0,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sinh(
    double arg0,
  ) {
    return _sinh(
      arg0,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanhf(
    double arg0,
  ) {
    return _tanhf(
      arg0,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double tanh(
    double arg0,
  ) {
    return _tanh(
      arg0,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double expf(
    double arg0,
  ) {
    return _expf(
      arg0,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double exp(
    double arg0,
  ) {
    return _exp(
      arg0,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2f(
    double arg0,
  ) {
    return _exp2f(
      arg0,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double exp2(
    double arg0,
  ) {
    return _exp2(
      arg0,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1f(
    double arg0,
  ) {
    return _expm1f(
      arg0,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double expm1(
    double arg0,
  ) {
    return _expm1(
      arg0,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double logf(
    double arg0,
  ) {
    return _logf(
      arg0,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log(
    double arg0,
  ) {
    return _log(
      arg0,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10f(
    double arg0,
  ) {
    return _log10f(
      arg0,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log10(
    double arg0,
  ) {
    return _log10(
      arg0,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log2f(
    double arg0,
  ) {
    return _log2f(
      arg0,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double log2(
    double arg0,
  ) {
    return _log2(
      arg0,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log1pf(
    double arg0,
  ) {
    return _log1pf(
      arg0,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log1p(
    double arg0,
  ) {
    return _log1p(
      arg0,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logbf(
    double arg0,
  ) {
    return _logbf(
      arg0,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logb(
    double arg0,
  ) {
    return _logb(
      arg0,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double modff(
    double arg0,
    ffi.Pointer<ffi.Float> arg1,
  ) {
    return _modff(
      arg0,
      arg1,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double modf(
    double arg0,
    ffi.Pointer<ffi.Double> arg1,
  ) {
    return _modf(
      arg0,
      arg1,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double ldexpf(
    double arg0,
    int arg1,
  ) {
    return _ldexpf(
      arg0,
      arg1,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double ldexp(
    double arg0,
    int arg1,
  ) {
    return _ldexp(
      arg0,
      arg1,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double frexpf(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexpf(
      arg0,
      arg1,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double frexp(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexp(
      arg0,
      arg1,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  int ilogbf(
    double arg0,
  ) {
    return _ilogbf(
      arg0,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int ilogb(
    double arg0,
  ) {
    return _ilogb(
      arg0,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbnf(
    double arg0,
    int arg1,
  ) {
    return _scalbnf(
      arg0,
      arg1,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double arg0,
    int arg1,
  ) {
    return _scalbn(
      arg0,
      arg1,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double arg0,
    int arg1,
  ) {
    return _scalblnf(
      arg0,
      arg1,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbln(
    double arg0,
    int arg1,
  ) {
    return _scalbln(
      arg0,
      arg1,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double fabsf(
    double arg0,
  ) {
    return _fabsf(
      arg0,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double fabs(
    double arg0,
  ) {
    return _fabs(
      arg0,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double cbrtf(
    double arg0,
  ) {
    return _cbrtf(
      arg0,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double cbrt(
    double arg0,
  ) {
    return _cbrt(
      arg0,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double hypotf(
    double arg0,
    double arg1,
  ) {
    return _hypotf(
      arg0,
      arg1,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double hypot(
    double arg0,
    double arg1,
  ) {
    return _hypot(
      arg0,
      arg1,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double powf(
    double arg0,
    double arg1,
  ) {
    return _powf(
      arg0,
      arg1,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double pow(
    double arg0,
    double arg1,
  ) {
    return _pow(
      arg0,
      arg1,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double arg0,
  ) {
    return _sqrtf(
      arg0,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double sqrt(
    double arg0,
  ) {
    return _sqrt(
      arg0,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double ceilf(
    double arg0,
  ) {
    return _ceilf(
      arg0,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double ceil(
    double arg0,
  ) {
    return _ceil(
      arg0,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double floorf(
    double arg0,
  ) {
    return _floorf(
      arg0,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double floor(
    double arg0,
  ) {
    return _floor(
      arg0,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double arg0,
  ) {
    return _nearbyintf(
      arg0,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nearbyint(
    double arg0,
  ) {
    return _nearbyint(
      arg0,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double rintf(
    double arg0,
  ) {
    return _rintf(
      arg0,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double rint(
    double arg0,
  ) {
    return _rint(
      arg0,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  int lrintf(
    double arg0,
  ) {
    return _lrintf(
      arg0,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lrint(
    double arg0,
  ) {
    return _lrint(
      arg0,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  double roundf(
    double arg0,
  ) {
    return _roundf(
      arg0,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double round(
    double arg0,
  ) {
    return _round(
      arg0,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  int lroundf(
    double arg0,
  ) {
    return _lroundf(
      arg0,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int lround(
    double arg0,
  ) {
    return _lround(
      arg0,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llrintf(
    double arg0,
  ) {
    return _llrintf(
      arg0,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llrint(
    double arg0,
  ) {
    return _llrint(
      arg0,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llroundf(
    double arg0,
  ) {
    return _llroundf(
      arg0,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int llround(
    double arg0,
  ) {
    return _llround(
      arg0,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double truncf(
    double arg0,
  ) {
    return _truncf(
      arg0,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double trunc(
    double arg0,
  ) {
    return _trunc(
      arg0,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double fmodf(
    double arg0,
    double arg1,
  ) {
    return _fmodf(
      arg0,
      arg1,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double arg0,
    double arg1,
  ) {
    return _fmod(
      arg0,
      arg1,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double arg0,
    double arg1,
  ) {
    return _remainderf(
      arg0,
      arg1,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remainder(
    double arg0,
    double arg1,
  ) {
    return _remainder(
      arg0,
      arg1,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquof(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double remquo(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double copysignf(
    double arg0,
    double arg1,
  ) {
    return _copysignf(
      arg0,
      arg1,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysign(
    double arg0,
    double arg1,
  ) {
    return _copysign(
      arg0,
      arg1,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nanf(
      arg0,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nan(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nan(
      arg0,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nextafterf(
    double arg0,
    double arg1,
  ) {
    return _nextafterf(
      arg0,
      arg1,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double nextafter(
    double arg0,
    double arg1,
  ) {
    return _nextafter(
      arg0,
      arg1,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double arg0,
    double arg1,
  ) {
    return _fdimf(
      arg0,
      arg1,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fdim(
    double arg0,
    double arg1,
  ) {
    return _fdim(
      arg0,
      arg1,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double arg0,
    double arg1,
  ) {
    return _fmaxf(
      arg0,
      arg1,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fmax(
    double arg0,
    double arg1,
  ) {
    return _fmax(
      arg0,
      arg1,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fminf(
    double arg0,
    double arg1,
  ) {
    return _fminf(
      arg0,
      arg1,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmin(
    double arg0,
    double arg1,
  ) {
    return _fmin(
      arg0,
      arg1,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fmaf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fma(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fma(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  /// Apple extensions to the C standard                                        *
  double __exp10f(
    double arg0,
  ) {
    return ___exp10f(
      arg0,
    );
  }

  late final ___exp10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp10f');
  late final ___exp10f = ___exp10fPtr.asFunction<double Function(double)>();

  double __exp10(
    double arg0,
  ) {
    return ___exp10(
      arg0,
    );
  }

  late final ___exp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp10');
  late final ___exp10 = ___exp10Ptr.asFunction<double Function(double)>();

  double __cospif(
    double arg0,
  ) {
    return ___cospif(
      arg0,
    );
  }

  late final ___cospifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cospif');
  late final ___cospif = ___cospifPtr.asFunction<double Function(double)>();

  double __cospi(
    double arg0,
  ) {
    return ___cospi(
      arg0,
    );
  }

  late final ___cospiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cospi');
  late final ___cospi = ___cospiPtr.asFunction<double Function(double)>();

  double __sinpif(
    double arg0,
  ) {
    return ___sinpif(
      arg0,
    );
  }

  late final ___sinpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinpif');
  late final ___sinpif = ___sinpifPtr.asFunction<double Function(double)>();

  double __sinpi(
    double arg0,
  ) {
    return ___sinpi(
      arg0,
    );
  }

  late final ___sinpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinpi');
  late final ___sinpi = ___sinpiPtr.asFunction<double Function(double)>();

  double __tanpif(
    double arg0,
  ) {
    return ___tanpif(
      arg0,
    );
  }

  late final ___tanpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanpif');
  late final ___tanpif = ___tanpifPtr.asFunction<double Function(double)>();

  double __tanpi(
    double arg0,
  ) {
    return ___tanpi(
      arg0,
    );
  }

  late final ___tanpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanpi');
  late final ___tanpi = ___tanpiPtr.asFunction<double Function(double)>();

  __float2 __sincosf_stret(
    double arg0,
  ) {
    return ___sincosf_stret(
      arg0,
    );
  }

  late final ___sincosf_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincosf_stret');
  late final ___sincosf_stret =
      ___sincosf_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincos_stret(
    double arg0,
  ) {
    return ___sincos_stret(
      arg0,
    );
  }

  late final ___sincos_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincos_stret');
  late final ___sincos_stret =
      ___sincos_stretPtr.asFunction<__double2 Function(double)>();

  __float2 __sincospif_stret(
    double arg0,
  ) {
    return ___sincospif_stret(
      arg0,
    );
  }

  late final ___sincospif_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincospif_stret');
  late final ___sincospif_stret =
      ___sincospif_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincospi_stret(
    double arg0,
  ) {
    return ___sincospi_stret(
      arg0,
    );
  }

  late final ___sincospi_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincospi_stret');
  late final ___sincospi_stret =
      ___sincospi_stretPtr.asFunction<__double2 Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double scalb(
    double arg0,
    double arg1,
  ) {
    return _scalb(
      arg0,
      arg1,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  int hc_lzma1_decompress(
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> in_len,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Char> props,
  ) {
    return _hc_lzma1_decompress(
      in1,
      in_len,
      out,
      out_len,
      props,
    );
  }

  late final _hc_lzma1_decompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('hc_lzma1_decompress');
  late final _hc_lzma1_decompress = _hc_lzma1_decompressPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>)>();

  int hc_lzma2_decompress(
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> in_len,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Char> props,
  ) {
    return _hc_lzma2_decompress(
      in1,
      in_len,
      out,
      out_len,
      props,
    );
  }

  late final _hc_lzma2_decompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('hc_lzma2_decompress');
  late final _hc_lzma2_decompress = _hc_lzma2_decompressPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> hc_lzma_alloc(
    int p,
    int size,
  ) {
    return _hc_lzma_alloc(
      p,
      size,
    );
  }

  late final _hc_lzma_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Size)>>('hc_lzma_alloc');
  late final _hc_lzma_alloc =
      _hc_lzma_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void hc_lzma_free(
    int p,
    ffi.Pointer<ffi.Void> address,
  ) {
    return _hc_lzma_free(
      p,
      address,
    );
  }

  late final _hc_lzma_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>('hc_lzma_free');
  late final _hc_lzma_free =
      _hc_lzma_freePtr.asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ffi.Int> __libiconv_version =
      _lookup<ffi.Int>('_libiconv_version');

  int get _libiconv_version => __libiconv_version.value;

  set _libiconv_version(int value) => __libiconv_version.value = value;

  iconv_t iconv_open(
    ffi.Pointer<ffi.Char> __tocode,
    ffi.Pointer<ffi.Char> __fromcode,
  ) {
    return _iconv_open(
      __tocode,
      __fromcode,
    );
  }

  late final _iconv_openPtr = _lookup<
      ffi.NativeFunction<
          iconv_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('iconv_open');
  late final _iconv_open = _iconv_openPtr.asFunction<
      iconv_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int iconv(
    iconv_t __cd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __inbuf,
    ffi.Pointer<ffi.Size> __inbytesleft,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __outbuf,
    ffi.Pointer<ffi.Size> __outbytesleft,
  ) {
    return _iconv(
      __cd,
      __inbuf,
      __inbytesleft,
      __outbuf,
      __outbytesleft,
    );
  }

  late final _iconvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              iconv_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('iconv');
  late final _iconv = _iconvPtr.asFunction<
      int Function(
          iconv_t,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>)>();

  int iconv_close(
    iconv_t _cd,
  ) {
    return _iconv_close(
      _cd,
    );
  }

  late final _iconv_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(iconv_t)>>('iconv_close');
  late final _iconv_close = _iconv_closePtr.asFunction<int Function(iconv_t)>();

  int iconvctl(
    iconv_t cd,
    int request,
    ffi.Pointer<ffi.Void> argument,
  ) {
    return _iconvctl(
      cd,
      request,
      argument,
    );
  }

  late final _iconvctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              iconv_t, ffi.Int, ffi.Pointer<ffi.Void>)>>('iconvctl');
  late final _iconvctl = _iconvctlPtr
      .asFunction<int Function(iconv_t, int, ffi.Pointer<ffi.Void>)>();

  void iconvlist(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.UnsignedInt,
                    ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Void>)>>
        do_one,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _iconvlist(
      do_one,
      data,
    );
  }

  late final _iconvlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.UnsignedInt,
                          ffi.Pointer<ffi.Pointer<ffi.Char>>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('iconvlist');
  late final _iconvlist = _iconvlistPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.UnsignedInt,
                      ffi.Pointer<ffi.Pointer<ffi.Char>>,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> iconv_canonicalize(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _iconv_canonicalize(
      name,
    );
  }

  late final _iconv_canonicalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('iconv_canonicalize');
  late final _iconv_canonicalize = _iconv_canonicalizePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void libiconv_set_relocation_prefix(
    ffi.Pointer<ffi.Char> orig_prefix,
    ffi.Pointer<ffi.Char> curr_prefix,
  ) {
    return _libiconv_set_relocation_prefix(
      orig_prefix,
      curr_prefix,
    );
  }

  late final _libiconv_set_relocation_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('libiconv_set_relocation_prefix');
  late final _libiconv_set_relocation_prefix =
      _libiconv_set_relocation_prefixPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_min(
    int arg0,
  ) {
    return _sched_get_priority_min(
      arg0,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_get_priority_max(
    int arg0,
  ) {
    return _sched_get_priority_max(
      arg0,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  /// !
  /// @function qos_class_self
  ///
  /// @abstract
  /// Returns the requested QOS class of the current thread.
  ///
  /// @return
  /// One of the QOS class values in qos_class_t.
  int qos_class_self() {
    return _qos_class_self();
  }

  late final _qos_class_selfPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_self');
  late final _qos_class_self = _qos_class_selfPtr.asFunction<int Function()>();

  /// !
  /// @function qos_class_main
  ///
  /// @abstract
  /// Returns the initial requested QOS class of the main thread.
  ///
  /// @discussion
  /// The QOS class that the main thread of a process is created with depends on
  /// the type of process (e.g. application or daemon) and on how it has been
  /// launched.
  ///
  /// This function returns that initial requested QOS class value chosen by the
  /// system to enable propagation of that classification to matching work not
  /// executing on the main thread.
  ///
  /// @return
  /// One of the QOS class values in qos_class_t.
  int qos_class_main() {
    return _qos_class_main();
  }

  late final _qos_class_mainPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_main');
  late final _qos_class_main = _qos_class_mainPtr.asFunction<int Function()>();

  /// !
  /// @function pthread_attr_set_qos_class_np
  ///
  /// @abstract
  /// Sets the QOS class and relative priority of a pthread attribute structure
  /// which may be used to specify the requested QOS class of newly created
  /// threads.
  ///
  /// @discussion
  /// The QOS class and relative priority represent an overall combination of
  /// system quality of service attributes on a thread.
  ///
  /// Subsequent calls to interfaces such as pthread_attr_setschedparam() that are
  /// incompatible or in conflict with the QOS class system will unset the QOS
  /// class requested with this interface and pthread_attr_get_qos_class_np() will
  /// return QOS_CLASS_UNSPECIFIED.
  ///
  /// @param __attr
  /// The pthread attribute structure to modify.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// EINVAL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// EINVAL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_attr_set_qos_class_np(
    ffi.Pointer<pthread_attr_t> __attr,
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_attr_set_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_attr_set_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, qos_class_t,
              ffi.Int)>>('pthread_attr_set_qos_class_np');
  late final _pthread_attr_set_qos_class_np = _pthread_attr_set_qos_class_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int, int)>();

  /// !
  /// @function pthread_attr_get_qos_class_np
  ///
  /// @abstract
  /// Gets the QOS class and relative priority of a pthread attribute structure.
  ///
  /// @param __attr
  /// The pthread attribute structure to inspect.
  ///
  /// @param __qos_class
  /// On output, a QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// - QOS_CLASS_UNSPECIFIED
  /// This value may be NULL in which case no value is returned.
  ///
  /// @param __relative_priority
  /// On output, a relative priority offset within the QOS class.
  /// This value may be NULL in which case no value is returned.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_attr_get_qos_class_np(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<qos_class_t> __qos_class,
    ffi.Pointer<ffi.Int> __relative_priority,
  ) {
    return _pthread_attr_get_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_attr_get_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_get_qos_class_np');
  late final _pthread_attr_get_qos_class_np =
      _pthread_attr_get_qos_class_npPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>();

  /// !
  /// @function pthread_set_qos_class_self_np
  ///
  /// @abstract
  /// Sets the requested QOS class and relative priority of the current thread.
  ///
  /// @discussion
  /// The QOS class and relative priority represent an overall combination of
  /// system quality of service attributes on a thread.
  ///
  /// Subsequent calls to interfaces such as pthread_setschedparam() that are
  /// incompatible or in conflict with the QOS class system will unset the QOS
  /// class requested with this interface and pthread_get_qos_class_np() will
  /// return QOS_CLASS_UNSPECIFIED thereafter. A thread so modified is permanently
  /// opted-out of the QOS class system and calls to this function to request a QOS
  /// class for such a thread will fail and return EPERM.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// EINVAL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// EINVAL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_set_qos_class_self_np(
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_set_qos_class_self_np(
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_set_qos_class_self_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(qos_class_t, ffi.Int)>>(
          'pthread_set_qos_class_self_np');
  late final _pthread_set_qos_class_self_np =
      _pthread_set_qos_class_self_npPtr.asFunction<int Function(int, int)>();

  /// !
  /// @function pthread_get_qos_class_np
  ///
  /// @abstract
  /// Gets the requested QOS class and relative priority of a thread.
  ///
  /// @param __pthread
  /// The target thread to inspect.
  ///
  /// @param __qos_class
  /// On output, a QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// - QOS_CLASS_UNSPECIFIED
  /// This value may be NULL in which case no value is returned.
  ///
  /// @param __relative_priority
  /// On output, a relative priority offset within the QOS class.
  /// This value may be NULL in which case no value is returned.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_get_qos_class_np(
    pthread_t __pthread,
    ffi.Pointer<qos_class_t> __qos_class,
    ffi.Pointer<ffi.Int> __relative_priority,
  ) {
    return _pthread_get_qos_class_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_get_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_get_qos_class_np');
  late final _pthread_get_qos_class_np =
      _pthread_get_qos_class_npPtr.asFunction<
          int Function(
              pthread_t, ffi.Pointer<qos_class_t>, ffi.Pointer<ffi.Int>)>();

  /// !
  /// @function pthread_override_qos_class_start_np
  ///
  /// @abstract
  /// Starts a QOS class override of the specified target thread.
  ///
  /// @discussion
  /// Starting a QOS class override of the specified target thread expresses that
  /// an item of pending work classified with the specified QOS class and relative
  /// priority depends on the completion of the work currently being executed by
  /// the thread (e.g. due to ordering requirements).
  ///
  /// While overrides are in effect, the specified target thread will execute at
  /// the maximum QOS class and relative priority of all overrides and of the QOS
  /// class requested by the thread itself.
  ///
  /// Starting a QOS class override does not modify the target thread's requested
  /// QOS class value and the effect of an override is not visible to the
  /// qos_class_self() and pthread_get_qos_class_np() interfaces.
  ///
  /// The returned newly allocated override object is intended to be associated
  /// with the item of pending work in question. Once the dependency has been
  /// satisfied and enabled that work to begin executing, the QOS class override
  /// must be ended by passing the associated override object to
  /// pthread_override_qos_class_end_np(). Failure to do so will result in the
  /// associated resources to be leaked and the target thread to be permanently
  /// executed at an inappropriately elevated QOS class.
  ///
  /// @param __pthread
  /// The target thread to modify.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// NULL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// NULL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// A newly allocated override object if successful, or NULL if the override
  /// could not be started.
  pthread_override_t pthread_override_qos_class_start_np(
    pthread_t __pthread,
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_override_qos_class_start_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_override_qos_class_start_npPtr = _lookup<
      ffi.NativeFunction<
          pthread_override_t Function(pthread_t, qos_class_t,
              ffi.Int)>>('pthread_override_qos_class_start_np');
  late final _pthread_override_qos_class_start_np =
      _pthread_override_qos_class_start_npPtr
          .asFunction<pthread_override_t Function(pthread_t, int, int)>();

  /// !
  /// @function pthread_override_qos_class_end_np
  ///
  /// @abstract
  /// Ends a QOS class override.
  ///
  /// @discussion
  /// Passing an override object returned by pthread_override_qos_class_start_np()
  /// ends the QOS class override started by that call and deallocates all
  /// associated resources as well as the override object itself.
  ///
  /// The thread starting and the thread ending a QOS class override need not be
  /// identical. If the thread ending the override is the the target thread of the
  /// override itself, it should take care to elevate its requested QOS class
  /// appropriately with pthread_set_qos_class_self_np() before ending the
  /// override.
  ///
  /// @param __override
  /// An override object returned by pthread_override_qos_class_start_np().
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_override_qos_class_end_np(
    pthread_override_t __override,
  ) {
    return _pthread_override_qos_class_end_np(
      __override,
    );
  }

  late final _pthread_override_qos_class_end_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_override_t)>>(
          'pthread_override_qos_class_end_np');
  late final _pthread_override_qos_class_end_np =
      _pthread_override_qos_class_end_npPtr
          .asFunction<int Function(pthread_override_t)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg2,
  ) {
    return _pthread_atfork(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> arg0,
  ) {
    return _pthread_attr_destroy(
      arg0,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getdetachstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _pthread_attr_getguardsize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getinheritsched(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    return _pthread_attr_getschedparam(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getschedpolicy(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getscope(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _pthread_attr_getstack(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _pthread_attr_getstackaddr(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _pthread_attr_getstacksize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> arg0,
  ) {
    return _pthread_attr_init(
      arg0,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setdetachstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setguardsize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setinheritsched(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    return _pthread_attr_setschedparam(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setschedpolicy(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setscope(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _pthread_attr_setstack(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _pthread_attr_setstackaddr(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setstacksize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_cancel(
    pthread_t arg0,
  ) {
    return _pthread_cancel(
      arg0,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(pthread_t)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_broadcast(
      arg0,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_destroy(
      arg0,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_condattr_t> arg1,
  ) {
    return _pthread_cond_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_signal(
      arg0,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    return _pthread_cond_timedwait(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
  ) {
    return _pthread_cond_wait(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> arg0,
  ) {
    return _pthread_condattr_destroy(
      arg0,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> arg0,
  ) {
    return _pthread_condattr_init(
      arg0,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_condattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> arg0,
    int arg1,
  ) {
    return _pthread_condattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_create(
    ffi.Pointer<pthread_t> arg0,
    ffi.Pointer<pthread_attr_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _pthread_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int pthread_detach(
    pthread_t arg0,
  ) {
    return _pthread_detach(
      arg0,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(pthread_t)>();

  int pthread_equal(
    pthread_t arg0,
    pthread_t arg1,
  ) {
    return _pthread_equal(
      arg0,
      arg1,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(pthread_t, pthread_t)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _pthread_exit(
      arg0,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_getconcurrency() {
    return _pthread_getconcurrency();
  }

  late final _pthread_getconcurrencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_getconcurrency');
  late final _pthread_getconcurrency =
      _pthread_getconcurrencyPtr.asFunction<int Function()>();

  int pthread_getschedparam(
    pthread_t arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    return _pthread_getschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(
          pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int arg0,
  ) {
    return _pthread_getspecific(
      arg0,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_join(
    pthread_t arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _pthread_join(
      arg0,
      arg1,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr.asFunction<
      int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg1,
  ) {
    return _pthread_key_create(
      arg0,
      arg1,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int arg0,
  ) {
    return _pthread_key_delete(
      arg0,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_destroy(
      arg0,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutex_getprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> arg0,
    ffi.Pointer<pthread_mutexattr_t> arg1,
  ) {
    return _pthread_mutex_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_lock(
      arg0,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _pthread_mutex_setprioceiling(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_trylock(
      arg0,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_unlock(
      arg0,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> arg0,
  ) {
    return _pthread_mutexattr_destroy(
      arg0,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getprotocol(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_gettype(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getpolicy_np(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getpolicy_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getpolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpolicy_np');
  late final _pthread_mutexattr_getpolicy_np =
      _pthread_mutexattr_getpolicy_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> arg0,
  ) {
    return _pthread_mutexattr_init(
      arg0,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setprotocol(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_settype(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setpolicy_np(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setpolicy_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setpolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpolicy_np');
  late final _pthread_mutexattr_setpolicy_np =
      _pthread_mutexattr_setpolicy_npPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg1,
  ) {
    return _pthread_once(
      arg0,
      arg1,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_destroy(
      arg0,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> arg0,
    ffi.Pointer<pthread_rwlockattr_t> arg1,
  ) {
    return _pthread_rwlock_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_rdlock(
      arg0,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_tryrdlock(
      arg0,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_trywrlock(
      arg0,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_wrlock(
      arg0,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_unlock(
      arg0,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
  ) {
    return _pthread_rwlockattr_destroy(
      arg0,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_rwlockattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
  ) {
    return _pthread_rwlockattr_init(
      arg0,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
    int arg1,
  ) {
    return _pthread_rwlockattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  pthread_t pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self =
      _pthread_selfPtr.asFunction<pthread_t Function()>();

  int pthread_setcancelstate(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_setcancelstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_setcanceltype(
      arg0,
      arg1,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setconcurrency(
    int arg0,
  ) {
    return _pthread_setconcurrency(
      arg0,
    );
  }

  late final _pthread_setconcurrencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pthread_setconcurrency');
  late final _pthread_setconcurrency =
      _pthread_setconcurrencyPtr.asFunction<int Function(int)>();

  int pthread_setschedparam(
    pthread_t arg0,
    int arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    return _pthread_setschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(pthread_t, int, ffi.Pointer<sched_param>)>();

  int pthread_setspecific(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _pthread_setspecific(
      arg0,
      arg1,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  int pthread_is_threaded_np() {
    return _pthread_is_threaded_np();
  }

  late final _pthread_is_threaded_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_is_threaded_np');
  late final _pthread_is_threaded_np =
      _pthread_is_threaded_npPtr.asFunction<int Function()>();

  int pthread_threadid_np(
    pthread_t arg0,
    ffi.Pointer<__uint64_t> arg1,
  ) {
    return _pthread_threadid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_threadid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__uint64_t>)>>('pthread_threadid_np');
  late final _pthread_threadid_np = _pthread_threadid_npPtr
      .asFunction<int Function(pthread_t, ffi.Pointer<__uint64_t>)>();

  int pthread_getname_np(
    pthread_t arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _pthread_getname_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_getname_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('pthread_getname_np');
  late final _pthread_getname_np = _pthread_getname_npPtr
      .asFunction<int Function(pthread_t, ffi.Pointer<ffi.Char>, int)>();

  int pthread_setname_np(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _pthread_setname_np(
      arg0,
    );
  }

  late final _pthread_setname_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pthread_setname_np');
  late final _pthread_setname_np =
      _pthread_setname_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int pthread_main_np() {
    return _pthread_main_np();
  }

  late final _pthread_main_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_main_np');
  late final _pthread_main_np =
      _pthread_main_npPtr.asFunction<int Function()>();

  int pthread_mach_thread_np(
    pthread_t arg0,
  ) {
    return _pthread_mach_thread_np(
      arg0,
    );
  }

  late final _pthread_mach_thread_npPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(pthread_t)>>(
          'pthread_mach_thread_np');
  late final _pthread_mach_thread_np =
      _pthread_mach_thread_npPtr.asFunction<int Function(pthread_t)>();

  int pthread_get_stacksize_np(
    pthread_t arg0,
  ) {
    return _pthread_get_stacksize_np(
      arg0,
    );
  }

  late final _pthread_get_stacksize_npPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(pthread_t)>>(
          'pthread_get_stacksize_np');
  late final _pthread_get_stacksize_np =
      _pthread_get_stacksize_npPtr.asFunction<int Function(pthread_t)>();

  ffi.Pointer<ffi.Void> pthread_get_stackaddr_np(
    pthread_t arg0,
  ) {
    return _pthread_get_stackaddr_np(
      arg0,
    );
  }

  late final _pthread_get_stackaddr_npPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_t)>>(
          'pthread_get_stackaddr_np');
  late final _pthread_get_stackaddr_np = _pthread_get_stackaddr_npPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(pthread_t)>();

  int pthread_cond_signal_thread_np(
    ffi.Pointer<pthread_cond_t> arg0,
    pthread_t arg1,
  ) {
    return _pthread_cond_signal_thread_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_signal_thread_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              pthread_t)>>('pthread_cond_signal_thread_np');
  late final _pthread_cond_signal_thread_np = _pthread_cond_signal_thread_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>, pthread_t)>();

  int pthread_cond_timedwait_relative_np(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    return _pthread_cond_timedwait_relative_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_cond_timedwait_relative_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait_relative_np');
  late final _pthread_cond_timedwait_relative_np =
      _pthread_cond_timedwait_relative_npPtr.asFunction<
          int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_create_suspended_np(
    ffi.Pointer<pthread_t> arg0,
    ffi.Pointer<pthread_attr_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _pthread_create_suspended_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pthread_create_suspended_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create_suspended_np');
  late final _pthread_create_suspended_np =
      _pthread_create_suspended_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  pthread_t pthread_from_mach_thread_np(
    int arg0,
  ) {
    return _pthread_from_mach_thread_np(
      arg0,
    );
  }

  late final _pthread_from_mach_thread_npPtr =
      _lookup<ffi.NativeFunction<pthread_t Function(mach_port_t)>>(
          'pthread_from_mach_thread_np');
  late final _pthread_from_mach_thread_np =
      _pthread_from_mach_thread_npPtr.asFunction<pthread_t Function(int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  void pthread_yield_np() {
    return _pthread_yield_np();
  }

  late final _pthread_yield_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_yield_np');
  late final _pthread_yield_np =
      _pthread_yield_npPtr.asFunction<void Function()>();

  void pthread_jit_write_protect_np(
    int enabled,
  ) {
    return _pthread_jit_write_protect_np(
      enabled,
    );
  }

  late final _pthread_jit_write_protect_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'pthread_jit_write_protect_np');
  late final _pthread_jit_write_protect_np =
      _pthread_jit_write_protect_npPtr.asFunction<void Function(int)>();

  int pthread_jit_write_protect_supported_np() {
    return _pthread_jit_write_protect_supported_np();
  }

  late final _pthread_jit_write_protect_supported_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'pthread_jit_write_protect_supported_np');
  late final _pthread_jit_write_protect_supported_np =
      _pthread_jit_write_protect_supported_npPtr.asFunction<int Function()>();

  /// !
  /// @function pthread_jit_write_with_callback_np
  ///
  /// @abstract
  /// Toggles per-thread write-protection of the MAP_JIT region to writeable,
  /// invokes an allowed callback function to write to it, and toggles protection
  /// back to executable.
  ///
  /// @param callback
  /// The callback function to invoke to write to the MAP_JIT region.  It must be
  /// statically allowed using {@link PTHREAD_JIT_WRITE_ALLOW_CALLBACKS_NP}.
  ///
  /// @param ctx
  /// Context to pass through to the invocation of the callback function.
  ///
  /// @result
  /// The result code returned by the callback function.
  ///
  /// @discussion
  /// This function assumes that the MAP_JIT region has executable protection when
  /// called.  It is therefore invalid to call it recursively from within a write
  /// callback.  The implementation does not detect such invalid recursive calls,
  /// so the client is responsible for preventing them.
  ///
  /// Callbacks _must not_ perform any non-local transfer of control flow (e.g.
  /// throw an exception, longjmp(3)), as doing so would leave the MAP_JIT region
  /// writeable.
  ///
  /// On systems where pthread_jit_write_protect_supported_np(3) is false, this
  /// function calls @callback directly and does nothing else.
  ///
  /// This function only enforces that @callback is allowed if the caller has the
  /// com.apple.security.cs.jit-write-allowlist entitlement.  That entitlement also
  /// disallows use of pthread_jit_write_protect_np(3).  Adopting the entitlement
  /// is therefore crucial in realizing the security benefits of this interface.
  ///
  /// If the entitlement is not present then this function toggles protection of
  /// the MAP_JIT to writeable, calls @callback and then toggles protection back to
  /// executable, without validating that @callback is an allowed function.  This
  /// behavior is intended to permit independent adoption of this interface by
  /// libraries - once all libraries in an application have adopted, the
  /// application should add the entitlement.
  ///
  /// By default, only callbacks in libraries/images present at process start-up
  /// are allowed - callbacks in images loaded dynamically via dlopen(3)/etc. are
  /// not permitted.  However, if the additional entitlement
  /// com.apple.security.cs.jit-write-allowlist-freeze-late is _also_ present, any
  /// callbacks in dlopen'd libraries are also added to the set of allowed
  /// callbacks until the {@link pthread_jit_write_freeze_callbacks_np} function is
  /// called.
  ///
  /// The goal of this interface is to allow applications that execute JIT-compiled
  /// code to mitigate against attempts from attackers to escalate to code
  /// execution by getting their own instructions written to the MAP_JIT region.
  ///
  /// Callbacks should assume an attacker can control the input to this function.
  /// They must therefore carefully validate the data that they are passed and do
  /// so using as little attackable state as possible. This means simplifying
  /// control flow and avoiding spills of sensitive registers (e.g. those used for
  /// validation or control flow).
  ///
  /// In the event a callback detects that its input is invalid, it should either
  /// abort in the simplest fashion possible (preferring e.g. __builtin_trap() over
  /// abort(3), the latter being encumbered by various conformance requirements) or
  /// return a result indicating failure.
  int pthread_jit_write_with_callback_np(
    pthread_jit_write_callback_t callback,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _pthread_jit_write_with_callback_np(
      callback,
      ctx,
    );
  }

  late final _pthread_jit_write_with_callback_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_jit_write_callback_t,
              ffi.Pointer<ffi.Void>)>>('pthread_jit_write_with_callback_np');
  late final _pthread_jit_write_with_callback_np =
      _pthread_jit_write_with_callback_npPtr.asFunction<
          int Function(pthread_jit_write_callback_t, ffi.Pointer<ffi.Void>)>();

  /// !
  /// @function pthread_jit_write_freeze_callbacks_np
  ///
  /// @abstract
  /// Freezes the set of allowed pthread JIT write callbacks, preventing any
  /// callbacks in subsequently dlopen'd libraries from being allowed as arguments
  /// to {@link pthread_jit_write_with_callback_np}
  ///
  /// @discussion
  /// If the com.apple.security.cs.jit-write-allowlist-freeze-late entitlement is
  /// present, this function must be called exactly once after all libraries
  /// containing JIT write callbacks have been loaded to prevent any further
  /// runtime modifications to the set of allowed callbacks.  Failing to call this
  /// function before calling pthread_jit_write_with_callback_np(3) for the first
  /// time is an error, as is calling it multiple times.
  ///
  /// If the jit-write-allowlist-freeze-late entitlement is not present, calling
  /// this function is an error.
  ///
  /// If an application does not need to dlopen(3) any libraries or frameworks
  /// containing needed JIT write callbacks, it is best to avoid the
  /// jit-write-allowlist-freeze-late entitlement and accompanying need to call
  /// this function, as this allows the runtime to automatically freeze the set of
  /// allowed callbacks early in process initialization.
  void pthread_jit_write_freeze_callbacks_np() {
    return _pthread_jit_write_freeze_callbacks_np();
  }

  late final _pthread_jit_write_freeze_callbacks_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'pthread_jit_write_freeze_callbacks_np');
  late final _pthread_jit_write_freeze_callbacks_np =
      _pthread_jit_write_freeze_callbacks_npPtr.asFunction<void Function()>();

  /// !
  /// @function pthread_cpu_number_np
  ///
  /// @param cpu_number_out
  /// The CPU number that the thread was running on at the time of query.
  /// This cpu number is in the interval [0, ncpus) (from sysctlbyname("hw.ncpu"))
  ///
  /// @result
  /// This function returns 0 or the value of errno if an error occurred.
  ///
  /// @note
  /// Optimizations of per-CPU datastructures based on the result of this function
  /// still require synchronization since it is not guaranteed that the thread will
  /// still be on the same CPU by the time the function returns.
  int pthread_cpu_number_np(
    ffi.Pointer<ffi.Size> cpu_number_out,
  ) {
    return _pthread_cpu_number_np(
      cpu_number_out,
    );
  }

  late final _pthread_cpu_number_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Size>)>>(
          'pthread_cpu_number_np');
  late final _pthread_cpu_number_np = _pthread_cpu_number_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Size>)>();

  int open(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int openat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('openat');
  late final _openat =
      _openatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int creat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fcntl(
    int arg0,
    int arg1,
  ) {
    return _fcntl(
      arg0,
      arg1,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int openx_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    filesec_t arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, filesec_t)>>('openx_np');
  late final _openx_np = _openx_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, filesec_t)>();

  int open_dprotected_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('open_dprotected_np');
  late final _open_dprotected_np = _open_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int flock1(
    int arg0,
    int arg1,
  ) {
    return _flock1(
      arg0,
      arg1,
    );
  }

  late final _flock1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('flock');
  late final _flock1 = _flock1Ptr.asFunction<int Function(int, int)>();

  filesec_t filesec_init() {
    return _filesec_init();
  }

  late final _filesec_initPtr =
      _lookup<ffi.NativeFunction<filesec_t Function()>>('filesec_init');
  late final _filesec_init =
      _filesec_initPtr.asFunction<filesec_t Function()>();

  filesec_t filesec_dup(
    filesec_t arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dupPtr =
      _lookup<ffi.NativeFunction<filesec_t Function(filesec_t)>>('filesec_dup');
  late final _filesec_dup =
      _filesec_dupPtr.asFunction<filesec_t Function(filesec_t)>();

  void filesec_free(
    filesec_t arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(filesec_t)>>('filesec_free');
  late final _filesec_free =
      _filesec_freePtr.asFunction<void Function(filesec_t)>();

  int filesec_get_property(
    filesec_t arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('filesec_get_property');
  late final _filesec_get_property = _filesec_get_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_query_property(
    filesec_t arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_query_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.Int32,
              ffi.Pointer<ffi.Int>)>>('filesec_query_property');
  late final _filesec_query_property = _filesec_query_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Int>)>();

  int filesec_set_property(
    filesec_t arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('filesec_set_property');
  late final _filesec_set_property = _filesec_set_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_unset_property(
    filesec_t arg0,
    int arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1,
    );
  }

  late final _filesec_unset_propertyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(filesec_t, ffi.Int32)>>(
          'filesec_unset_property');
  late final _filesec_unset_property =
      _filesec_unset_propertyPtr.asFunction<int Function(filesec_t, int)>();

  int sem_close(
    ffi.Pointer<sem_t> arg0,
  ) {
    return _sem_close(
      arg0,
    );
  }

  late final _sem_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sem_t>)>>(
          'sem_close');
  late final _sem_close =
      _sem_closePtr.asFunction<int Function(ffi.Pointer<sem_t>)>();

  int sem_destroy(
    ffi.Pointer<sem_t> arg0,
  ) {
    return _sem_destroy(
      arg0,
    );
  }

  late final _sem_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sem_t>)>>(
          'sem_destroy');
  late final _sem_destroy =
      _sem_destroyPtr.asFunction<int Function(ffi.Pointer<sem_t>)>();

  int sem_getvalue(
    ffi.Pointer<sem_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _sem_getvalue(
      arg0,
      arg1,
    );
  }

  late final _sem_getvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sem_t>, ffi.Pointer<ffi.Int>)>>('sem_getvalue');
  late final _sem_getvalue = _sem_getvaluePtr
      .asFunction<int Function(ffi.Pointer<sem_t>, ffi.Pointer<ffi.Int>)>();

  int sem_init(
    ffi.Pointer<sem_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _sem_init(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sem_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sem_t>, ffi.Int, ffi.UnsignedInt)>>('sem_init');
  late final _sem_init =
      _sem_initPtr.asFunction<int Function(ffi.Pointer<sem_t>, int, int)>();

  ffi.Pointer<sem_t> sem_open(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sem_open(
      arg0,
      arg1,
    );
  }

  late final _sem_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sem_t> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('sem_open');
  late final _sem_open = _sem_openPtr
      .asFunction<ffi.Pointer<sem_t> Function(ffi.Pointer<ffi.Char>, int)>();

  int sem_post(
    ffi.Pointer<sem_t> arg0,
  ) {
    return _sem_post(
      arg0,
    );
  }

  late final _sem_postPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sem_t>)>>(
          'sem_post');
  late final _sem_post =
      _sem_postPtr.asFunction<int Function(ffi.Pointer<sem_t>)>();

  int sem_trywait(
    ffi.Pointer<sem_t> arg0,
  ) {
    return _sem_trywait(
      arg0,
    );
  }

  late final _sem_trywaitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sem_t>)>>(
          'sem_trywait');
  late final _sem_trywait =
      _sem_trywaitPtr.asFunction<int Function(ffi.Pointer<sem_t>)>();

  int sem_unlink(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _sem_unlink(
      arg0,
    );
  }

  late final _sem_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'sem_unlink');
  late final _sem_unlink =
      _sem_unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sem_wait(
    ffi.Pointer<sem_t> arg0,
  ) {
    return _sem_wait(
      arg0,
    );
  }

  late final _sem_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sem_t>)>>(
          'sem_wait');
  late final _sem_wait =
      _sem_waitPtr.asFunction<int Function(ffi.Pointer<sem_t>)>();

  int nvrtc_make_options_array_from_string(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Pointer<ffi.Char>> options,
  ) {
    return _nvrtc_make_options_array_from_string(
      string,
      options,
    );
  }

  late final _nvrtc_make_options_array_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'nvrtc_make_options_array_from_string');
  late final _nvrtc_make_options_array_from_string =
      _nvrtc_make_options_array_from_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nvrtc_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _nvrtc_init(
      hashcat_ctx,
    );
  }

  late final _nvrtc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'nvrtc_init');
  late final _nvrtc_init =
      _nvrtc_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void nvrtc_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _nvrtc_close(
      hashcat_ctx,
    );
  }

  late final _nvrtc_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nvrtc_close');
  late final _nvrtc_close =
      _nvrtc_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hc_nvrtcCreateProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<nvrtcProgram> prog,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> name,
    int numHeaders,
    ffi.Pointer<ffi.Pointer<ffi.Char>> headers,
    ffi.Pointer<ffi.Pointer<ffi.Char>> includeNames,
  ) {
    return _hc_nvrtcCreateProgram(
      hashcat_ctx,
      prog,
      src,
      name,
      numHeaders,
      headers,
      includeNames,
    );
  }

  late final _hc_nvrtcCreateProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<nvrtcProgram>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hc_nvrtcCreateProgram');
  late final _hc_nvrtcCreateProgram = _hc_nvrtcCreateProgramPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<nvrtcProgram>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int hc_nvrtcDestroyProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<nvrtcProgram> prog,
  ) {
    return _hc_nvrtcDestroyProgram(
      hashcat_ctx,
      prog,
    );
  }

  late final _hc_nvrtcDestroyProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<nvrtcProgram>)>>('hc_nvrtcDestroyProgram');
  late final _hc_nvrtcDestroyProgram = _hc_nvrtcDestroyProgramPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<nvrtcProgram>)>();

  int hc_nvrtcCompileProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvrtcProgram prog,
    int numOptions,
    ffi.Pointer<ffi.Pointer<ffi.Char>> options,
  ) {
    return _hc_nvrtcCompileProgram(
      hashcat_ctx,
      prog,
      numOptions,
      options,
    );
  }

  late final _hc_nvrtcCompileProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvrtcProgram, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hc_nvrtcCompileProgram');
  late final _hc_nvrtcCompileProgram = _hc_nvrtcCompileProgramPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, nvrtcProgram, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int hc_nvrtcGetProgramLogSize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvrtcProgram prog,
    ffi.Pointer<ffi.Size> logSizeRet,
  ) {
    return _hc_nvrtcGetProgramLogSize(
      hashcat_ctx,
      prog,
      logSizeRet,
    );
  }

  late final _hc_nvrtcGetProgramLogSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvrtcProgram,
              ffi.Pointer<ffi.Size>)>>('hc_nvrtcGetProgramLogSize');
  late final _hc_nvrtcGetProgramLogSize =
      _hc_nvrtcGetProgramLogSizePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, nvrtcProgram, ffi.Pointer<ffi.Size>)>();

  int hc_nvrtcGetProgramLog(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvrtcProgram prog,
    ffi.Pointer<ffi.Char> log,
  ) {
    return _hc_nvrtcGetProgramLog(
      hashcat_ctx,
      prog,
      log,
    );
  }

  late final _hc_nvrtcGetProgramLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvrtcProgram,
              ffi.Pointer<ffi.Char>)>>('hc_nvrtcGetProgramLog');
  late final _hc_nvrtcGetProgramLog = _hc_nvrtcGetProgramLogPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, nvrtcProgram, ffi.Pointer<ffi.Char>)>();

  int hc_nvrtcGetPTXSize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvrtcProgram prog,
    ffi.Pointer<ffi.Size> ptxSizeRet,
  ) {
    return _hc_nvrtcGetPTXSize(
      hashcat_ctx,
      prog,
      ptxSizeRet,
    );
  }

  late final _hc_nvrtcGetPTXSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvrtcProgram,
              ffi.Pointer<ffi.Size>)>>('hc_nvrtcGetPTXSize');
  late final _hc_nvrtcGetPTXSize = _hc_nvrtcGetPTXSizePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, nvrtcProgram, ffi.Pointer<ffi.Size>)>();

  int hc_nvrtcGetPTX(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvrtcProgram prog,
    ffi.Pointer<ffi.Char> ptx,
  ) {
    return _hc_nvrtcGetPTX(
      hashcat_ctx,
      prog,
      ptx,
    );
  }

  late final _hc_nvrtcGetPTXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvrtcProgram,
              ffi.Pointer<ffi.Char>)>>('hc_nvrtcGetPTX');
  late final _hc_nvrtcGetPTX = _hc_nvrtcGetPTXPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, nvrtcProgram, ffi.Pointer<ffi.Char>)>();

  int hc_nvrtcVersion(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> major,
    ffi.Pointer<ffi.Int> minor,
  ) {
    return _hc_nvrtcVersion(
      hashcat_ctx,
      major,
      minor,
    );
  }

  late final _hc_nvrtcVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('hc_nvrtcVersion');
  late final _hc_nvrtcVersion = _hc_nvrtcVersionPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int hiprtc_make_options_array_from_string(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Pointer<ffi.Char>> options,
  ) {
    return _hiprtc_make_options_array_from_string(
      string,
      options,
    );
  }

  late final _hiprtc_make_options_array_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'hiprtc_make_options_array_from_string');
  late final _hiprtc_make_options_array_from_string =
      _hiprtc_make_options_array_from_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int hiprtc_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hiprtc_init(
      hashcat_ctx,
    );
  }

  late final _hiprtc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hiprtc_init');
  late final _hiprtc_init =
      _hiprtc_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void hiprtc_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hiprtc_close(
      hashcat_ctx,
    );
  }

  late final _hiprtc_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'hiprtc_close');
  late final _hiprtc_close =
      _hiprtc_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hc_hiprtcCreateProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hiprtcProgram> prog,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> name,
    int numHeaders,
    ffi.Pointer<ffi.Pointer<ffi.Char>> headers,
    ffi.Pointer<ffi.Pointer<ffi.Char>> includeNames,
  ) {
    return _hc_hiprtcCreateProgram(
      hashcat_ctx,
      prog,
      src,
      name,
      numHeaders,
      headers,
      includeNames,
    );
  }

  late final _hc_hiprtcCreateProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hiprtcProgram>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hc_hiprtcCreateProgram');
  late final _hc_hiprtcCreateProgram = _hc_hiprtcCreateProgramPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<hiprtcProgram>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int hc_hiprtcDestroyProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hiprtcProgram> prog,
  ) {
    return _hc_hiprtcDestroyProgram(
      hashcat_ctx,
      prog,
    );
  }

  late final _hc_hiprtcDestroyProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<hiprtcProgram>)>>('hc_hiprtcDestroyProgram');
  late final _hc_hiprtcDestroyProgram = _hc_hiprtcDestroyProgramPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hiprtcProgram>)>();

  int hc_hiprtcCompileProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hiprtcProgram prog,
    int numOptions,
    ffi.Pointer<ffi.Pointer<ffi.Char>> options,
  ) {
    return _hc_hiprtcCompileProgram(
      hashcat_ctx,
      prog,
      numOptions,
      options,
    );
  }

  late final _hc_hiprtcCompileProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hiprtcProgram, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hc_hiprtcCompileProgram');
  late final _hc_hiprtcCompileProgram = _hc_hiprtcCompileProgramPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, hiprtcProgram, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int hc_hiprtcGetProgramLogSize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hiprtcProgram prog,
    ffi.Pointer<ffi.Size> logSizeRet,
  ) {
    return _hc_hiprtcGetProgramLogSize(
      hashcat_ctx,
      prog,
      logSizeRet,
    );
  }

  late final _hc_hiprtcGetProgramLogSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hiprtcProgram,
              ffi.Pointer<ffi.Size>)>>('hc_hiprtcGetProgramLogSize');
  late final _hc_hiprtcGetProgramLogSize =
      _hc_hiprtcGetProgramLogSizePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, hiprtcProgram, ffi.Pointer<ffi.Size>)>();

  int hc_hiprtcGetProgramLog(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hiprtcProgram prog,
    ffi.Pointer<ffi.Char> log,
  ) {
    return _hc_hiprtcGetProgramLog(
      hashcat_ctx,
      prog,
      log,
    );
  }

  late final _hc_hiprtcGetProgramLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hiprtcProgram,
              ffi.Pointer<ffi.Char>)>>('hc_hiprtcGetProgramLog');
  late final _hc_hiprtcGetProgramLog = _hc_hiprtcGetProgramLogPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, hiprtcProgram, ffi.Pointer<ffi.Char>)>();

  int hc_hiprtcGetCodeSize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hiprtcProgram prog,
    ffi.Pointer<ffi.Size> codeSizeRet,
  ) {
    return _hc_hiprtcGetCodeSize(
      hashcat_ctx,
      prog,
      codeSizeRet,
    );
  }

  late final _hc_hiprtcGetCodeSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hiprtcProgram,
              ffi.Pointer<ffi.Size>)>>('hc_hiprtcGetCodeSize');
  late final _hc_hiprtcGetCodeSize = _hc_hiprtcGetCodeSizePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, hiprtcProgram, ffi.Pointer<ffi.Size>)>();

  int hc_hiprtcGetCode(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hiprtcProgram prog,
    ffi.Pointer<ffi.Char> code,
  ) {
    return _hc_hiprtcGetCode(
      hashcat_ctx,
      prog,
      code,
    );
  }

  late final _hc_hiprtcGetCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hiprtcProgram,
              ffi.Pointer<ffi.Char>)>>('hc_hiprtcGetCode');
  late final _hc_hiprtcGetCode = _hc_hiprtcGetCodePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, hiprtcProgram, ffi.Pointer<ffi.Char>)>();

  int cuda_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _cuda_init(
      hashcat_ctx,
    );
  }

  late final _cuda_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'cuda_init');
  late final _cuda_init =
      _cuda_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void cuda_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _cuda_close(
      hashcat_ctx,
    );
  }

  late final _cuda_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'cuda_close');
  late final _cuda_close =
      _cuda_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hc_cuCtxCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUcontext> pctx,
    int flags,
    int dev,
  ) {
    return _hc_cuCtxCreate(
      hashcat_ctx,
      pctx,
      flags,
      dev,
    );
  }

  late final _hc_cuCtxCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUcontext>,
              ffi.UnsignedInt, CUdevice)>>('hc_cuCtxCreate');
  late final _hc_cuCtxCreate = _hc_cuCtxCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUcontext>, int, int)>();

  int hc_cuCtxDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUcontext ctx,
  ) {
    return _hc_cuCtxDestroy(
      hashcat_ctx,
      ctx,
    );
  }

  late final _hc_cuCtxDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUcontext)>>('hc_cuCtxDestroy');
  late final _hc_cuCtxDestroy = _hc_cuCtxDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUcontext)>();

  int hc_cuCtxSetCurrent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUcontext ctx,
  ) {
    return _hc_cuCtxSetCurrent(
      hashcat_ctx,
      ctx,
    );
  }

  late final _hc_cuCtxSetCurrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUcontext)>>('hc_cuCtxSetCurrent');
  late final _hc_cuCtxSetCurrent = _hc_cuCtxSetCurrentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUcontext)>();

  int hc_cuCtxSetCacheConfig(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int config,
  ) {
    return _hc_cuCtxSetCacheConfig(
      hashcat_ctx,
      config,
    );
  }

  late final _hc_cuCtxSetCacheConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('hc_cuCtxSetCacheConfig');
  late final _hc_cuCtxSetCacheConfig = _hc_cuCtxSetCacheConfigPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int hc_cuCtxSynchronize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hc_cuCtxSynchronize(
      hashcat_ctx,
    );
  }

  late final _hc_cuCtxSynchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hc_cuCtxSynchronize');
  late final _hc_cuCtxSynchronize =
      _hc_cuCtxSynchronizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hc_cuDeviceGetAttribute(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> pi,
    int attrib,
    int dev,
  ) {
    return _hc_cuDeviceGetAttribute(
      hashcat_ctx,
      pi,
      attrib,
      dev,
    );
  }

  late final _hc_cuDeviceGetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Int32, CUdevice)>>('hc_cuDeviceGetAttribute');
  late final _hc_cuDeviceGetAttribute = _hc_cuDeviceGetAttributePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, int, int)>();

  int hc_cuDeviceGetCount(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _hc_cuDeviceGetCount(
      hashcat_ctx,
      count,
    );
  }

  late final _hc_cuDeviceGetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hc_cuDeviceGetCount');
  late final _hc_cuDeviceGetCount = _hc_cuDeviceGetCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hc_cuDeviceGet(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUdevice> device,
    int ordinal,
  ) {
    return _hc_cuDeviceGet(
      hashcat_ctx,
      device,
      ordinal,
    );
  }

  late final _hc_cuDeviceGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUdevice>,
              ffi.Int)>>('hc_cuDeviceGet');
  late final _hc_cuDeviceGet = _hc_cuDeviceGetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUdevice>, int)>();

  int hc_cuDeviceGetName(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Char> name,
    int len,
    int dev,
  ) {
    return _hc_cuDeviceGetName(
      hashcat_ctx,
      name,
      len,
      dev,
    );
  }

  late final _hc_cuDeviceGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int, CUdevice)>>('hc_cuDeviceGetName');
  late final _hc_cuDeviceGetName = _hc_cuDeviceGetNamePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int, int)>();

  int hc_cuDeviceTotalMem(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> bytes,
    int dev,
  ) {
    return _hc_cuDeviceTotalMem(
      hashcat_ctx,
      bytes,
      dev,
    );
  }

  late final _hc_cuDeviceTotalMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              CUdevice)>>('hc_cuDeviceTotalMem');
  late final _hc_cuDeviceTotalMem = _hc_cuDeviceTotalMemPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>, int)>();

  int hc_cuDriverGetVersion(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> driverVersion,
  ) {
    return _hc_cuDriverGetVersion(
      hashcat_ctx,
      driverVersion,
    );
  }

  late final _hc_cuDriverGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hc_cuDriverGetVersion');
  late final _hc_cuDriverGetVersion = _hc_cuDriverGetVersionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hc_cuEventCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUevent> phEvent,
    int Flags,
  ) {
    return _hc_cuEventCreate(
      hashcat_ctx,
      phEvent,
      Flags,
    );
  }

  late final _hc_cuEventCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUevent>,
              ffi.UnsignedInt)>>('hc_cuEventCreate');
  late final _hc_cuEventCreate = _hc_cuEventCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUevent>, int)>();

  int hc_cuEventDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUevent hEvent,
  ) {
    return _hc_cuEventDestroy(
      hashcat_ctx,
      hEvent,
    );
  }

  late final _hc_cuEventDestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, CUevent)>>(
      'hc_cuEventDestroy');
  late final _hc_cuEventDestroy = _hc_cuEventDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUevent)>();

  int hc_cuEventElapsedTime(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Float> pMilliseconds,
    CUevent hStart,
    CUevent hEnd,
  ) {
    return _hc_cuEventElapsedTime(
      hashcat_ctx,
      pMilliseconds,
      hStart,
      hEnd,
    );
  }

  late final _hc_cuEventElapsedTimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>,
              CUevent, CUevent)>>('hc_cuEventElapsedTime');
  late final _hc_cuEventElapsedTime = _hc_cuEventElapsedTimePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>, CUevent, CUevent)>();

  int hc_cuEventQuery(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUevent hEvent,
  ) {
    return _hc_cuEventQuery(
      hashcat_ctx,
      hEvent,
    );
  }

  late final _hc_cuEventQueryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, CUevent)>>(
      'hc_cuEventQuery');
  late final _hc_cuEventQuery = _hc_cuEventQueryPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUevent)>();

  int hc_cuEventRecord(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUevent hEvent,
    CUstream hStream,
  ) {
    return _hc_cuEventRecord(
      hashcat_ctx,
      hEvent,
      hStream,
    );
  }

  late final _hc_cuEventRecordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUevent, CUstream)>>('hc_cuEventRecord');
  late final _hc_cuEventRecord = _hc_cuEventRecordPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUevent, CUstream)>();

  int hc_cuEventSynchronize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUevent hEvent,
  ) {
    return _hc_cuEventSynchronize(
      hashcat_ctx,
      hEvent,
    );
  }

  late final _hc_cuEventSynchronizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, CUevent)>>(
      'hc_cuEventSynchronize');
  late final _hc_cuEventSynchronize = _hc_cuEventSynchronizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUevent)>();

  int hc_cuFuncGetAttribute(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> pi,
    int attrib,
    CUfunction hfunc,
  ) {
    return _hc_cuFuncGetAttribute(
      hashcat_ctx,
      pi,
      attrib,
      hfunc,
    );
  }

  late final _hc_cuFuncGetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Int32, CUfunction)>>('hc_cuFuncGetAttribute');
  late final _hc_cuFuncGetAttribute = _hc_cuFuncGetAttributePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, int, CUfunction)>();

  int hc_cuFuncSetAttribute(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUfunction hfunc,
    int attrib,
    int value,
  ) {
    return _hc_cuFuncSetAttribute(
      hashcat_ctx,
      hfunc,
      attrib,
      value,
    );
  }

  late final _hc_cuFuncSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, CUfunction, ffi.Int32,
              ffi.Int)>>('hc_cuFuncSetAttribute');
  late final _hc_cuFuncSetAttribute = _hc_cuFuncSetAttributePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUfunction, int, int)>();

  int hc_cuInit(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int Flags,
  ) {
    return _hc_cuInit(
      hashcat_ctx,
      Flags,
    );
  }

  late final _hc_cuInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('hc_cuInit');
  late final _hc_cuInit =
      _hc_cuInitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int hc_cuLaunchKernel(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUfunction f,
    int gridDimX,
    int gridDimY,
    int gridDimZ,
    int blockDimX,
    int blockDimY,
    int blockDimZ,
    int sharedMemBytes,
    CUstream hStream,
    ffi.Pointer<ffi.Pointer<ffi.Void>> kernelParams,
    ffi.Pointer<ffi.Pointer<ffi.Void>> extra,
  ) {
    return _hc_cuLaunchKernel(
      hashcat_ctx,
      f,
      gridDimX,
      gridDimY,
      gridDimZ,
      blockDimX,
      blockDimY,
      blockDimZ,
      sharedMemBytes,
      hStream,
      kernelParams,
      extra,
    );
  }

  late final _hc_cuLaunchKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              CUfunction,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              CUstream,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('hc_cuLaunchKernel');
  late final _hc_cuLaunchKernel = _hc_cuLaunchKernelPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          CUfunction,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          CUstream,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int hc_cuMemAlloc(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUdeviceptr> dptr,
    int bytesize,
  ) {
    return _hc_cuMemAlloc(
      hashcat_ctx,
      dptr,
      bytesize,
    );
  }

  late final _hc_cuMemAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUdeviceptr>,
              ffi.Size)>>('hc_cuMemAlloc');
  late final _hc_cuMemAlloc = _hc_cuMemAllocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUdeviceptr>, int)>();

  int hc_cuMemcpyDtoDAsync(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int dstDevice,
    int srcDevice,
    int ByteCount,
    CUstream hStream,
  ) {
    return _hc_cuMemcpyDtoDAsync(
      hashcat_ctx,
      dstDevice,
      srcDevice,
      ByteCount,
      hStream,
    );
  }

  late final _hc_cuMemcpyDtoDAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, CUdeviceptr, CUdeviceptr,
              ffi.Size, CUstream)>>('hc_cuMemcpyDtoDAsync');
  late final _hc_cuMemcpyDtoDAsync = _hc_cuMemcpyDtoDAsyncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, CUstream)>();

  int hc_cuMemcpyDtoHAsync(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Void> dstHost,
    int srcDevice,
    int ByteCount,
    CUstream hStream,
  ) {
    return _hc_cuMemcpyDtoHAsync(
      hashcat_ctx,
      dstHost,
      srcDevice,
      ByteCount,
      hStream,
    );
  }

  late final _hc_cuMemcpyDtoHAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              CUdeviceptr, ffi.Size, CUstream)>>('hc_cuMemcpyDtoHAsync');
  late final _hc_cuMemcpyDtoHAsync = _hc_cuMemcpyDtoHAsyncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, CUstream)>();

  int hc_cuMemcpyHtoDAsync(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int dstDevice,
    ffi.Pointer<ffi.Void> srcHost,
    int ByteCount,
    CUstream hStream,
  ) {
    return _hc_cuMemcpyHtoDAsync(
      hashcat_ctx,
      dstDevice,
      srcHost,
      ByteCount,
      hStream,
    );
  }

  late final _hc_cuMemcpyHtoDAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              CUdeviceptr,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              CUstream)>>('hc_cuMemcpyHtoDAsync');
  late final _hc_cuMemcpyHtoDAsync = _hc_cuMemcpyHtoDAsyncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, CUstream)>();

  int hc_cuMemFree(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int dptr,
  ) {
    return _hc_cuMemFree(
      hashcat_ctx,
      dptr,
    );
  }

  late final _hc_cuMemFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUdeviceptr)>>('hc_cuMemFree');
  late final _hc_cuMemFree =
      _hc_cuMemFreePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int hc_cuMemGetInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> free,
    ffi.Pointer<ffi.Size> total,
  ) {
    return _hc_cuMemGetInfo(
      hashcat_ctx,
      free,
      total,
    );
  }

  late final _hc_cuMemGetInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('hc_cuMemGetInfo');
  late final _hc_cuMemGetInfo = _hc_cuMemGetInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  int hc_cuMemsetD32Async(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int dstDevice,
    int ui,
    int N,
    CUstream hStream,
  ) {
    return _hc_cuMemsetD32Async(
      hashcat_ctx,
      dstDevice,
      ui,
      N,
      hStream,
    );
  }

  late final _hc_cuMemsetD32AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, CUdeviceptr, ffi.UnsignedInt,
              ffi.Size, CUstream)>>('hc_cuMemsetD32Async');
  late final _hc_cuMemsetD32Async = _hc_cuMemsetD32AsyncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, CUstream)>();

  int hc_cuMemsetD8Async(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int dstDevice,
    int uc,
    int N,
    CUstream hStream,
  ) {
    return _hc_cuMemsetD8Async(
      hashcat_ctx,
      dstDevice,
      uc,
      N,
      hStream,
    );
  }

  late final _hc_cuMemsetD8AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, CUdeviceptr, ffi.UnsignedChar,
              ffi.Size, CUstream)>>('hc_cuMemsetD8Async');
  late final _hc_cuMemsetD8Async = _hc_cuMemsetD8AsyncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, CUstream)>();

  int hc_cuModuleGetFunction(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUfunction> hfunc,
    CUmodule hmod,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _hc_cuModuleGetFunction(
      hashcat_ctx,
      hfunc,
      hmod,
      name,
    );
  }

  late final _hc_cuModuleGetFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUfunction>,
              CUmodule, ffi.Pointer<ffi.Char>)>>('hc_cuModuleGetFunction');
  late final _hc_cuModuleGetFunction = _hc_cuModuleGetFunctionPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUfunction>, CUmodule,
          ffi.Pointer<ffi.Char>)>();

  int hc_cuModuleGetGlobal(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUdeviceptr> dptr,
    ffi.Pointer<ffi.Size> bytes,
    CUmodule hmod,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _hc_cuModuleGetGlobal(
      hashcat_ctx,
      dptr,
      bytes,
      hmod,
      name,
    );
  }

  late final _hc_cuModuleGetGlobalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<CUdeviceptr>,
              ffi.Pointer<ffi.Size>,
              CUmodule,
              ffi.Pointer<ffi.Char>)>>('hc_cuModuleGetGlobal');
  late final _hc_cuModuleGetGlobal = _hc_cuModuleGetGlobalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUdeviceptr>,
          ffi.Pointer<ffi.Size>, CUmodule, ffi.Pointer<ffi.Char>)>();

  int hc_cuModuleLoadDataEx(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUmodule> module,
    ffi.Pointer<ffi.Void> image,
    int numOptions,
    ffi.Pointer<ffi.Int32> options,
    ffi.Pointer<ffi.Pointer<ffi.Void>> optionValues,
  ) {
    return _hc_cuModuleLoadDataEx(
      hashcat_ctx,
      module,
      image,
      numOptions,
      options,
      optionValues,
    );
  }

  late final _hc_cuModuleLoadDataExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<CUmodule>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('hc_cuModuleLoadDataEx');
  late final _hc_cuModuleLoadDataEx = _hc_cuModuleLoadDataExPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<CUmodule>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int hc_cuModuleUnload(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUmodule hmod,
  ) {
    return _hc_cuModuleUnload(
      hashcat_ctx,
      hmod,
    );
  }

  late final _hc_cuModuleUnloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUmodule)>>('hc_cuModuleUnload');
  late final _hc_cuModuleUnload = _hc_cuModuleUnloadPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUmodule)>();

  int hc_cuStreamCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUstream> phStream,
    int Flags,
  ) {
    return _hc_cuStreamCreate(
      hashcat_ctx,
      phStream,
      Flags,
    );
  }

  late final _hc_cuStreamCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUstream>,
              ffi.UnsignedInt)>>('hc_cuStreamCreate');
  late final _hc_cuStreamCreate = _hc_cuStreamCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUstream>, int)>();

  int hc_cuStreamDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUstream hStream,
  ) {
    return _hc_cuStreamDestroy(
      hashcat_ctx,
      hStream,
    );
  }

  late final _hc_cuStreamDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUstream)>>('hc_cuStreamDestroy');
  late final _hc_cuStreamDestroy = _hc_cuStreamDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUstream)>();

  int hc_cuStreamSynchronize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUstream hStream,
  ) {
    return _hc_cuStreamSynchronize(
      hashcat_ctx,
      hStream,
    );
  }

  late final _hc_cuStreamSynchronizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUstream)>>('hc_cuStreamSynchronize');
  late final _hc_cuStreamSynchronize = _hc_cuStreamSynchronizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUstream)>();

  int hc_cuCtxPushCurrent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUcontext ctx,
  ) {
    return _hc_cuCtxPushCurrent(
      hashcat_ctx,
      ctx,
    );
  }

  late final _hc_cuCtxPushCurrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUcontext)>>('hc_cuCtxPushCurrent');
  late final _hc_cuCtxPushCurrent = _hc_cuCtxPushCurrentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUcontext)>();

  int hc_cuCtxPopCurrent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<CUcontext> pctx,
  ) {
    return _hc_cuCtxPopCurrent(
      hashcat_ctx,
      pctx,
    );
  }

  late final _hc_cuCtxPopCurrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<CUcontext>)>>('hc_cuCtxPopCurrent');
  late final _hc_cuCtxPopCurrent = _hc_cuCtxPopCurrentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CUcontext>)>();

  int hc_cuLinkCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int numOptions,
    ffi.Pointer<ffi.Int32> options,
    ffi.Pointer<ffi.Pointer<ffi.Void>> optionValues,
    ffi.Pointer<CUlinkState> stateOut,
  ) {
    return _hc_cuLinkCreate(
      hashcat_ctx,
      numOptions,
      options,
      optionValues,
      stateOut,
    );
  }

  late final _hc_cuLinkCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<CUlinkState>)>>('hc_cuLinkCreate');
  late final _hc_cuLinkCreate = _hc_cuLinkCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<CUlinkState>)>();

  int hc_cuLinkAddData(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUlinkState state,
    int type,
    ffi.Pointer<ffi.Void> data,
    int size,
    ffi.Pointer<ffi.Char> name,
    int numOptions,
    ffi.Pointer<ffi.Int32> options,
    ffi.Pointer<ffi.Pointer<ffi.Void>> optionValues,
  ) {
    return _hc_cuLinkAddData(
      hashcat_ctx,
      state,
      type,
      data,
      size,
      name,
      numOptions,
      options,
      optionValues,
    );
  }

  late final _hc_cuLinkAddDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              CUlinkState,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('hc_cuLinkAddData');
  late final _hc_cuLinkAddData = _hc_cuLinkAddDataPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          CUlinkState,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int hc_cuLinkDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUlinkState state,
  ) {
    return _hc_cuLinkDestroy(
      hashcat_ctx,
      state,
    );
  }

  late final _hc_cuLinkDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, CUlinkState)>>('hc_cuLinkDestroy');
  late final _hc_cuLinkDestroy = _hc_cuLinkDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, CUlinkState)>();

  int hc_cuLinkComplete(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    CUlinkState state,
    ffi.Pointer<ffi.Pointer<ffi.Void>> cubinOut,
    ffi.Pointer<ffi.Size> sizeOut,
  ) {
    return _hc_cuLinkComplete(
      hashcat_ctx,
      state,
      cubinOut,
      sizeOut,
    );
  }

  late final _hc_cuLinkCompletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              CUlinkState,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('hc_cuLinkComplete');
  late final _hc_cuLinkComplete = _hc_cuLinkCompletePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, CUlinkState,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int hip_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hip_init(
      hashcat_ctx,
    );
  }

  late final _hip_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hip_init');
  late final _hip_init =
      _hip_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void hip_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hip_close(
      hashcat_ctx,
    );
  }

  late final _hip_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'hip_close');
  late final _hip_close =
      _hip_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hc_hipCtxCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipCtx_t> pctx,
    int flags,
    int dev,
  ) {
    return _hc_hipCtxCreate(
      hashcat_ctx,
      pctx,
      flags,
      dev,
    );
  }

  late final _hc_hipCtxCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipCtx_t>,
              ffi.UnsignedInt, hipDevice_t)>>('hc_hipCtxCreate');
  late final _hc_hipCtxCreate = _hc_hipCtxCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipCtx_t>, int, int)>();

  int hc_hipCtxDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipCtx_t ctx,
  ) {
    return _hc_hipCtxDestroy(
      hashcat_ctx,
      ctx,
    );
  }

  late final _hc_hipCtxDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipCtx_t)>>('hc_hipCtxDestroy');
  late final _hc_hipCtxDestroy = _hc_hipCtxDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipCtx_t)>();

  int hc_hipCtxPopCurrent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipCtx_t> pctx,
  ) {
    return _hc_hipCtxPopCurrent(
      hashcat_ctx,
      pctx,
    );
  }

  late final _hc_hipCtxPopCurrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<hipCtx_t>)>>('hc_hipCtxPopCurrent');
  late final _hc_hipCtxPopCurrent = _hc_hipCtxPopCurrentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipCtx_t>)>();

  int hc_hipCtxPushCurrent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipCtx_t ctx,
  ) {
    return _hc_hipCtxPushCurrent(
      hashcat_ctx,
      ctx,
    );
  }

  late final _hc_hipCtxPushCurrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipCtx_t)>>('hc_hipCtxPushCurrent');
  late final _hc_hipCtxPushCurrent = _hc_hipCtxPushCurrentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipCtx_t)>();

  int hc_hipCtxSetCurrent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipCtx_t ctx,
  ) {
    return _hc_hipCtxSetCurrent(
      hashcat_ctx,
      ctx,
    );
  }

  late final _hc_hipCtxSetCurrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipCtx_t)>>('hc_hipCtxSetCurrent');
  late final _hc_hipCtxSetCurrent = _hc_hipCtxSetCurrentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipCtx_t)>();

  int hc_hipCtxSynchronize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hc_hipCtxSynchronize(
      hashcat_ctx,
    );
  }

  late final _hc_hipCtxSynchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hc_hipCtxSynchronize');
  late final _hc_hipCtxSynchronize = _hc_hipCtxSynchronizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hc_hipDeviceGet(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipDevice_t> device,
    int ordinal,
  ) {
    return _hc_hipDeviceGet(
      hashcat_ctx,
      device,
      ordinal,
    );
  }

  late final _hc_hipDeviceGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipDevice_t>,
              ffi.Int)>>('hc_hipDeviceGet');
  late final _hc_hipDeviceGet = _hc_hipDeviceGetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipDevice_t>, int)>();

  int hc_hipDeviceGetAttribute(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> pi,
    int attrib,
    int dev,
  ) {
    return _hc_hipDeviceGetAttribute(
      hashcat_ctx,
      pi,
      attrib,
      dev,
    );
  }

  late final _hc_hipDeviceGetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Int32, hipDevice_t)>>('hc_hipDeviceGetAttribute');
  late final _hc_hipDeviceGetAttribute =
      _hc_hipDeviceGetAttributePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, int, int)>();

  int hc_hipDeviceGetCount(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _hc_hipDeviceGetCount(
      hashcat_ctx,
      count,
    );
  }

  late final _hc_hipDeviceGetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hc_hipDeviceGetCount');
  late final _hc_hipDeviceGetCount = _hc_hipDeviceGetCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hc_hipDeviceGetName(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Char> name,
    int len,
    int dev,
  ) {
    return _hc_hipDeviceGetName(
      hashcat_ctx,
      name,
      len,
      dev,
    );
  }

  late final _hc_hipDeviceGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int, hipDevice_t)>>('hc_hipDeviceGetName');
  late final _hc_hipDeviceGetName = _hc_hipDeviceGetNamePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int, int)>();

  int hc_hipDeviceTotalMem(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> bytes,
    int dev,
  ) {
    return _hc_hipDeviceTotalMem(
      hashcat_ctx,
      bytes,
      dev,
    );
  }

  late final _hc_hipDeviceTotalMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              hipDevice_t)>>('hc_hipDeviceTotalMem');
  late final _hc_hipDeviceTotalMem = _hc_hipDeviceTotalMemPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>, int)>();

  int hc_hipDriverGetVersion(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> driverVersion,
  ) {
    return _hc_hipDriverGetVersion(
      hashcat_ctx,
      driverVersion,
    );
  }

  late final _hc_hipDriverGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hc_hipDriverGetVersion');
  late final _hc_hipDriverGetVersion = _hc_hipDriverGetVersionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hc_hipEventCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipEvent_t> phEvent,
    int Flags,
  ) {
    return _hc_hipEventCreate(
      hashcat_ctx,
      phEvent,
      Flags,
    );
  }

  late final _hc_hipEventCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipEvent_t>,
              ffi.UnsignedInt)>>('hc_hipEventCreate');
  late final _hc_hipEventCreate = _hc_hipEventCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipEvent_t>, int)>();

  int hc_hipEventDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipEvent_t hEvent,
  ) {
    return _hc_hipEventDestroy(
      hashcat_ctx,
      hEvent,
    );
  }

  late final _hc_hipEventDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipEvent_t)>>('hc_hipEventDestroy');
  late final _hc_hipEventDestroy = _hc_hipEventDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipEvent_t)>();

  int hc_hipEventElapsedTime(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Float> pMilliseconds,
    hipEvent_t hStart,
    hipEvent_t hEnd,
  ) {
    return _hc_hipEventElapsedTime(
      hashcat_ctx,
      pMilliseconds,
      hStart,
      hEnd,
    );
  }

  late final _hc_hipEventElapsedTimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>,
              hipEvent_t, hipEvent_t)>>('hc_hipEventElapsedTime');
  late final _hc_hipEventElapsedTime = _hc_hipEventElapsedTimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>, hipEvent_t,
          hipEvent_t)>();

  int hc_hipEventQuery(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipEvent_t hEvent,
  ) {
    return _hc_hipEventQuery(
      hashcat_ctx,
      hEvent,
    );
  }

  late final _hc_hipEventQueryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipEvent_t)>>('hc_hipEventQuery');
  late final _hc_hipEventQuery = _hc_hipEventQueryPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipEvent_t)>();

  int hc_hipEventRecord(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipEvent_t hEvent,
    hipStream_t hStream,
  ) {
    return _hc_hipEventRecord(
      hashcat_ctx,
      hEvent,
      hStream,
    );
  }

  late final _hc_hipEventRecordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hipEvent_t,
              hipStream_t)>>('hc_hipEventRecord');
  late final _hc_hipEventRecord = _hc_hipEventRecordPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, hipEvent_t, hipStream_t)>();

  int hc_hipEventSynchronize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipEvent_t hEvent,
  ) {
    return _hc_hipEventSynchronize(
      hashcat_ctx,
      hEvent,
    );
  }

  late final _hc_hipEventSynchronizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipEvent_t)>>('hc_hipEventSynchronize');
  late final _hc_hipEventSynchronize = _hc_hipEventSynchronizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipEvent_t)>();

  int hc_hipFuncGetAttribute(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> pi,
    int attrib,
    hipFunction_t hfunc,
  ) {
    return _hc_hipFuncGetAttribute(
      hashcat_ctx,
      pi,
      attrib,
      hfunc,
    );
  }

  late final _hc_hipFuncGetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Int32, hipFunction_t)>>('hc_hipFuncGetAttribute');
  late final _hc_hipFuncGetAttribute = _hc_hipFuncGetAttributePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, int, hipFunction_t)>();

  int hc_hipInit(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int Flags,
  ) {
    return _hc_hipInit(
      hashcat_ctx,
      Flags,
    );
  }

  late final _hc_hipInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('hc_hipInit');
  late final _hc_hipInit =
      _hc_hipInitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int hc_hipLaunchKernel(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipFunction_t f,
    int gridDimX,
    int gridDimY,
    int gridDimZ,
    int blockDimX,
    int blockDimY,
    int blockDimZ,
    int sharedMemBytes,
    hipStream_t hStream,
    ffi.Pointer<ffi.Pointer<ffi.Void>> kernelParams,
    ffi.Pointer<ffi.Pointer<ffi.Void>> extra,
  ) {
    return _hc_hipLaunchKernel(
      hashcat_ctx,
      f,
      gridDimX,
      gridDimY,
      gridDimZ,
      blockDimX,
      blockDimY,
      blockDimZ,
      sharedMemBytes,
      hStream,
      kernelParams,
      extra,
    );
  }

  late final _hc_hipLaunchKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              hipFunction_t,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              hipStream_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('hc_hipLaunchKernel');
  late final _hc_hipLaunchKernel = _hc_hipLaunchKernelPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          hipFunction_t,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          hipStream_t,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int hc_hipMemAlloc(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipDeviceptr_t> dptr,
    int bytesize,
  ) {
    return _hc_hipMemAlloc(
      hashcat_ctx,
      dptr,
      bytesize,
    );
  }

  late final _hc_hipMemAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipDeviceptr_t>,
              ffi.Size)>>('hc_hipMemAlloc');
  late final _hc_hipMemAlloc = _hc_hipMemAllocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipDeviceptr_t>, int)>();

  int hc_hipMemFree(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipDeviceptr_t dptr,
  ) {
    return _hc_hipMemFree(
      hashcat_ctx,
      dptr,
    );
  }

  late final _hc_hipMemFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipDeviceptr_t)>>('hc_hipMemFree');
  late final _hc_hipMemFree = _hc_hipMemFreePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipDeviceptr_t)>();

  int hc_hipMemGetInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> free,
    ffi.Pointer<ffi.Size> total,
  ) {
    return _hc_hipMemGetInfo(
      hashcat_ctx,
      free,
      total,
    );
  }

  late final _hc_hipMemGetInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('hc_hipMemGetInfo');
  late final _hc_hipMemGetInfo = _hc_hipMemGetInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  int hc_hipMemcpyDtoDAsync(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipDeviceptr_t dstDevice,
    hipDeviceptr_t srcDevice,
    int ByteCount,
    hipStream_t hStream,
  ) {
    return _hc_hipMemcpyDtoDAsync(
      hashcat_ctx,
      dstDevice,
      srcDevice,
      ByteCount,
      hStream,
    );
  }

  late final _hc_hipMemcpyDtoDAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hipDeviceptr_t,
              hipDeviceptr_t, ffi.Size, hipStream_t)>>('hc_hipMemcpyDtoDAsync');
  late final _hc_hipMemcpyDtoDAsync = _hc_hipMemcpyDtoDAsyncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, hipDeviceptr_t, hipDeviceptr_t, int,
          hipStream_t)>();

  int hc_hipMemcpyDtoHAsync(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Void> dstHost,
    hipDeviceptr_t srcDevice,
    int ByteCount,
    hipStream_t hStream,
  ) {
    return _hc_hipMemcpyDtoHAsync(
      hashcat_ctx,
      dstHost,
      srcDevice,
      ByteCount,
      hStream,
    );
  }

  late final _hc_hipMemcpyDtoHAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              hipDeviceptr_t, ffi.Size, hipStream_t)>>('hc_hipMemcpyDtoHAsync');
  late final _hc_hipMemcpyDtoHAsync = _hc_hipMemcpyDtoHAsyncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, hipDeviceptr_t,
          int, hipStream_t)>();

  int hc_hipMemcpyHtoDAsync(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipDeviceptr_t dstDevice,
    ffi.Pointer<ffi.Void> srcHost,
    int ByteCount,
    hipStream_t hStream,
  ) {
    return _hc_hipMemcpyHtoDAsync(
      hashcat_ctx,
      dstDevice,
      srcHost,
      ByteCount,
      hStream,
    );
  }

  late final _hc_hipMemcpyHtoDAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              hipDeviceptr_t,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              hipStream_t)>>('hc_hipMemcpyHtoDAsync');
  late final _hc_hipMemcpyHtoDAsync = _hc_hipMemcpyHtoDAsyncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, hipDeviceptr_t, ffi.Pointer<ffi.Void>,
          int, hipStream_t)>();

  int hc_hipMemsetD32Async(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipDeviceptr_t dstDevice,
    int ui,
    int N,
    hipStream_t hStream,
  ) {
    return _hc_hipMemsetD32Async(
      hashcat_ctx,
      dstDevice,
      ui,
      N,
      hStream,
    );
  }

  late final _hc_hipMemsetD32AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hipDeviceptr_t,
              ffi.UnsignedInt, ffi.Size, hipStream_t)>>('hc_hipMemsetD32Async');
  late final _hc_hipMemsetD32Async = _hc_hipMemsetD32AsyncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, hipDeviceptr_t, int, int, hipStream_t)>();

  int hc_hipMemsetD8Async(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipDeviceptr_t dstDevice,
    int uc,
    int N,
    hipStream_t hStream,
  ) {
    return _hc_hipMemsetD8Async(
      hashcat_ctx,
      dstDevice,
      uc,
      N,
      hStream,
    );
  }

  late final _hc_hipMemsetD8AsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, hipDeviceptr_t,
              ffi.UnsignedChar, ffi.Size, hipStream_t)>>('hc_hipMemsetD8Async');
  late final _hc_hipMemsetD8Async = _hc_hipMemsetD8AsyncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, hipDeviceptr_t, int, int, hipStream_t)>();

  int hc_hipModuleGetFunction(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipFunction_t> hfunc,
    hipModule_t hmod,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _hc_hipModuleGetFunction(
      hashcat_ctx,
      hfunc,
      hmod,
      name,
    );
  }

  late final _hc_hipModuleGetFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipFunction_t>,
              hipModule_t, ffi.Pointer<ffi.Char>)>>('hc_hipModuleGetFunction');
  late final _hc_hipModuleGetFunction = _hc_hipModuleGetFunctionPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipFunction_t>,
          hipModule_t, ffi.Pointer<ffi.Char>)>();

  int hc_hipModuleGetGlobal(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipDeviceptr_t> dptr,
    ffi.Pointer<ffi.Size> bytes,
    hipModule_t hmod,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _hc_hipModuleGetGlobal(
      hashcat_ctx,
      dptr,
      bytes,
      hmod,
      name,
    );
  }

  late final _hc_hipModuleGetGlobalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hipDeviceptr_t>,
              ffi.Pointer<ffi.Size>,
              hipModule_t,
              ffi.Pointer<ffi.Char>)>>('hc_hipModuleGetGlobal');
  late final _hc_hipModuleGetGlobal = _hc_hipModuleGetGlobalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipDeviceptr_t>,
          ffi.Pointer<ffi.Size>, hipModule_t, ffi.Pointer<ffi.Char>)>();

  int hc_hipModuleLoadDataEx(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipModule_t> module,
    ffi.Pointer<ffi.Void> image,
    int numOptions,
    ffi.Pointer<ffi.Int32> options,
    ffi.Pointer<ffi.Pointer<ffi.Void>> optionValues,
  ) {
    return _hc_hipModuleLoadDataEx(
      hashcat_ctx,
      module,
      image,
      numOptions,
      options,
      optionValues,
    );
  }

  late final _hc_hipModuleLoadDataExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hipModule_t>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('hc_hipModuleLoadDataEx');
  late final _hc_hipModuleLoadDataEx = _hc_hipModuleLoadDataExPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<hipModule_t>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int hc_hipModuleUnload(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipModule_t hmod,
  ) {
    return _hc_hipModuleUnload(
      hashcat_ctx,
      hmod,
    );
  }

  late final _hc_hipModuleUnloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipModule_t)>>('hc_hipModuleUnload');
  late final _hc_hipModuleUnload = _hc_hipModuleUnloadPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipModule_t)>();

  int hc_hipRuntimeGetVersion(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> runtimeVersion,
  ) {
    return _hc_hipRuntimeGetVersion(
      hashcat_ctx,
      runtimeVersion,
    );
  }

  late final _hc_hipRuntimeGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hc_hipRuntimeGetVersion');
  late final _hc_hipRuntimeGetVersion = _hc_hipRuntimeGetVersionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hc_hipStreamCreate(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<hipStream_t> phStream,
    int Flags,
  ) {
    return _hc_hipStreamCreate(
      hashcat_ctx,
      phStream,
      Flags,
    );
  }

  late final _hc_hipStreamCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipStream_t>,
              ffi.UnsignedInt)>>('hc_hipStreamCreate');
  late final _hc_hipStreamCreate = _hc_hipStreamCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<hipStream_t>, int)>();

  int hc_hipStreamDestroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipStream_t hStream,
  ) {
    return _hc_hipStreamDestroy(
      hashcat_ctx,
      hStream,
    );
  }

  late final _hc_hipStreamDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipStream_t)>>('hc_hipStreamDestroy');
  late final _hc_hipStreamDestroy = _hc_hipStreamDestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipStream_t)>();

  int hc_hipStreamSynchronize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    hipStream_t hStream,
  ) {
    return _hc_hipStreamSynchronize(
      hashcat_ctx,
      hStream,
    );
  }

  late final _hc_hipStreamSynchronizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, hipStream_t)>>('hc_hipStreamSynchronize');
  late final _hc_hipStreamSynchronize = _hc_hipStreamSynchronizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, hipStream_t)>();

  int clGetPlatformIDs(
    int arg0,
    ffi.Pointer<cl_platform_id> arg1,
    ffi.Pointer<cl_uint> arg2,
  ) {
    return _clGetPlatformIDs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _clGetPlatformIDsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_uint, ffi.Pointer<cl_platform_id>,
              ffi.Pointer<cl_uint>)>>('clGetPlatformIDs');
  late final _clGetPlatformIDs = _clGetPlatformIDsPtr.asFunction<
      int Function(int, ffi.Pointer<cl_platform_id>, ffi.Pointer<cl_uint>)>();

  int clGetPlatformInfo(
    cl_platform_id arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetPlatformInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetPlatformInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_platform_id,
              cl_platform_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetPlatformInfo');
  late final _clGetPlatformInfo = _clGetPlatformInfoPtr.asFunction<
      int Function(cl_platform_id, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clGetDeviceIDs(
    cl_platform_id arg0,
    int arg1,
    int arg2,
    ffi.Pointer<cl_device_id> arg3,
    ffi.Pointer<cl_uint> arg4,
  ) {
    return _clGetDeviceIDs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetDeviceIDsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_platform_id,
              cl_device_type,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<cl_uint>)>>('clGetDeviceIDs');
  late final _clGetDeviceIDs = _clGetDeviceIDsPtr.asFunction<
      int Function(cl_platform_id, int, int, ffi.Pointer<cl_device_id>,
          ffi.Pointer<cl_uint>)>();

  int clGetDeviceInfo(
    cl_device_id arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetDeviceInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id,
              cl_device_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetDeviceInfo');
  late final _clGetDeviceInfo = _clGetDeviceInfoPtr.asFunction<
      int Function(cl_device_id, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clCreateSubDevices(
    cl_device_id arg0,
    ffi.Pointer<cl_device_partition_property> arg1,
    int arg2,
    ffi.Pointer<cl_device_id> arg3,
    ffi.Pointer<cl_uint> arg4,
  ) {
    return _clCreateSubDevices(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateSubDevicesPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id,
              ffi.Pointer<cl_device_partition_property>,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<cl_uint>)>>('clCreateSubDevices');
  late final _clCreateSubDevices = _clCreateSubDevicesPtr.asFunction<
      int Function(cl_device_id, ffi.Pointer<cl_device_partition_property>, int,
          ffi.Pointer<cl_device_id>, ffi.Pointer<cl_uint>)>();

  int clRetainDevice(
    cl_device_id arg0,
  ) {
    return _clRetainDevice(
      arg0,
    );
  }

  late final _clRetainDevicePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_device_id)>>(
          'clRetainDevice');
  late final _clRetainDevice =
      _clRetainDevicePtr.asFunction<int Function(cl_device_id)>();

  int clReleaseDevice(
    cl_device_id arg0,
  ) {
    return _clReleaseDevice(
      arg0,
    );
  }

  late final _clReleaseDevicePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_device_id)>>(
          'clReleaseDevice');
  late final _clReleaseDevice =
      _clReleaseDevicePtr.asFunction<int Function(cl_device_id)>();

  cl_context clCreateContext(
    ffi.Pointer<cl_context_properties> arg0,
    int arg1,
    ffi.Pointer<cl_device_id> arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
                    ffi.Size, ffi.Pointer<ffi.Void>)>>
        arg3,
    ffi.Pointer<ffi.Void> arg4,
    ffi.Pointer<cl_int> arg5,
  ) {
    return _clCreateContext(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clCreateContextPtr = _lookup<
      ffi.NativeFunction<
          cl_context Function(
              ffi.Pointer<cl_context_properties>,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Size,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateContext');
  late final _clCreateContext = _clCreateContextPtr.asFunction<
      cl_context Function(
          ffi.Pointer<cl_context_properties>,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  cl_context clCreateContextFromType(
    ffi.Pointer<cl_context_properties> arg0,
    int arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
                    ffi.Size, ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<cl_int> arg4,
  ) {
    return _clCreateContextFromType(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateContextFromTypePtr = _lookup<
      ffi.NativeFunction<
          cl_context Function(
              ffi.Pointer<cl_context_properties>,
              cl_device_type,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Size,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateContextFromType');
  late final _clCreateContextFromType = _clCreateContextFromTypePtr.asFunction<
      cl_context Function(
          ffi.Pointer<cl_context_properties>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  int clRetainContext(
    cl_context arg0,
  ) {
    return _clRetainContext(
      arg0,
    );
  }

  late final _clRetainContextPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_context)>>(
          'clRetainContext');
  late final _clRetainContext =
      _clRetainContextPtr.asFunction<int Function(cl_context)>();

  int clReleaseContext(
    cl_context arg0,
  ) {
    return _clReleaseContext(
      arg0,
    );
  }

  late final _clReleaseContextPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_context)>>(
          'clReleaseContext');
  late final _clReleaseContext =
      _clReleaseContextPtr.asFunction<int Function(cl_context)>();

  int clGetContextInfo(
    cl_context arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetContextInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetContextInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              cl_context_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetContextInfo');
  late final _clGetContextInfo = _clGetContextInfoPtr.asFunction<
      int Function(cl_context, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_command_queue clCreateCommandQueue(
    cl_context arg0,
    cl_device_id arg1,
    int arg2,
    ffi.Pointer<cl_int> arg3,
  ) {
    return _clCreateCommandQueue(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _clCreateCommandQueuePtr = _lookup<
      ffi.NativeFunction<
          cl_command_queue Function(
              cl_context,
              cl_device_id,
              cl_command_queue_properties,
              ffi.Pointer<cl_int>)>>('clCreateCommandQueue');
  late final _clCreateCommandQueue = _clCreateCommandQueuePtr.asFunction<
      cl_command_queue Function(
          cl_context, cl_device_id, int, ffi.Pointer<cl_int>)>();

  int clRetainCommandQueue(
    cl_command_queue arg0,
  ) {
    return _clRetainCommandQueue(
      arg0,
    );
  }

  late final _clRetainCommandQueuePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clRetainCommandQueue');
  late final _clRetainCommandQueue =
      _clRetainCommandQueuePtr.asFunction<int Function(cl_command_queue)>();

  int clReleaseCommandQueue(
    cl_command_queue arg0,
  ) {
    return _clReleaseCommandQueue(
      arg0,
    );
  }

  late final _clReleaseCommandQueuePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clReleaseCommandQueue');
  late final _clReleaseCommandQueue =
      _clReleaseCommandQueuePtr.asFunction<int Function(cl_command_queue)>();

  int clGetCommandQueueInfo(
    cl_command_queue arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetCommandQueueInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetCommandQueueInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_command_queue_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetCommandQueueInfo');
  late final _clGetCommandQueueInfo = _clGetCommandQueueInfoPtr.asFunction<
      int Function(cl_command_queue, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_mem clCreateBuffer(
    cl_context arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<cl_int> arg4,
  ) {
    return _clCreateBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>>('clCreateBuffer');
  late final _clCreateBuffer = _clCreateBufferPtr.asFunction<
      cl_mem Function(
          cl_context, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateSubBuffer(
    cl_mem arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<cl_int> arg4,
  ) {
    return _clCreateSubBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateSubBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_mem,
              cl_mem_flags,
              cl_buffer_create_type,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateSubBuffer');
  late final _clCreateSubBuffer = _clCreateSubBufferPtr.asFunction<
      cl_mem Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateImage(
    cl_context arg0,
    int arg1,
    ffi.Pointer<cl_image_format> arg2,
    ffi.Pointer<cl_image_desc> arg3,
    ffi.Pointer<ffi.Void> arg4,
    ffi.Pointer<cl_int> arg5,
  ) {
    return _clCreateImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clCreateImagePtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_image_desc>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImage');
  late final _clCreateImage = _clCreateImagePtr.asFunction<
      cl_mem Function(
          cl_context,
          int,
          ffi.Pointer<cl_image_format>,
          ffi.Pointer<cl_image_desc>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  int clRetainMemObject(
    cl_mem arg0,
  ) {
    return _clRetainMemObject(
      arg0,
    );
  }

  late final _clRetainMemObjectPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_mem)>>('clRetainMemObject');
  late final _clRetainMemObject =
      _clRetainMemObjectPtr.asFunction<int Function(cl_mem)>();

  int clReleaseMemObject(
    cl_mem arg0,
  ) {
    return _clReleaseMemObject(
      arg0,
    );
  }

  late final _clReleaseMemObjectPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_mem)>>(
          'clReleaseMemObject');
  late final _clReleaseMemObject =
      _clReleaseMemObjectPtr.asFunction<int Function(cl_mem)>();

  int clGetSupportedImageFormats(
    cl_context arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<cl_image_format> arg4,
    ffi.Pointer<cl_uint> arg5,
  ) {
    return _clGetSupportedImageFormats(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clGetSupportedImageFormatsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              cl_mem_flags,
              cl_mem_object_type,
              cl_uint,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_uint>)>>('clGetSupportedImageFormats');
  late final _clGetSupportedImageFormats =
      _clGetSupportedImageFormatsPtr.asFunction<
          int Function(cl_context, int, int, int, ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_uint>)>();

  int clGetMemObjectInfo(
    cl_mem arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetMemObjectInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetMemObjectInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_mem, cl_mem_info, ffi.Size, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetMemObjectInfo');
  late final _clGetMemObjectInfo = _clGetMemObjectInfoPtr.asFunction<
      int Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clGetImageInfo(
    cl_mem arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetImageInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetImageInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_mem, cl_image_info, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('clGetImageInfo');
  late final _clGetImageInfo = _clGetImageInfoPtr.asFunction<
      int Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clSetMemObjectDestructorCallback(
    cl_mem arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _clSetMemObjectDestructorCallback(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _clSetMemObjectDestructorCallbackPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_mem,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetMemObjectDestructorCallback');
  late final _clSetMemObjectDestructorCallback =
      _clSetMemObjectDestructorCallbackPtr.asFunction<
          int Function(
              cl_mem,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  cl_sampler clCreateSampler(
    cl_context arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<cl_int> arg4,
  ) {
    return _clCreateSampler(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateSamplerPtr = _lookup<
      ffi.NativeFunction<
          cl_sampler Function(cl_context, cl_bool, cl_addressing_mode,
              cl_filter_mode, ffi.Pointer<cl_int>)>>('clCreateSampler');
  late final _clCreateSampler = _clCreateSamplerPtr.asFunction<
      cl_sampler Function(cl_context, int, int, int, ffi.Pointer<cl_int>)>();

  int clRetainSampler(
    cl_sampler arg0,
  ) {
    return _clRetainSampler(
      arg0,
    );
  }

  late final _clRetainSamplerPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_sampler)>>(
          'clRetainSampler');
  late final _clRetainSampler =
      _clRetainSamplerPtr.asFunction<int Function(cl_sampler)>();

  int clReleaseSampler(
    cl_sampler arg0,
  ) {
    return _clReleaseSampler(
      arg0,
    );
  }

  late final _clReleaseSamplerPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_sampler)>>(
          'clReleaseSampler');
  late final _clReleaseSampler =
      _clReleaseSamplerPtr.asFunction<int Function(cl_sampler)>();

  int clGetSamplerInfo(
    cl_sampler arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetSamplerInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetSamplerInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_sampler,
              cl_sampler_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetSamplerInfo');
  late final _clGetSamplerInfo = _clGetSamplerInfoPtr.asFunction<
      int Function(cl_sampler, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_program clCreateProgramWithSource(
    cl_context arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<cl_int> arg4,
  ) {
    return _clCreateProgramWithSource(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateProgramWithSourcePtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithSource');
  late final _clCreateProgramWithSource =
      _clCreateProgramWithSourcePtr.asFunction<
          cl_program Function(
              cl_context,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cl_int>)>();

  cl_program clCreateProgramWithBinary(
    cl_context arg0,
    int arg1,
    ffi.Pointer<cl_device_id> arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> arg4,
    ffi.Pointer<cl_int> arg5,
    ffi.Pointer<cl_int> arg6,
  ) {
    return _clCreateProgramWithBinary(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _clCreateProgramWithBinaryPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<cl_int>,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithBinary');
  late final _clCreateProgramWithBinary =
      _clCreateProgramWithBinaryPtr.asFunction<
          cl_program Function(
              cl_context,
              int,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<cl_int>,
              ffi.Pointer<cl_int>)>();

  cl_program clCreateProgramWithBuiltInKernels(
    cl_context arg0,
    int arg1,
    ffi.Pointer<cl_device_id> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<cl_int> arg4,
  ) {
    return _clCreateProgramWithBuiltInKernels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clCreateProgramWithBuiltInKernelsPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithBuiltInKernels');
  late final _clCreateProgramWithBuiltInKernels =
      _clCreateProgramWithBuiltInKernelsPtr.asFunction<
          cl_program Function(cl_context, int, ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<cl_int>)>();

  int clRetainProgram(
    cl_program arg0,
  ) {
    return _clRetainProgram(
      arg0,
    );
  }

  late final _clRetainProgramPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_program)>>(
          'clRetainProgram');
  late final _clRetainProgram =
      _clRetainProgramPtr.asFunction<int Function(cl_program)>();

  int clReleaseProgram(
    cl_program arg0,
  ) {
    return _clReleaseProgram(
      arg0,
    );
  }

  late final _clReleaseProgramPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_program)>>(
          'clReleaseProgram');
  late final _clReleaseProgram =
      _clReleaseProgramPtr.asFunction<int Function(cl_program)>();

  int clBuildProgram(
    cl_program arg0,
    int arg1,
    ffi.Pointer<cl_device_id> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        arg4,
    ffi.Pointer<ffi.Void> arg5,
  ) {
    return _clBuildProgram(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clBuildProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clBuildProgram');
  late final _clBuildProgram = _clBuildProgramPtr.asFunction<
      int Function(
          cl_program,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int clCompileProgram(
    cl_program arg0,
    int arg1,
    ffi.Pointer<cl_device_id> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    ffi.Pointer<cl_program> arg5,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg6,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        arg7,
    ffi.Pointer<ffi.Void> arg8,
  ) {
    return _clCompileProgram(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clCompileProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              cl_uint,
              ffi.Pointer<cl_program>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clCompileProgram');
  late final _clCompileProgram = _clCompileProgramPtr.asFunction<
      int Function(
          cl_program,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cl_program>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  cl_program clLinkProgram(
    cl_context arg0,
    int arg1,
    ffi.Pointer<cl_device_id> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    ffi.Pointer<cl_program> arg5,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        arg6,
    ffi.Pointer<ffi.Void> arg7,
    ffi.Pointer<cl_int> arg8,
  ) {
    return _clLinkProgram(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clLinkProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              cl_uint,
              ffi.Pointer<cl_program>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clLinkProgram');
  late final _clLinkProgram = _clLinkProgramPtr.asFunction<
      cl_program Function(
          cl_context,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cl_program>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  int clUnloadPlatformCompiler(
    cl_platform_id arg0,
  ) {
    return _clUnloadPlatformCompiler(
      arg0,
    );
  }

  late final _clUnloadPlatformCompilerPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_platform_id)>>(
          'clUnloadPlatformCompiler');
  late final _clUnloadPlatformCompiler =
      _clUnloadPlatformCompilerPtr.asFunction<int Function(cl_platform_id)>();

  int clGetProgramInfo(
    cl_program arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetProgramInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetProgramInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_program_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetProgramInfo');
  late final _clGetProgramInfo = _clGetProgramInfoPtr.asFunction<
      int Function(cl_program, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clGetProgramBuildInfo(
    cl_program arg0,
    cl_device_id arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
    ffi.Pointer<ffi.Size> arg5,
  ) {
    return _clGetProgramBuildInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clGetProgramBuildInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_device_id,
              cl_program_build_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetProgramBuildInfo');
  late final _clGetProgramBuildInfo = _clGetProgramBuildInfoPtr.asFunction<
      int Function(cl_program, cl_device_id, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_kernel clCreateKernel(
    cl_program arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<cl_int> arg2,
  ) {
    return _clCreateKernel(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _clCreateKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_kernel Function(cl_program, ffi.Pointer<ffi.Char>,
              ffi.Pointer<cl_int>)>>('clCreateKernel');
  late final _clCreateKernel = _clCreateKernelPtr.asFunction<
      cl_kernel Function(
          cl_program, ffi.Pointer<ffi.Char>, ffi.Pointer<cl_int>)>();

  int clCreateKernelsInProgram(
    cl_program arg0,
    int arg1,
    ffi.Pointer<cl_kernel> arg2,
    ffi.Pointer<cl_uint> arg3,
  ) {
    return _clCreateKernelsInProgram(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _clCreateKernelsInProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_program, cl_uint, ffi.Pointer<cl_kernel>,
              ffi.Pointer<cl_uint>)>>('clCreateKernelsInProgram');
  late final _clCreateKernelsInProgram =
      _clCreateKernelsInProgramPtr.asFunction<
          int Function(
              cl_program, int, ffi.Pointer<cl_kernel>, ffi.Pointer<cl_uint>)>();

  int clRetainKernel(
    cl_kernel arg0,
  ) {
    return _clRetainKernel(
      arg0,
    );
  }

  late final _clRetainKernelPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_kernel)>>('clRetainKernel');
  late final _clRetainKernel =
      _clRetainKernelPtr.asFunction<int Function(cl_kernel)>();

  int clReleaseKernel(
    cl_kernel arg0,
  ) {
    return _clReleaseKernel(
      arg0,
    );
  }

  late final _clReleaseKernelPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_kernel)>>(
          'clReleaseKernel');
  late final _clReleaseKernel =
      _clReleaseKernelPtr.asFunction<int Function(cl_kernel)>();

  int clSetKernelArg(
    cl_kernel arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _clSetKernelArg(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _clSetKernelArgPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_uint, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('clSetKernelArg');
  late final _clSetKernelArg = _clSetKernelArgPtr
      .asFunction<int Function(cl_kernel, int, int, ffi.Pointer<ffi.Void>)>();

  int clGetKernelInfo(
    cl_kernel arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetKernelInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_kernel_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelInfo');
  late final _clGetKernelInfo = _clGetKernelInfoPtr.asFunction<
      int Function(
          cl_kernel, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clGetKernelArgInfo(
    cl_kernel arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
    ffi.Pointer<ffi.Size> arg5,
  ) {
    return _clGetKernelArgInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clGetKernelArgInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_uint,
              cl_kernel_arg_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelArgInfo');
  late final _clGetKernelArgInfo = _clGetKernelArgInfoPtr.asFunction<
      int Function(cl_kernel, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clGetKernelWorkGroupInfo(
    cl_kernel arg0,
    cl_device_id arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
    ffi.Pointer<ffi.Size> arg5,
  ) {
    return _clGetKernelWorkGroupInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clGetKernelWorkGroupInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_device_id,
              cl_kernel_work_group_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelWorkGroupInfo');
  late final _clGetKernelWorkGroupInfo =
      _clGetKernelWorkGroupInfoPtr.asFunction<
          int Function(cl_kernel, cl_device_id, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();

  int clWaitForEvents(
    int arg0,
    ffi.Pointer<cl_event> arg1,
  ) {
    return _clWaitForEvents(
      arg0,
      arg1,
    );
  }

  late final _clWaitForEventsPtr = _lookup<
          ffi.NativeFunction<cl_int Function(cl_uint, ffi.Pointer<cl_event>)>>(
      'clWaitForEvents');
  late final _clWaitForEvents = _clWaitForEventsPtr
      .asFunction<int Function(int, ffi.Pointer<cl_event>)>();

  int clGetEventInfo(
    cl_event arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetEventInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetEventInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_event, cl_event_info, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('clGetEventInfo');
  late final _clGetEventInfo = _clGetEventInfoPtr.asFunction<
      int Function(
          cl_event, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  cl_event clCreateUserEvent(
    cl_context arg0,
    ffi.Pointer<cl_int> arg1,
  ) {
    return _clCreateUserEvent(
      arg0,
      arg1,
    );
  }

  late final _clCreateUserEventPtr = _lookup<
      ffi.NativeFunction<
          cl_event Function(
              cl_context, ffi.Pointer<cl_int>)>>('clCreateUserEvent');
  late final _clCreateUserEvent = _clCreateUserEventPtr
      .asFunction<cl_event Function(cl_context, ffi.Pointer<cl_int>)>();

  int clRetainEvent(
    cl_event arg0,
  ) {
    return _clRetainEvent(
      arg0,
    );
  }

  late final _clRetainEventPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_event)>>('clRetainEvent');
  late final _clRetainEvent =
      _clRetainEventPtr.asFunction<int Function(cl_event)>();

  int clReleaseEvent(
    cl_event arg0,
  ) {
    return _clReleaseEvent(
      arg0,
    );
  }

  late final _clReleaseEventPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_event)>>('clReleaseEvent');
  late final _clReleaseEvent =
      _clReleaseEventPtr.asFunction<int Function(cl_event)>();

  int clSetUserEventStatus(
    cl_event arg0,
    int arg1,
  ) {
    return _clSetUserEventStatus(
      arg0,
      arg1,
    );
  }

  late final _clSetUserEventStatusPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_event, cl_int)>>(
          'clSetUserEventStatus');
  late final _clSetUserEventStatus =
      _clSetUserEventStatusPtr.asFunction<int Function(cl_event, int)>();

  int clSetEventCallback(
    cl_event arg0,
    int arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_event, cl_int, ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _clSetEventCallback(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _clSetEventCallbackPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_event,
              cl_int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          cl_event, cl_int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetEventCallback');
  late final _clSetEventCallback = _clSetEventCallbackPtr.asFunction<
      int Function(
          cl_event,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_event, cl_int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int clGetEventProfilingInfo(
    cl_event arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _clGetEventProfilingInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clGetEventProfilingInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_event,
              cl_profiling_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetEventProfilingInfo');
  late final _clGetEventProfilingInfo = _clGetEventProfilingInfoPtr.asFunction<
      int Function(
          cl_event, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clFlush(
    cl_command_queue arg0,
  ) {
    return _clFlush(
      arg0,
    );
  }

  late final _clFlushPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>('clFlush');
  late final _clFlush =
      _clFlushPtr.asFunction<int Function(cl_command_queue)>();

  int clFinish(
    cl_command_queue arg0,
  ) {
    return _clFinish(
      arg0,
    );
  }

  late final _clFinishPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clFinish');
  late final _clFinish =
      _clFinishPtr.asFunction<int Function(cl_command_queue)>();

  int clEnqueueReadBuffer(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Void> arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueReadBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueReadBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReadBuffer');
  late final _clEnqueueReadBuffer = _clEnqueueReadBufferPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueReadBufferRect(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
    ffi.Pointer<ffi.Void> arg10,
    int arg11,
    ffi.Pointer<cl_event> arg12,
    ffi.Pointer<cl_event> arg13,
  ) {
    return _clEnqueueReadBufferRect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
    );
  }

  late final _clEnqueueReadBufferRectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReadBufferRect');
  late final _clEnqueueReadBufferRect = _clEnqueueReadBufferRectPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueWriteBuffer(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Void> arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueWriteBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueWriteBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWriteBuffer');
  late final _clEnqueueWriteBuffer = _clEnqueueWriteBufferPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueWriteBufferRect(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
    ffi.Pointer<ffi.Void> arg10,
    int arg11,
    ffi.Pointer<cl_event> arg12,
    ffi.Pointer<cl_event> arg13,
  ) {
    return _clEnqueueWriteBufferRect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
    );
  }

  late final _clEnqueueWriteBufferRectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWriteBufferRect');
  late final _clEnqueueWriteBufferRect =
      _clEnqueueWriteBufferRectPtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueFillBuffer(
    cl_command_queue arg0,
    cl_mem arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueFillBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueFillBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueFillBuffer');
  late final _clEnqueueFillBuffer = _clEnqueueFillBufferPtr.asFunction<
      int Function(cl_command_queue, cl_mem, ffi.Pointer<ffi.Void>, int, int,
          int, int, ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueCopyBuffer(
    cl_command_queue arg0,
    cl_mem arg1,
    cl_mem arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueCopyBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueCopyBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyBuffer');
  late final _clEnqueueCopyBuffer = _clEnqueueCopyBufferPtr.asFunction<
      int Function(cl_command_queue, cl_mem, cl_mem, int, int, int, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueCopyBufferRect(
    cl_command_queue arg0,
    cl_mem arg1,
    cl_mem arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
    int arg10,
    ffi.Pointer<cl_event> arg11,
    ffi.Pointer<cl_event> arg12,
  ) {
    return _clEnqueueCopyBufferRect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
    );
  }

  late final _clEnqueueCopyBufferRectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyBufferRect');
  late final _clEnqueueCopyBufferRect = _clEnqueueCopyBufferRectPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          cl_mem,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueReadImage(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ffi.Void> arg7,
    int arg8,
    ffi.Pointer<cl_event> arg9,
    ffi.Pointer<cl_event> arg10,
  ) {
    return _clEnqueueReadImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _clEnqueueReadImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReadImage');
  late final _clEnqueueReadImage = _clEnqueueReadImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueWriteImage(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ffi.Void> arg7,
    int arg8,
    ffi.Pointer<cl_event> arg9,
    ffi.Pointer<cl_event> arg10,
  ) {
    return _clEnqueueWriteImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _clEnqueueWriteImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWriteImage');
  late final _clEnqueueWriteImage = _clEnqueueWriteImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueFillImage(
    cl_command_queue arg0,
    cl_mem arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    int arg5,
    ffi.Pointer<cl_event> arg6,
    ffi.Pointer<cl_event> arg7,
  ) {
    return _clEnqueueFillImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _clEnqueueFillImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueFillImage');
  late final _clEnqueueFillImage = _clEnqueueFillImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueCopyImage(
    cl_command_queue arg0,
    cl_mem arg1,
    cl_mem arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueCopyImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueCopyImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyImage');
  late final _clEnqueueCopyImage = _clEnqueueCopyImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          cl_mem,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueCopyImageToBuffer(
    cl_command_queue arg0,
    cl_mem arg1,
    cl_mem arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueCopyImageToBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueCopyImageToBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyImageToBuffer');
  late final _clEnqueueCopyImageToBuffer =
      _clEnqueueCopyImageToBufferPtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueCopyBufferToImage(
    cl_command_queue arg0,
    cl_mem arg1,
    cl_mem arg2,
    int arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueCopyBufferToImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueCopyBufferToImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyBufferToImage');
  late final _clEnqueueCopyBufferToImage =
      _clEnqueueCopyBufferToImagePtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  ffi.Pointer<ffi.Void> clEnqueueMapBuffer(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
    ffi.Pointer<cl_int> arg9,
  ) {
    return _clEnqueueMapBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _clEnqueueMapBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              cl_map_flags,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_int>)>>('clEnqueueMapBuffer');
  late final _clEnqueueMapBuffer = _clEnqueueMapBufferPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_int>)>();

  ffi.Pointer<ffi.Void> clEnqueueMapImage(
    cl_command_queue arg0,
    cl_mem arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    ffi.Pointer<ffi.Size> arg6,
    ffi.Pointer<ffi.Size> arg7,
    int arg8,
    ffi.Pointer<cl_event> arg9,
    ffi.Pointer<cl_event> arg10,
    ffi.Pointer<cl_int> arg11,
  ) {
    return _clEnqueueMapImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  late final _clEnqueueMapImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              cl_map_flags,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_int>)>>('clEnqueueMapImage');
  late final _clEnqueueMapImage = _clEnqueueMapImagePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_int>)>();

  int clEnqueueUnmapMemObject(
    cl_command_queue arg0,
    cl_mem arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<cl_event> arg4,
    ffi.Pointer<cl_event> arg5,
  ) {
    return _clEnqueueUnmapMemObject(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _clEnqueueUnmapMemObjectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueUnmapMemObject');
  late final _clEnqueueUnmapMemObject = _clEnqueueUnmapMemObjectPtr.asFunction<
      int Function(cl_command_queue, cl_mem, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueMigrateMemObjects(
    cl_command_queue arg0,
    int arg1,
    ffi.Pointer<cl_mem> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<cl_event> arg5,
    ffi.Pointer<cl_event> arg6,
  ) {
    return _clEnqueueMigrateMemObjects(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _clEnqueueMigrateMemObjectsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_mem_migration_flags,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMigrateMemObjects');
  late final _clEnqueueMigrateMemObjects =
      _clEnqueueMigrateMemObjectsPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueNDRangeKernel(
    cl_command_queue arg0,
    cl_kernel arg1,
    int arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
    ffi.Pointer<ffi.Size> arg5,
    int arg6,
    ffi.Pointer<cl_event> arg7,
    ffi.Pointer<cl_event> arg8,
  ) {
    return _clEnqueueNDRangeKernel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _clEnqueueNDRangeKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_kernel,
              cl_uint,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueNDRangeKernel');
  late final _clEnqueueNDRangeKernel = _clEnqueueNDRangeKernelPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_kernel,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueTask(
    cl_command_queue arg0,
    cl_kernel arg1,
    int arg2,
    ffi.Pointer<cl_event> arg3,
    ffi.Pointer<cl_event> arg4,
  ) {
    return _clEnqueueTask(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _clEnqueueTaskPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_kernel, cl_uint,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>>('clEnqueueTask');
  late final _clEnqueueTask = _clEnqueueTaskPtr.asFunction<
      int Function(cl_command_queue, cl_kernel, int, ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueNativeKernel(
    cl_command_queue arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<cl_mem> arg5,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg6,
    int arg7,
    ffi.Pointer<cl_event> arg8,
    ffi.Pointer<cl_event> arg9,
  ) {
    return _clEnqueueNativeKernel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _clEnqueueNativeKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_mem>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueNativeKernel');
  late final _clEnqueueNativeKernel = _clEnqueueNativeKernelPtr.asFunction<
      int Function(
          cl_command_queue,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<cl_mem>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueMarkerWithWaitList(
    cl_command_queue arg0,
    int arg1,
    ffi.Pointer<cl_event> arg2,
    ffi.Pointer<cl_event> arg3,
  ) {
    return _clEnqueueMarkerWithWaitList(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _clEnqueueMarkerWithWaitListPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_uint, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMarkerWithWaitList');
  late final _clEnqueueMarkerWithWaitList =
      _clEnqueueMarkerWithWaitListPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueBarrierWithWaitList(
    cl_command_queue arg0,
    int arg1,
    ffi.Pointer<cl_event> arg2,
    ffi.Pointer<cl_event> arg3,
  ) {
    return _clEnqueueBarrierWithWaitList(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _clEnqueueBarrierWithWaitListPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_uint, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueBarrierWithWaitList');
  late final _clEnqueueBarrierWithWaitList =
      _clEnqueueBarrierWithWaitListPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  ffi.Pointer<ffi.Void> clGetExtensionFunctionAddressForPlatform(
    cl_platform_id arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _clGetExtensionFunctionAddressForPlatform(
      arg0,
      arg1,
    );
  }

  late final _clGetExtensionFunctionAddressForPlatformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  cl_platform_id, ffi.Pointer<ffi.Char>)>>(
      'clGetExtensionFunctionAddressForPlatform');
  late final _clGetExtensionFunctionAddressForPlatform =
      _clGetExtensionFunctionAddressForPlatformPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_platform_id, ffi.Pointer<ffi.Char>)>();

  cl_mem clCreateImage2D(
    cl_context arg0,
    int arg1,
    ffi.Pointer<cl_image_format> arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Void> arg6,
    ffi.Pointer<cl_int> arg7,
  ) {
    return _clCreateImage2D(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _clCreateImage2DPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImage2D');
  late final _clCreateImage2D = _clCreateImage2DPtr.asFunction<
      cl_mem Function(cl_context, int, ffi.Pointer<cl_image_format>, int, int,
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateImage3D(
    cl_context arg0,
    int arg1,
    ffi.Pointer<cl_image_format> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<ffi.Void> arg8,
    ffi.Pointer<cl_int> arg9,
  ) {
    return _clCreateImage3D(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _clCreateImage3DPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImage3D');
  late final _clCreateImage3D = _clCreateImage3DPtr.asFunction<
      cl_mem Function(cl_context, int, ffi.Pointer<cl_image_format>, int, int,
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  int clEnqueueMarker(
    cl_command_queue arg0,
    ffi.Pointer<cl_event> arg1,
  ) {
    return _clEnqueueMarker(
      arg0,
      arg1,
    );
  }

  late final _clEnqueueMarkerPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue, ffi.Pointer<cl_event>)>>('clEnqueueMarker');
  late final _clEnqueueMarker = _clEnqueueMarkerPtr
      .asFunction<int Function(cl_command_queue, ffi.Pointer<cl_event>)>();

  int clEnqueueWaitForEvents(
    cl_command_queue arg0,
    int arg1,
    ffi.Pointer<cl_event> arg2,
  ) {
    return _clEnqueueWaitForEvents(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _clEnqueueWaitForEventsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_uint,
              ffi.Pointer<cl_event>)>>('clEnqueueWaitForEvents');
  late final _clEnqueueWaitForEvents = _clEnqueueWaitForEventsPtr
      .asFunction<int Function(cl_command_queue, int, ffi.Pointer<cl_event>)>();

  int clEnqueueBarrier(
    cl_command_queue arg0,
  ) {
    return _clEnqueueBarrier(
      arg0,
    );
  }

  late final _clEnqueueBarrierPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clEnqueueBarrier');
  late final _clEnqueueBarrier =
      _clEnqueueBarrierPtr.asFunction<int Function(cl_command_queue)>();

  int clUnloadCompiler() {
    return _clUnloadCompiler();
  }

  late final _clUnloadCompilerPtr =
      _lookup<ffi.NativeFunction<cl_int Function()>>('clUnloadCompiler');
  late final _clUnloadCompiler =
      _clUnloadCompilerPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> clGetExtensionFunctionAddress(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _clGetExtensionFunctionAddress(
      arg0,
    );
  }

  late final _clGetExtensionFunctionAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('clGetExtensionFunctionAddress');
  late final _clGetExtensionFunctionAddress = _clGetExtensionFunctionAddressPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> val2cstr_cl(
    int CL_err,
  ) {
    return _val2cstr_cl(
      CL_err,
    );
  }

  late final _val2cstr_clPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(cl_int)>>(
          'val2cstr_cl');
  late final _val2cstr_cl =
      _val2cstr_clPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ocl_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _ocl_init(
      hashcat_ctx,
    );
  }

  late final _ocl_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ocl_init');
  late final _ocl_init =
      _ocl_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void ocl_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _ocl_close(
      hashcat_ctx,
    );
  }

  late final _ocl_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ocl_close');
  late final _ocl_close =
      _ocl_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hc_clEnqueueNDRangeKernel(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_kernel kernel,
    int work_dim,
    ffi.Pointer<ffi.Size> global_work_offset,
    ffi.Pointer<ffi.Size> global_work_size,
    ffi.Pointer<ffi.Size> local_work_size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _hc_clEnqueueNDRangeKernel(
      hashcat_ctx,
      command_queue,
      kernel,
      work_dim,
      global_work_offset,
      global_work_size,
      local_work_size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _hc_clEnqueueNDRangeKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_kernel,
              cl_uint,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('hc_clEnqueueNDRangeKernel');
  late final _hc_clEnqueueNDRangeKernel =
      _hc_clEnqueueNDRangeKernelPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_kernel,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int hc_clGetEventInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_event event,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetEventInfo(
      hashcat_ctx,
      event,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetEventInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_event,
              cl_event_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetEventInfo');
  late final _hc_clGetEventInfo = _hc_clGetEventInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_event, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clFlush(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
  ) {
    return _hc_clFlush(
      hashcat_ctx,
      command_queue,
    );
  }

  late final _hc_clFlushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, cl_command_queue)>>('hc_clFlush');
  late final _hc_clFlush = _hc_clFlushPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_command_queue)>();

  int hc_clFinish(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
  ) {
    return _hc_clFinish(
      hashcat_ctx,
      command_queue,
    );
  }

  late final _hc_clFinishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, cl_command_queue)>>('hc_clFinish');
  late final _hc_clFinish = _hc_clFinishPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_command_queue)>();

  int hc_clSetKernelArg(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_kernel kernel,
    int arg_index,
    int arg_size,
    ffi.Pointer<ffi.Void> arg_value,
  ) {
    return _hc_clSetKernelArg(
      hashcat_ctx,
      kernel,
      arg_index,
      arg_size,
      arg_value,
    );
  }

  late final _hc_clSetKernelArgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, cl_kernel, cl_uint, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('hc_clSetKernelArg');
  late final _hc_clSetKernelArg = _hc_clSetKernelArgPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, cl_kernel, int, int, ffi.Pointer<ffi.Void>)>();

  int hc_clEnqueueWriteBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_write,
    int offset,
    int size,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _hc_clEnqueueWriteBuffer(
      hashcat_ctx,
      command_queue,
      buffer,
      blocking_write,
      offset,
      size,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _hc_clEnqueueWriteBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('hc_clEnqueueWriteBuffer');
  late final _hc_clEnqueueWriteBuffer = _hc_clEnqueueWriteBufferPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int hc_clEnqueueCopyBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_buffer,
    int src_offset,
    int dst_offset,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _hc_clEnqueueCopyBuffer(
      hashcat_ctx,
      command_queue,
      src_buffer,
      dst_buffer,
      src_offset,
      dst_offset,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _hc_clEnqueueCopyBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('hc_clEnqueueCopyBuffer');
  late final _hc_clEnqueueCopyBuffer = _hc_clEnqueueCopyBufferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_command_queue, cl_mem, cl_mem, int,
          int, int, int, ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int hc_clEnqueueFillBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_mem buffer,
    ffi.Pointer<ffi.Void> pattern,
    int pattern_size,
    int offset,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _hc_clEnqueueFillBuffer(
      hashcat_ctx,
      command_queue,
      buffer,
      pattern,
      pattern_size,
      offset,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _hc_clEnqueueFillBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('hc_clEnqueueFillBuffer');
  late final _hc_clEnqueueFillBuffer = _hc_clEnqueueFillBufferPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_command_queue,
          cl_mem,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int hc_clEnqueueReadBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_read,
    int offset,
    int size,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _hc_clEnqueueReadBuffer(
      hashcat_ctx,
      command_queue,
      buffer,
      blocking_read,
      offset,
      size,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _hc_clEnqueueReadBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('hc_clEnqueueReadBuffer');
  late final _hc_clEnqueueReadBuffer = _hc_clEnqueueReadBufferPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int hc_clGetPlatformIDs(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int num_entries,
    ffi.Pointer<cl_platform_id> platforms,
    ffi.Pointer<cl_uint> num_platforms,
  ) {
    return _hc_clGetPlatformIDs(
      hashcat_ctx,
      num_entries,
      platforms,
      num_platforms,
    );
  }

  late final _hc_clGetPlatformIDsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_platform_id>,
              ffi.Pointer<cl_uint>)>>('hc_clGetPlatformIDs');
  late final _hc_clGetPlatformIDs = _hc_clGetPlatformIDsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<cl_platform_id>,
          ffi.Pointer<cl_uint>)>();

  int hc_clGetPlatformInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_platform_id platform,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetPlatformInfo(
      hashcat_ctx,
      platform,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetPlatformInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_platform_id,
              cl_platform_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetPlatformInfo');
  late final _hc_clGetPlatformInfo = _hc_clGetPlatformInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_platform_id, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clGetDeviceIDs(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_platform_id platform,
    int device_type,
    int num_entries,
    ffi.Pointer<cl_device_id> devices,
    ffi.Pointer<cl_uint> num_devices,
  ) {
    return _hc_clGetDeviceIDs(
      hashcat_ctx,
      platform,
      device_type,
      num_entries,
      devices,
      num_devices,
    );
  }

  late final _hc_clGetDeviceIDsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_platform_id,
              cl_device_type,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<cl_uint>)>>('hc_clGetDeviceIDs');
  late final _hc_clGetDeviceIDs = _hc_clGetDeviceIDsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_platform_id, int, int,
          ffi.Pointer<cl_device_id>, ffi.Pointer<cl_uint>)>();

  int hc_clGetDeviceInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_device_id device,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetDeviceInfo(
      hashcat_ctx,
      device,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_device_id,
              cl_device_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetDeviceInfo');
  late final _hc_clGetDeviceInfo = _hc_clGetDeviceInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_device_id, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clCreateContext(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<cl_context_properties> properties,
    int num_devices,
    ffi.Pointer<cl_device_id> devices,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
                    ffi.Size, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<cl_context> context,
  ) {
    return _hc_clCreateContext(
      hashcat_ctx,
      properties,
      num_devices,
      devices,
      pfn_notify,
      user_data,
      context,
    );
  }

  late final _hc_clCreateContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_context_properties>,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Size,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_context>)>>('hc_clCreateContext');
  late final _hc_clCreateContext = _hc_clCreateContextPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_context_properties>,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_context>)>();

  int hc_clCreateCommandQueue(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_context context,
    cl_device_id device,
    int properties,
    ffi.Pointer<cl_command_queue> command_queue,
  ) {
    return _hc_clCreateCommandQueue(
      hashcat_ctx,
      context,
      device,
      properties,
      command_queue,
    );
  }

  late final _hc_clCreateCommandQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              cl_device_id,
              cl_command_queue_properties,
              ffi.Pointer<cl_command_queue>)>>('hc_clCreateCommandQueue');
  late final _hc_clCreateCommandQueue = _hc_clCreateCommandQueuePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_context, cl_device_id, int,
          ffi.Pointer<cl_command_queue>)>();

  int hc_clCreateBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_context context,
    int flags,
    int size,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_mem> mem,
  ) {
    return _hc_clCreateBuffer(
      hashcat_ctx,
      context,
      flags,
      size,
      host_ptr,
      mem,
    );
  }

  late final _hc_clCreateBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              cl_mem_flags,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_mem>)>>('hc_clCreateBuffer');
  late final _hc_clCreateBuffer = _hc_clCreateBufferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_context, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<cl_mem>)>();

  int hc_clCreateProgramWithSource(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_context context,
    int count,
    ffi.Pointer<ffi.Pointer<ffi.Char>> strings,
    ffi.Pointer<ffi.Size> lengths,
    ffi.Pointer<cl_program> program,
  ) {
    return _hc_clCreateProgramWithSource(
      hashcat_ctx,
      context,
      count,
      strings,
      lengths,
      program,
    );
  }

  late final _hc_clCreateProgramWithSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              cl_uint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cl_program>)>>('hc_clCreateProgramWithSource');
  late final _hc_clCreateProgramWithSource =
      _hc_clCreateProgramWithSourcePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cl_program>)>();

  int hc_clCreateProgramWithBinary(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_context context,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Size> lengths,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> binaries,
    ffi.Pointer<cl_int> binary_status,
    ffi.Pointer<cl_program> program,
  ) {
    return _hc_clCreateProgramWithBinary(
      hashcat_ctx,
      context,
      num_devices,
      device_list,
      lengths,
      binaries,
      binary_status,
      program,
    );
  }

  late final _hc_clCreateProgramWithBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<cl_int>,
              ffi.Pointer<cl_program>)>>('hc_clCreateProgramWithBinary');
  late final _hc_clCreateProgramWithBinary =
      _hc_clCreateProgramWithBinaryPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              int,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<cl_int>,
              ffi.Pointer<cl_program>)>();

  int hc_clBuildProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_program program,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> options,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _hc_clBuildProgram(
      hashcat_ctx,
      program,
      num_devices,
      device_list,
      options,
      pfn_notify,
      user_data,
    );
  }

  late final _hc_clBuildProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_program,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('hc_clBuildProgram');
  late final _hc_clBuildProgram = _hc_clBuildProgramPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_program,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int hc_clCompileProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_program program,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> options,
    int num_input_headers,
    ffi.Pointer<cl_program> input_headers,
    ffi.Pointer<ffi.Pointer<ffi.Char>> header_include_names,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _hc_clCompileProgram(
      hashcat_ctx,
      program,
      num_devices,
      device_list,
      options,
      num_input_headers,
      input_headers,
      header_include_names,
      pfn_notify,
      user_data,
    );
  }

  late final _hc_clCompileProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_program,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              cl_uint,
              ffi.Pointer<cl_program>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('hc_clCompileProgram');
  late final _hc_clCompileProgram = _hc_clCompileProgramPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_program,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cl_program>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int hc_clLinkProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_context context,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> options,
    int num_input_programs,
    ffi.Pointer<cl_program> input_programs,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<cl_program> program,
  ) {
    return _hc_clLinkProgram(
      hashcat_ctx,
      context,
      num_devices,
      device_list,
      options,
      num_input_programs,
      input_programs,
      pfn_notify,
      user_data,
      program,
    );
  }

  late final _hc_clLinkProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              cl_uint,
              ffi.Pointer<cl_program>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_program>)>>('hc_clLinkProgram');
  late final _hc_clLinkProgram = _hc_clLinkProgramPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_context,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cl_program>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_program>)>();

  int hc_clCreateKernel(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_program program,
    ffi.Pointer<ffi.Char> kernel_name,
    ffi.Pointer<cl_kernel> kernel,
  ) {
    return _hc_clCreateKernel(
      hashcat_ctx,
      program,
      kernel_name,
      kernel,
    );
  }

  late final _hc_clCreateKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_program,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cl_kernel>)>>('hc_clCreateKernel');
  late final _hc_clCreateKernel = _hc_clCreateKernelPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_program, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cl_kernel>)>();

  int hc_clReleaseMemObject(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_mem mem,
  ) {
    return _hc_clReleaseMemObject(
      hashcat_ctx,
      mem,
    );
  }

  late final _hc_clReleaseMemObjectPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, cl_mem)>>(
      'hc_clReleaseMemObject');
  late final _hc_clReleaseMemObject = _hc_clReleaseMemObjectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_mem)>();

  int hc_clReleaseKernel(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_kernel kernel,
  ) {
    return _hc_clReleaseKernel(
      hashcat_ctx,
      kernel,
    );
  }

  late final _hc_clReleaseKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, cl_kernel)>>('hc_clReleaseKernel');
  late final _hc_clReleaseKernel = _hc_clReleaseKernelPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_kernel)>();

  int hc_clReleaseProgram(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_program program,
  ) {
    return _hc_clReleaseProgram(
      hashcat_ctx,
      program,
    );
  }

  late final _hc_clReleaseProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, cl_program)>>('hc_clReleaseProgram');
  late final _hc_clReleaseProgram = _hc_clReleaseProgramPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_program)>();

  int hc_clReleaseCommandQueue(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
  ) {
    return _hc_clReleaseCommandQueue(
      hashcat_ctx,
      command_queue,
    );
  }

  late final _hc_clReleaseCommandQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              cl_command_queue)>>('hc_clReleaseCommandQueue');
  late final _hc_clReleaseCommandQueue = _hc_clReleaseCommandQueuePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_command_queue)>();

  int hc_clReleaseContext(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_context context,
  ) {
    return _hc_clReleaseContext(
      hashcat_ctx,
      context,
    );
  }

  late final _hc_clReleaseContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, cl_context)>>('hc_clReleaseContext');
  late final _hc_clReleaseContext = _hc_clReleaseContextPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_context)>();

  int hc_clEnqueueMapBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_map,
    int map_flags,
    int offset,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ) {
    return _hc_clEnqueueMapBuffer(
      hashcat_ctx,
      command_queue,
      buffer,
      blocking_map,
      map_flags,
      offset,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
      buf,
    );
  }

  late final _hc_clEnqueueMapBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              cl_bool,
              cl_map_flags,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('hc_clEnqueueMapBuffer');
  late final _hc_clEnqueueMapBuffer = _hc_clEnqueueMapBufferPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int hc_clEnqueueUnmapMemObject(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_command_queue command_queue,
    cl_mem memobj,
    ffi.Pointer<ffi.Void> mapped_ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _hc_clEnqueueUnmapMemObject(
      hashcat_ctx,
      command_queue,
      memobj,
      mapped_ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _hc_clEnqueueUnmapMemObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('hc_clEnqueueUnmapMemObject');
  late final _hc_clEnqueueUnmapMemObject =
      _hc_clEnqueueUnmapMemObjectPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int hc_clGetKernelWorkGroupInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_kernel kernel,
    cl_device_id device,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetKernelWorkGroupInfo(
      hashcat_ctx,
      kernel,
      device,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetKernelWorkGroupInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_kernel,
              cl_device_id,
              cl_kernel_work_group_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetKernelWorkGroupInfo');
  late final _hc_clGetKernelWorkGroupInfo =
      _hc_clGetKernelWorkGroupInfoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, cl_kernel, cl_device_id, int, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clGetProgramBuildInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_program program,
    cl_device_id device,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetProgramBuildInfo(
      hashcat_ctx,
      program,
      device,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetProgramBuildInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_program,
              cl_device_id,
              cl_program_build_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetProgramBuildInfo');
  late final _hc_clGetProgramBuildInfo =
      _hc_clGetProgramBuildInfoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, cl_program, cl_device_id, int,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clGetProgramInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_program program,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetProgramInfo(
      hashcat_ctx,
      program,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetProgramInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_program,
              cl_program_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetProgramInfo');
  late final _hc_clGetProgramInfo = _hc_clGetProgramInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, cl_program, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clWaitForEvents(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int num_events,
    ffi.Pointer<cl_event> event_list,
  ) {
    return _hc_clWaitForEvents(
      hashcat_ctx,
      num_events,
      event_list,
    );
  }

  late final _hc_clWaitForEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, cl_uint,
              ffi.Pointer<cl_event>)>>('hc_clWaitForEvents');
  late final _hc_clWaitForEvents = _hc_clWaitForEventsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<cl_event>)>();

  int hc_clGetEventProfilingInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_event event,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _hc_clGetEventProfilingInfo(
      hashcat_ctx,
      event,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _hc_clGetEventProfilingInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              cl_event,
              cl_profiling_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('hc_clGetEventProfilingInfo');
  late final _hc_clGetEventProfilingInfo =
      _hc_clGetEventProfilingInfoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, cl_event, int, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int hc_clReleaseEvent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    cl_event event,
  ) {
    return _hc_clReleaseEvent(
      hashcat_ctx,
      event,
    );
  }

  late final _hc_clReleaseEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, cl_event)>>('hc_clReleaseEvent');
  late final _hc_clReleaseEvent = _hc_clReleaseEventPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, cl_event)>();

  /// Returns the name of the method specified by a given selector.
  ///
  /// @param sel A pointer of type \c SEL. Pass the selector whose name you wish to determine.
  ///
  /// @return A C string indicating the name of the selector.
  ffi.Pointer<ffi.Char> sel_getName(
    SEL sel,
  ) {
    return _sel_getName(
      sel,
    );
  }

  late final _sel_getNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(SEL)>>(
          'sel_getName');
  late final _sel_getName =
      _sel_getNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(SEL)>();

  /// Registers a method with the Objective-C runtime system, maps the method
  /// name to a selector, and returns the selector value.
  ///
  /// @param str A pointer to a C string. Pass the name of the method you wish to register.
  ///
  /// @return A pointer of type SEL specifying the selector for the named method.
  ///
  /// @note You must register a method name with the Objective-C runtime system to obtain the
  /// method’s selector before you can add the method to a class definition. If the method name
  /// has already been registered, this function simply returns the selector.
  SEL sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_registerName(
      str,
    );
  }

  late final _sel_registerNamePtr =
      _lookup<ffi.NativeFunction<SEL Function(ffi.Pointer<ffi.Char>)>>(
          'sel_registerName');
  late final _sel_registerName =
      _sel_registerNamePtr.asFunction<SEL Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the class name of a given object.
  ///
  /// @param obj An Objective-C object.
  ///
  /// @return The name of the class of which \e obj is an instance.
  ffi.Pointer<ffi.Char> object_getClassName(
    id obj,
  ) {
    return _object_getClassName(
      obj,
    );
  }

  late final _object_getClassNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(id)>>(
          'object_getClassName');
  late final _object_getClassName =
      _object_getClassNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(id)>();

  /// Returns a pointer to any extra bytes allocated with an instance given object.
  ///
  /// @param obj An Objective-C object.
  ///
  /// @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  /// not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  ///
  /// @note This function returns a pointer to any extra bytes allocated with the instance
  /// (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  /// object's ordinary ivars, but may not be adjacent to the last ivar.
  /// @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  /// the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  /// guaranteed, even if the area following the object's last ivar is more aligned than that.
  /// @note In a garbage-collected environment, the memory is scanned conservatively.
  ffi.Pointer<ffi.Void> object_getIndexedIvars(
    id obj,
  ) {
    return _object_getIndexedIvars(
      obj,
    );
  }

  late final _object_getIndexedIvarsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(id)>>(
          'object_getIndexedIvars');
  late final _object_getIndexedIvars = _object_getIndexedIvarsPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(id)>();

  /// Identifies a selector as being valid or invalid.
  ///
  /// @param sel The selector you want to identify.
  ///
  /// @return YES if selector is valid and has a function implementation, NO otherwise.
  ///
  /// @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
  /// a crash.
  bool sel_isMapped(
    SEL sel,
  ) {
    return _sel_isMapped(
      sel,
    );
  }

  late final _sel_isMappedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(SEL)>>('sel_isMapped');
  late final _sel_isMapped = _sel_isMappedPtr.asFunction<bool Function(SEL)>();

  /// Registers a method name with the Objective-C runtime system.
  ///
  /// @param str A pointer to a C string. Pass the name of the method you wish to register.
  ///
  /// @return A pointer of type SEL specifying the selector for the named method.
  ///
  /// @note The implementation of this method is identical to the implementation of \c sel_registerName.
  /// @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
  /// and returned \c NULL if the selector was not found. This was changed for safety, because it was
  /// observed that many of the callers of this function did not check the return value for \c NULL.
  SEL sel_getUid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_getUid(
      str,
    );
  }

  late final _sel_getUidPtr =
      _lookup<ffi.NativeFunction<SEL Function(ffi.Pointer<ffi.Char>)>>(
          'sel_getUid');
  late final _sel_getUid =
      _sel_getUidPtr.asFunction<SEL Function(ffi.Pointer<ffi.Char>)>();

  id objc_retainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_retainedObject(
      obj,
    );
  }

  late final _objc_retainedObjectPtr =
      _lookup<ffi.NativeFunction<id Function(objc_objectptr_t)>>(
          'objc_retainedObject');
  late final _objc_retainedObject =
      _objc_retainedObjectPtr.asFunction<id Function(objc_objectptr_t)>();

  id objc_unretainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_unretainedObject(
      obj,
    );
  }

  late final _objc_unretainedObjectPtr =
      _lookup<ffi.NativeFunction<id Function(objc_objectptr_t)>>(
          'objc_unretainedObject');
  late final _objc_unretainedObject =
      _objc_unretainedObjectPtr.asFunction<id Function(objc_objectptr_t)>();

  objc_objectptr_t objc_unretainedPointer(
    id obj,
  ) {
    return _objc_unretainedPointer(
      obj,
    );
  }

  late final _objc_unretainedPointerPtr =
      _lookup<ffi.NativeFunction<objc_objectptr_t Function(id)>>(
          'objc_unretainedPointer');
  late final _objc_unretainedPointer =
      _objc_unretainedPointerPtr.asFunction<objc_objectptr_t Function(id)>();

  /// Returns a copy of a given object.
  ///
  /// @param obj An Objective-C object.
  /// @param size The size of the object \e obj.
  ///
  /// @return A copy of \e obj.
  id object_copy(
    id obj,
    int size,
  ) {
    return _object_copy(
      obj,
      size,
    );
  }

  late final _object_copyPtr =
      _lookup<ffi.NativeFunction<id Function(id, ffi.Size)>>('object_copy');
  late final _object_copy = _object_copyPtr.asFunction<id Function(id, int)>();

  /// Frees the memory occupied by a given object.
  ///
  /// @param obj An Objective-C object.
  ///
  /// @return nil
  id object_dispose(
    id obj,
  ) {
    return _object_dispose(
      obj,
    );
  }

  late final _object_disposePtr =
      _lookup<ffi.NativeFunction<id Function(id)>>('object_dispose');
  late final _object_dispose = _object_disposePtr.asFunction<id Function(id)>();

  /// Returns the class of an object.
  ///
  /// @param obj The object you want to inspect.
  ///
  /// @return The class object of which \e object is an instance,
  /// or \c Nil if \e object is \c nil.
  Class object_getClass(
    id obj,
  ) {
    return _object_getClass(
      obj,
    );
  }

  late final _object_getClassPtr =
      _lookup<ffi.NativeFunction<Class Function(id)>>('object_getClass');
  late final _object_getClass =
      _object_getClassPtr.asFunction<Class Function(id)>();

  /// Sets the class of an object.
  ///
  /// @param obj The object to modify.
  /// @param cls A class object.
  ///
  /// @return The previous value of \e object's class, or \c Nil if \e object is \c nil.
  Class object_setClass(
    id obj,
    Class cls,
  ) {
    return _object_setClass(
      obj,
      cls,
    );
  }

  late final _object_setClassPtr =
      _lookup<ffi.NativeFunction<Class Function(id, Class)>>('object_setClass');
  late final _object_setClass =
      _object_setClassPtr.asFunction<Class Function(id, Class)>();

  /// Returns whether an object is a class object.
  ///
  /// @param obj An Objective-C object.
  ///
  /// @return true if the object is a class or metaclass, false otherwise.
  bool object_isClass(
    id obj,
  ) {
    return _object_isClass(
      obj,
    );
  }

  late final _object_isClassPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(id)>>('object_isClass');
  late final _object_isClass =
      _object_isClassPtr.asFunction<bool Function(id)>();

  /// Reads the value of an instance variable in an object.
  ///
  /// @param obj The object containing the instance variable whose value you want to read.
  /// @param ivar The Ivar describing the instance variable whose value you want to read.
  ///
  /// @return The value of the instance variable specified by \e ivar, or \c nil if \e object is \c nil.
  ///
  /// @note \c object_getIvar is faster than \c object_getInstanceVariable if the Ivar
  /// for the instance variable is already known.
  id object_getIvar(
    id obj,
    Ivar ivar,
  ) {
    return _object_getIvar(
      obj,
      ivar,
    );
  }

  late final _object_getIvarPtr =
      _lookup<ffi.NativeFunction<id Function(id, Ivar)>>('object_getIvar');
  late final _object_getIvar =
      _object_getIvarPtr.asFunction<id Function(id, Ivar)>();

  /// Sets the value of an instance variable in an object.
  ///
  /// @param obj The object containing the instance variable whose value you want to set.
  /// @param ivar The Ivar describing the instance variable whose value you want to set.
  /// @param value The new value for the instance variable.
  ///
  /// @note Instance variables with known memory management (such as ARC strong and weak)
  /// use that memory management. Instance variables with unknown memory management
  /// are assigned as if they were unsafe_unretained.
  /// @note \c object_setIvar is faster than \c object_setInstanceVariable if the Ivar
  /// for the instance variable is already known.
  void object_setIvar(
    id obj,
    Ivar ivar,
    id value,
  ) {
    return _object_setIvar(
      obj,
      ivar,
      value,
    );
  }

  late final _object_setIvarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(id, Ivar, id)>>(
          'object_setIvar');
  late final _object_setIvar =
      _object_setIvarPtr.asFunction<void Function(id, Ivar, id)>();

  /// Sets the value of an instance variable in an object.
  ///
  /// @param obj The object containing the instance variable whose value you want to set.
  /// @param ivar The Ivar describing the instance variable whose value you want to set.
  /// @param value The new value for the instance variable.
  ///
  /// @note Instance variables with known memory management (such as ARC strong and weak)
  /// use that memory management. Instance variables with unknown memory management
  /// are assigned as if they were strong.
  /// @note \c object_setIvar is faster than \c object_setInstanceVariable if the Ivar
  /// for the instance variable is already known.
  void object_setIvarWithStrongDefault(
    id obj,
    Ivar ivar,
    id value,
  ) {
    return _object_setIvarWithStrongDefault(
      obj,
      ivar,
      value,
    );
  }

  late final _object_setIvarWithStrongDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(id, Ivar, id)>>(
          'object_setIvarWithStrongDefault');
  late final _object_setIvarWithStrongDefault =
      _object_setIvarWithStrongDefaultPtr
          .asFunction<void Function(id, Ivar, id)>();

  /// Changes the value of an instance variable of a class instance.
  ///
  /// @param obj A pointer to an instance of a class. Pass the object containing
  /// the instance variable whose value you wish to modify.
  /// @param name A C string. Pass the name of the instance variable whose value you wish to modify.
  /// @param value The new value for the instance variable.
  ///
  /// @return A pointer to the \c Ivar data structure that defines the type and
  /// name of the instance variable specified by \e name.
  ///
  /// @note Instance variables with known memory management (such as ARC strong and weak)
  /// use that memory management. Instance variables with unknown memory management
  /// are assigned as if they were unsafe_unretained.
  Ivar object_setInstanceVariable(
    id obj,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _object_setInstanceVariable(
      obj,
      name,
      value,
    );
  }

  late final _object_setInstanceVariablePtr = _lookup<
      ffi.NativeFunction<
          Ivar Function(id, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('object_setInstanceVariable');
  late final _object_setInstanceVariable =
      _object_setInstanceVariablePtr.asFunction<
          Ivar Function(id, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// Changes the value of an instance variable of a class instance.
  ///
  /// @param obj A pointer to an instance of a class. Pass the object containing
  /// the instance variable whose value you wish to modify.
  /// @param name A C string. Pass the name of the instance variable whose value you wish to modify.
  /// @param value The new value for the instance variable.
  ///
  /// @return A pointer to the \c Ivar data structure that defines the type and
  /// name of the instance variable specified by \e name.
  ///
  /// @note Instance variables with known memory management (such as ARC strong and weak)
  /// use that memory management. Instance variables with unknown memory management
  /// are assigned as if they were strong.
  Ivar object_setInstanceVariableWithStrongDefault(
    id obj,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _object_setInstanceVariableWithStrongDefault(
      obj,
      name,
      value,
    );
  }

  late final _object_setInstanceVariableWithStrongDefaultPtr = _lookup<
          ffi.NativeFunction<
              Ivar Function(id, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'object_setInstanceVariableWithStrongDefault');
  late final _object_setInstanceVariableWithStrongDefault =
      _object_setInstanceVariableWithStrongDefaultPtr.asFunction<
          Ivar Function(id, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// Obtains the value of an instance variable of a class instance.
  ///
  /// @param obj A pointer to an instance of a class. Pass the object containing
  /// the instance variable whose value you wish to obtain.
  /// @param name A C string. Pass the name of the instance variable whose value you wish to obtain.
  /// @param outValue On return, contains a pointer to the value of the instance variable.
  ///
  /// @return A pointer to the \c Ivar data structure that defines the type and name of
  /// the instance variable specified by \e name.
  Ivar object_getInstanceVariable(
    id obj,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Void>> outValue,
  ) {
    return _object_getInstanceVariable(
      obj,
      name,
      outValue,
    );
  }

  late final _object_getInstanceVariablePtr = _lookup<
          ffi.NativeFunction<
              Ivar Function(id, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'object_getInstanceVariable');
  late final _object_getInstanceVariable =
      _object_getInstanceVariablePtr.asFunction<
          Ivar Function(
              id, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Returns the class definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The Class object for the named class, or \c nil
  /// if the class is not registered with the Objective-C runtime.
  ///
  /// @note \c objc_getClass is different from \c objc_lookUpClass in that if the class
  /// is not registered, \c objc_getClass calls the class handler callback and then checks
  /// a second time to see whether the class is registered. \c objc_lookUpClass does
  /// not call the class handler callback.
  ///
  /// @warning Earlier implementations of this function (prior to OS X v10.0)
  /// terminate the program if the class does not exist.
  Class objc_getClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_getClass(
      name,
    );
  }

  late final _objc_getClassPtr =
      _lookup<ffi.NativeFunction<Class Function(ffi.Pointer<ffi.Char>)>>(
          'objc_getClass');
  late final _objc_getClass =
      _objc_getClassPtr.asFunction<Class Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the metaclass definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The \c Class object for the metaclass of the named class, or \c nil if the class
  /// is not registered with the Objective-C runtime.
  ///
  /// @note If the definition for the named class is not registered, this function calls the class handler
  /// callback and then checks a second time to see if the class is registered. However, every class
  /// definition must have a valid metaclass definition, and so the metaclass definition is always returned,
  /// whether it’s valid or not.
  Class objc_getMetaClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_getMetaClass(
      name,
    );
  }

  late final _objc_getMetaClassPtr =
      _lookup<ffi.NativeFunction<Class Function(ffi.Pointer<ffi.Char>)>>(
          'objc_getMetaClass');
  late final _objc_getMetaClass =
      _objc_getMetaClassPtr.asFunction<Class Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the class definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The Class object for the named class, or \c nil if the class
  /// is not registered with the Objective-C runtime.
  ///
  /// @note \c objc_getClass is different from this function in that if the class is not
  /// registered, \c objc_getClass calls the class handler callback and then checks a second
  /// time to see whether the class is registered. This function does not call the class handler callback.
  Class objc_lookUpClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_lookUpClass(
      name,
    );
  }

  late final _objc_lookUpClassPtr =
      _lookup<ffi.NativeFunction<Class Function(ffi.Pointer<ffi.Char>)>>(
          'objc_lookUpClass');
  late final _objc_lookUpClass =
      _objc_lookUpClassPtr.asFunction<Class Function(ffi.Pointer<ffi.Char>)>();

  /// Returns the class definition of a specified class.
  ///
  /// @param name The name of the class to look up.
  ///
  /// @return The Class object for the named class.
  ///
  /// @note This function is the same as \c objc_getClass, but kills the process if the class is not found.
  /// @note This function is used by ZeroLink, where failing to find a class would be a compile-time link error without ZeroLink.
  Class objc_getRequiredClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_getRequiredClass(
      name,
    );
  }

  late final _objc_getRequiredClassPtr =
      _lookup<ffi.NativeFunction<Class Function(ffi.Pointer<ffi.Char>)>>(
          'objc_getRequiredClass');
  late final _objc_getRequiredClass = _objc_getRequiredClassPtr
      .asFunction<Class Function(ffi.Pointer<ffi.Char>)>();

  /// Obtains the list of registered class definitions.
  ///
  /// @param buffer An array of \c Class values. On output, each \c Class value points to
  /// one class definition, up to either \e bufferCount or the total number of registered classes,
  /// whichever is less. You can pass \c NULL to obtain the total number of registered class
  /// definitions without actually retrieving any class definitions.
  /// @param bufferCount An integer value. Pass the number of pointers for which you have allocated space
  /// in \e buffer. On return, this function fills in only this number of elements. If this number is less
  /// than the number of registered classes, this function returns an arbitrary subset of the registered classes.
  ///
  /// @return An integer value indicating the total number of registered classes.
  ///
  /// @note The Objective-C runtime library automatically registers all the classes defined in your source code.
  /// You can create class definitions at runtime and register them with the \c objc_addClass function.
  ///
  /// @warning You cannot assume that class objects you get from this function are classes that inherit from \c NSObject,
  /// so you cannot safely call any methods on such classes without detecting that the method is implemented first.
  int objc_getClassList(
    ffi.Pointer<Class> buffer,
    int bufferCount,
  ) {
    return _objc_getClassList(
      buffer,
      bufferCount,
    );
  }

  late final _objc_getClassListPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Class>, ffi.Int)>>(
      'objc_getClassList');
  late final _objc_getClassList =
      _objc_getClassListPtr.asFunction<int Function(ffi.Pointer<Class>, int)>();

  /// Creates and returns a list of pointers to all registered class definitions.
  ///
  /// @param outCount An integer pointer used to store the number of classes returned by
  /// this function in the list. It can be \c nil.
  ///
  /// @return A nil terminated array of classes. It must be freed with \c free().
  ///
  /// @see objc_getClassList
  ffi.Pointer<Class> objc_copyClassList(
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyClassList(
      outCount,
    );
  }

  late final _objc_copyClassListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Class> Function(
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyClassList');
  late final _objc_copyClassList = _objc_copyClassListPtr
      .asFunction<ffi.Pointer<Class> Function(ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns the name of a class.
  ///
  /// @param cls A class object.
  ///
  /// @return The name of the class, or the empty string if \e cls is \c Nil.
  ffi.Pointer<ffi.Char> class_getName(
    Class cls,
  ) {
    return _class_getName(
      cls,
    );
  }

  late final _class_getNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Class)>>(
          'class_getName');
  late final _class_getName =
      _class_getNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(Class)>();

  /// Returns a Boolean value that indicates whether a class object is a metaclass.
  ///
  /// @param cls A class object.
  ///
  /// @return \c YES if \e cls is a metaclass, \c NO if \e cls is a non-meta class,
  /// \c NO if \e cls is \c Nil.
  bool class_isMetaClass(
    Class cls,
  ) {
    return _class_isMetaClass(
      cls,
    );
  }

  late final _class_isMetaClassPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Class)>>(
          'class_isMetaClass');
  late final _class_isMetaClass =
      _class_isMetaClassPtr.asFunction<bool Function(Class)>();

  /// Returns the superclass of a class.
  ///
  /// @param cls A class object.
  ///
  /// @return The superclass of the class, or \c Nil if
  /// \e cls is a root class, or \c Nil if \e cls is \c Nil.
  ///
  /// @note You should usually use \c NSObject's \c superclass method instead of this function.
  Class class_getSuperclass(
    Class cls,
  ) {
    return _class_getSuperclass(
      cls,
    );
  }

  late final _class_getSuperclassPtr =
      _lookup<ffi.NativeFunction<Class Function(Class)>>('class_getSuperclass');
  late final _class_getSuperclass =
      _class_getSuperclassPtr.asFunction<Class Function(Class)>();

  /// Sets the superclass of a given class.
  ///
  /// @param cls The class whose superclass you want to set.
  /// @param newSuper The new superclass for cls.
  ///
  /// @return The old superclass for cls.
  ///
  /// @warning You should not use this function.
  Class class_setSuperclass(
    Class cls,
    Class newSuper,
  ) {
    return _class_setSuperclass(
      cls,
      newSuper,
    );
  }

  late final _class_setSuperclassPtr =
      _lookup<ffi.NativeFunction<Class Function(Class, Class)>>(
          'class_setSuperclass');
  late final _class_setSuperclass =
      _class_setSuperclassPtr.asFunction<Class Function(Class, Class)>();

  /// Returns the version number of a class definition.
  ///
  /// @param cls A pointer to a \c Class data structure. Pass
  /// the class definition for which you wish to obtain the version.
  ///
  /// @return An integer indicating the version number of the class definition.
  ///
  /// @see class_setVersion
  int class_getVersion(
    Class cls,
  ) {
    return _class_getVersion(
      cls,
    );
  }

  late final _class_getVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Class)>>('class_getVersion');
  late final _class_getVersion =
      _class_getVersionPtr.asFunction<int Function(Class)>();

  /// Sets the version number of a class definition.
  ///
  /// @param cls A pointer to an Class data structure.
  /// Pass the class definition for which you wish to set the version.
  /// @param version An integer. Pass the new version number of the class definition.
  ///
  /// @note You can use the version number of the class definition to provide versioning of the
  /// interface that your class represents to other classes. This is especially useful for object
  /// serialization (that is, archiving of the object in a flattened form), where it is important to
  /// recognize changes to the layout of the instance variables in different class-definition versions.
  /// @note Classes derived from the Foundation framework \c NSObject class can set the class-definition
  /// version number using the \c setVersion: class method, which is implemented using the \c class_setVersion function.
  void class_setVersion(
    Class cls,
    int version,
  ) {
    return _class_setVersion(
      cls,
      version,
    );
  }

  late final _class_setVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Class, ffi.Int)>>(
          'class_setVersion');
  late final _class_setVersion =
      _class_setVersionPtr.asFunction<void Function(Class, int)>();

  /// Returns the size of instances of a class.
  ///
  /// @param cls A class object.
  ///
  /// @return The size in bytes of instances of the class \e cls, or \c 0 if \e cls is \c Nil.
  int class_getInstanceSize(
    Class cls,
  ) {
    return _class_getInstanceSize(
      cls,
    );
  }

  late final _class_getInstanceSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(Class)>>(
          'class_getInstanceSize');
  late final _class_getInstanceSize =
      _class_getInstanceSizePtr.asFunction<int Function(Class)>();

  /// Returns the \c Ivar for a specified instance variable of a given class.
  ///
  /// @param cls The class whose instance variable you wish to obtain.
  /// @param name The name of the instance variable definition to obtain.
  ///
  /// @return A pointer to an \c Ivar data structure containing information about
  /// the instance variable specified by \e name.
  Ivar class_getInstanceVariable(
    Class cls,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _class_getInstanceVariable(
      cls,
      name,
    );
  }

  late final _class_getInstanceVariablePtr =
      _lookup<ffi.NativeFunction<Ivar Function(Class, ffi.Pointer<ffi.Char>)>>(
          'class_getInstanceVariable');
  late final _class_getInstanceVariable = _class_getInstanceVariablePtr
      .asFunction<Ivar Function(Class, ffi.Pointer<ffi.Char>)>();

  /// Returns the Ivar for a specified class variable of a given class.
  ///
  /// @param cls The class definition whose class variable you wish to obtain.
  /// @param name The name of the class variable definition to obtain.
  ///
  /// @return A pointer to an \c Ivar data structure containing information about the class variable specified by \e name.
  Ivar class_getClassVariable(
    Class cls,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _class_getClassVariable(
      cls,
      name,
    );
  }

  late final _class_getClassVariablePtr =
      _lookup<ffi.NativeFunction<Ivar Function(Class, ffi.Pointer<ffi.Char>)>>(
          'class_getClassVariable');
  late final _class_getClassVariable = _class_getClassVariablePtr
      .asFunction<Ivar Function(Class, ffi.Pointer<ffi.Char>)>();

  /// Describes the instance variables declared by a class.
  ///
  /// @param cls The class to inspect.
  /// @param outCount On return, contains the length of the returned array.
  /// If outCount is NULL, the length is not returned.
  ///
  /// @return An array of pointers of type Ivar describing the instance variables declared by the class.
  /// Any instance variables declared by superclasses are not included. The array contains *outCount
  /// pointers followed by a NULL terminator. You must free the array with free().
  ///
  /// If the class declares no instance variables, or cls is Nil, NULL is returned and *outCount is 0.
  ffi.Pointer<Ivar> class_copyIvarList(
    Class cls,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _class_copyIvarList(
      cls,
      outCount,
    );
  }

  late final _class_copyIvarListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Ivar> Function(
              Class, ffi.Pointer<ffi.UnsignedInt>)>>('class_copyIvarList');
  late final _class_copyIvarList = _class_copyIvarListPtr.asFunction<
      ffi.Pointer<Ivar> Function(Class, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a specified instance method for a given class.
  ///
  /// @param cls The class you want to inspect.
  /// @param name The selector of the method you want to retrieve.
  ///
  /// @return The method that corresponds to the implementation of the selector specified by
  /// \e name for the class specified by \e cls, or \c NULL if the specified class or its
  /// superclasses do not contain an instance method with the specified selector.
  ///
  /// @note This function searches superclasses for implementations, whereas \c class_copyMethodList does not.
  Method class_getInstanceMethod(
    Class cls,
    SEL name,
  ) {
    return _class_getInstanceMethod(
      cls,
      name,
    );
  }

  late final _class_getInstanceMethodPtr =
      _lookup<ffi.NativeFunction<Method Function(Class, SEL)>>(
          'class_getInstanceMethod');
  late final _class_getInstanceMethod =
      _class_getInstanceMethodPtr.asFunction<Method Function(Class, SEL)>();

  /// Returns a pointer to the data structure describing a given class method for a given class.
  ///
  /// @param cls A pointer to a class definition. Pass the class that contains the method you want to retrieve.
  /// @param name A pointer of type \c SEL. Pass the selector of the method you want to retrieve.
  ///
  /// @return A pointer to the \c Method data structure that corresponds to the implementation of the
  /// selector specified by aSelector for the class specified by aClass, or NULL if the specified
  /// class or its superclasses do not contain an instance method with the specified selector.
  ///
  /// @note Note that this function searches superclasses for implementations,
  /// whereas \c class_copyMethodList does not.
  Method class_getClassMethod(
    Class cls,
    SEL name,
  ) {
    return _class_getClassMethod(
      cls,
      name,
    );
  }

  late final _class_getClassMethodPtr =
      _lookup<ffi.NativeFunction<Method Function(Class, SEL)>>(
          'class_getClassMethod');
  late final _class_getClassMethod =
      _class_getClassMethodPtr.asFunction<Method Function(Class, SEL)>();

  /// Returns the function pointer that would be called if a
  /// particular message were sent to an instance of a class.
  ///
  /// @param cls The class you want to inspect.
  /// @param name A selector.
  ///
  /// @return The function pointer that would be called if \c [object name] were called
  /// with an instance of the class, or \c NULL if \e cls is \c Nil.
  ///
  /// @note \c class_getMethodImplementation may be faster than \c method_getImplementation(class_getInstanceMethod(cls, name)).
  /// @note The function pointer returned may be a function internal to the runtime instead of
  /// an actual method implementation. For example, if instances of the class do not respond to
  /// the selector, the function pointer returned will be part of the runtime's message forwarding machinery.
  IMP class_getMethodImplementation(
    Class cls,
    SEL name,
  ) {
    return _class_getMethodImplementation(
      cls,
      name,
    );
  }

  late final _class_getMethodImplementationPtr =
      _lookup<ffi.NativeFunction<IMP Function(Class, SEL)>>(
          'class_getMethodImplementation');
  late final _class_getMethodImplementation =
      _class_getMethodImplementationPtr.asFunction<IMP Function(Class, SEL)>();

  /// Returns the function pointer that would be called if a particular
  /// message were sent to an instance of a class.
  ///
  /// @param cls The class you want to inspect.
  /// @param name A selector.
  ///
  /// @return The function pointer that would be called if \c [object name] were called
  /// with an instance of the class, or \c NULL if \e cls is \c Nil.
  IMP class_getMethodImplementation_stret(
    Class cls,
    SEL name,
  ) {
    return _class_getMethodImplementation_stret(
      cls,
      name,
    );
  }

  late final _class_getMethodImplementation_stretPtr =
      _lookup<ffi.NativeFunction<IMP Function(Class, SEL)>>(
          'class_getMethodImplementation_stret');
  late final _class_getMethodImplementation_stret =
      _class_getMethodImplementation_stretPtr
          .asFunction<IMP Function(Class, SEL)>();

  /// Returns a Boolean value that indicates whether instances of a class respond to a particular selector.
  ///
  /// @param cls The class you want to inspect.
  /// @param sel A selector.
  ///
  /// @return \c YES if instances of the class respond to the selector, otherwise \c NO.
  ///
  /// @note You should usually use \c NSObject's \c respondsToSelector: or \c instancesRespondToSelector:
  /// methods instead of this function.
  bool class_respondsToSelector(
    Class cls,
    SEL sel,
  ) {
    return _class_respondsToSelector(
      cls,
      sel,
    );
  }

  late final _class_respondsToSelectorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Class, SEL)>>(
          'class_respondsToSelector');
  late final _class_respondsToSelector =
      _class_respondsToSelectorPtr.asFunction<bool Function(Class, SEL)>();

  /// Describes the instance methods implemented by a class.
  ///
  /// @param cls The class you want to inspect.
  /// @param outCount On return, contains the length of the returned array.
  /// If outCount is NULL, the length is not returned.
  ///
  /// @return An array of pointers of type Method describing the instance methods
  /// implemented by the class—any instance methods implemented by superclasses are not included.
  /// The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().
  ///
  /// If cls implements no instance methods, or cls is Nil, returns NULL and *outCount is 0.
  ///
  /// @note To get the class methods of a class, use \c class_copyMethodList(object_getClass(cls), &count).
  /// @note To get the implementations of methods that may be implemented by superclasses,
  /// use \c class_getInstanceMethod or \c class_getClassMethod.
  ffi.Pointer<Method> class_copyMethodList(
    Class cls,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _class_copyMethodList(
      cls,
      outCount,
    );
  }

  late final _class_copyMethodListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Method> Function(
              Class, ffi.Pointer<ffi.UnsignedInt>)>>('class_copyMethodList');
  late final _class_copyMethodList = _class_copyMethodListPtr.asFunction<
      ffi.Pointer<Method> Function(Class, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a Boolean value that indicates whether a class conforms to a given protocol.
  ///
  /// @param cls The class you want to inspect.
  /// @param protocol A protocol.
  ///
  /// @return YES if cls conforms to protocol, otherwise NO.
  ///
  /// @note You should usually use NSObject's conformsToProtocol: method instead of this function.
  bool class_conformsToProtocol(
    Class cls,
    ffi.Pointer<Protocol> protocol,
  ) {
    return _class_conformsToProtocol(
      cls,
      protocol,
    );
  }

  late final _class_conformsToProtocolPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Class, ffi.Pointer<Protocol>)>>(
      'class_conformsToProtocol');
  late final _class_conformsToProtocol = _class_conformsToProtocolPtr
      .asFunction<bool Function(Class, ffi.Pointer<Protocol>)>();

  /// Describes the protocols adopted by a class.
  ///
  /// @param cls The class you want to inspect.
  /// @param outCount On return, contains the length of the returned array.
  /// If outCount is NULL, the length is not returned.
  ///
  /// @return An array of pointers of type Protocol* describing the protocols adopted
  /// by the class. Any protocols adopted by superclasses or other protocols are not included.
  /// The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().
  ///
  /// If cls adopts no protocols, or cls is Nil, returns NULL and *outCount is 0.
  ffi.Pointer<ffi.Pointer<Protocol>> class_copyProtocolList(
    Class cls,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _class_copyProtocolList(
      cls,
      outCount,
    );
  }

  late final _class_copyProtocolListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<Protocol>> Function(
              Class, ffi.Pointer<ffi.UnsignedInt>)>>('class_copyProtocolList');
  late final _class_copyProtocolList = _class_copyProtocolListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<Protocol>> Function(
          Class, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a property with a given name of a given class.
  ///
  /// @param cls The class you want to inspect.
  /// @param name The name of the property you want to inspect.
  ///
  /// @return A pointer of type \c objc_property_t describing the property, or
  /// \c NULL if the class does not declare a property with that name,
  /// or \c NULL if \e cls is \c Nil.
  objc_property_t class_getProperty(
    Class cls,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _class_getProperty(
      cls,
      name,
    );
  }

  late final _class_getPropertyPtr = _lookup<
      ffi.NativeFunction<
          objc_property_t Function(
              Class, ffi.Pointer<ffi.Char>)>>('class_getProperty');
  late final _class_getProperty = _class_getPropertyPtr
      .asFunction<objc_property_t Function(Class, ffi.Pointer<ffi.Char>)>();

  /// Describes the properties declared by a class.
  ///
  /// @param cls The class you want to inspect.
  /// @param outCount On return, contains the length of the returned array.
  /// If \e outCount is \c NULL, the length is not returned.
  ///
  /// @return An array of pointers of type \c objc_property_t describing the properties
  /// declared by the class. Any properties declared by superclasses are not included.
  /// The array contains \c *outCount pointers followed by a \c NULL terminator. You must free the array with \c free().
  ///
  /// If \e cls declares no properties, or \e cls is \c Nil, returns \c NULL and \c *outCount is \c 0.
  ffi.Pointer<objc_property_t> class_copyPropertyList(
    Class cls,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _class_copyPropertyList(
      cls,
      outCount,
    );
  }

  late final _class_copyPropertyListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc_property_t> Function(
              Class, ffi.Pointer<ffi.UnsignedInt>)>>('class_copyPropertyList');
  late final _class_copyPropertyList = _class_copyPropertyListPtr.asFunction<
      ffi.Pointer<objc_property_t> Function(
          Class, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a description of the \c Ivar layout for a given class.
  ///
  /// @param cls The class to inspect.
  ///
  /// @return A description of the \c Ivar layout for \e cls.
  ffi.Pointer<ffi.Uint8> class_getIvarLayout(
    Class cls,
  ) {
    return _class_getIvarLayout(
      cls,
    );
  }

  late final _class_getIvarLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(Class)>>(
          'class_getIvarLayout');
  late final _class_getIvarLayout = _class_getIvarLayoutPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(Class)>();

  /// Returns a description of the layout of weak Ivars for a given class.
  ///
  /// @param cls The class to inspect.
  ///
  /// @return A description of the layout of the weak \c Ivars for \e cls.
  ffi.Pointer<ffi.Uint8> class_getWeakIvarLayout(
    Class cls,
  ) {
    return _class_getWeakIvarLayout(
      cls,
    );
  }

  late final _class_getWeakIvarLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(Class)>>(
          'class_getWeakIvarLayout');
  late final _class_getWeakIvarLayout = _class_getWeakIvarLayoutPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(Class)>();

  /// Adds a new method to a class with a given name and implementation.
  ///
  /// @param cls The class to which to add a method.
  /// @param name A selector that specifies the name of the method being added.
  /// @param imp A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.
  /// @param types An array of characters that describe the types of the arguments to the method.
  ///
  /// @return YES if the method was added successfully, otherwise NO
  /// (for example, the class already contains a method implementation with that name).
  ///
  /// @note class_addMethod will add an override of a superclass's implementation,
  /// but will not replace an existing implementation in this class.
  /// To change an existing implementation, use method_setImplementation.
  bool class_addMethod(
    Class cls,
    SEL name,
    IMP imp,
    ffi.Pointer<ffi.Char> types,
  ) {
    return _class_addMethod(
      cls,
      name,
      imp,
      types,
    );
  }

  late final _class_addMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              Class, SEL, IMP, ffi.Pointer<ffi.Char>)>>('class_addMethod');
  late final _class_addMethod = _class_addMethodPtr
      .asFunction<bool Function(Class, SEL, IMP, ffi.Pointer<ffi.Char>)>();

  /// Replaces the implementation of a method for a given class.
  ///
  /// @param cls The class you want to modify.
  /// @param name A selector that identifies the method whose implementation you want to replace.
  /// @param imp The new implementation for the method identified by name for the class identified by cls.
  /// @param types An array of characters that describe the types of the arguments to the method.
  /// Since the function must take at least two arguments—self and _cmd, the second and third characters
  /// must be “@:” (the first character is the return type).
  ///
  /// @return The previous implementation of the method identified by \e name for the class identified by \e cls.
  ///
  /// @note This function behaves in two different ways:
  /// - If the method identified by \e name does not yet exist, it is added as if \c class_addMethod were called.
  /// The type encoding specified by \e types is used as given.
  /// - If the method identified by \e name does exist, its \c IMP is replaced as if \c method_setImplementation were called.
  /// The type encoding specified by \e types is ignored.
  IMP class_replaceMethod(
    Class cls,
    SEL name,
    IMP imp,
    ffi.Pointer<ffi.Char> types,
  ) {
    return _class_replaceMethod(
      cls,
      name,
      imp,
      types,
    );
  }

  late final _class_replaceMethodPtr = _lookup<
      ffi.NativeFunction<
          IMP Function(
              Class, SEL, IMP, ffi.Pointer<ffi.Char>)>>('class_replaceMethod');
  late final _class_replaceMethod = _class_replaceMethodPtr
      .asFunction<IMP Function(Class, SEL, IMP, ffi.Pointer<ffi.Char>)>();

  /// Adds a new instance variable to a class.
  ///
  /// @return YES if the instance variable was added successfully, otherwise NO
  /// (for example, the class already contains an instance variable with that name).
  ///
  /// @note This function may only be called after objc_allocateClassPair and before objc_registerClassPair.
  /// Adding an instance variable to an existing class is not supported.
  /// @note The class must not be a metaclass. Adding an instance variable to a metaclass is not supported.
  /// @note The instance variable's minimum alignment in bytes is 1<<align. The minimum alignment of an instance
  /// variable depends on the ivar's type and the machine architecture.
  /// For variables of any pointer type, pass log2(sizeof(pointer_type)).
  bool class_addIvar(
    Class cls,
    ffi.Pointer<ffi.Char> name,
    int size,
    int alignment,
    ffi.Pointer<ffi.Char> types,
  ) {
    return _class_addIvar(
      cls,
      name,
      size,
      alignment,
      types,
    );
  }

  late final _class_addIvarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Class, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Uint8,
              ffi.Pointer<ffi.Char>)>>('class_addIvar');
  late final _class_addIvar = _class_addIvarPtr.asFunction<
      bool Function(
          Class, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  /// Adds a protocol to a class.
  ///
  /// @param cls The class to modify.
  /// @param protocol The protocol to add to \e cls.
  ///
  /// @return \c YES if the method was added successfully, otherwise \c NO
  /// (for example, the class already conforms to that protocol).
  bool class_addProtocol(
    Class cls,
    ffi.Pointer<Protocol> protocol,
  ) {
    return _class_addProtocol(
      cls,
      protocol,
    );
  }

  late final _class_addProtocolPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Class, ffi.Pointer<Protocol>)>>(
      'class_addProtocol');
  late final _class_addProtocol = _class_addProtocolPtr
      .asFunction<bool Function(Class, ffi.Pointer<Protocol>)>();

  /// Adds a property to a class.
  ///
  /// @param cls The class to modify.
  /// @param name The name of the property.
  /// @param attributes An array of property attributes.
  /// @param attributeCount The number of attributes in \e attributes.
  ///
  /// @return \c YES if the property was added successfully, otherwise \c NO
  /// (for example, the class already has that property).
  bool class_addProperty(
    Class cls,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<objc_property_attribute_t> attributes,
    int attributeCount,
  ) {
    return _class_addProperty(
      cls,
      name,
      attributes,
      attributeCount,
    );
  }

  late final _class_addPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              Class,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<objc_property_attribute_t>,
              ffi.UnsignedInt)>>('class_addProperty');
  late final _class_addProperty = _class_addPropertyPtr.asFunction<
      bool Function(Class, ffi.Pointer<ffi.Char>,
          ffi.Pointer<objc_property_attribute_t>, int)>();

  /// Replace a property of a class.
  ///
  /// @param cls The class to modify.
  /// @param name The name of the property.
  /// @param attributes An array of property attributes.
  /// @param attributeCount The number of attributes in \e attributes.
  void class_replaceProperty(
    Class cls,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<objc_property_attribute_t> attributes,
    int attributeCount,
  ) {
    return _class_replaceProperty(
      cls,
      name,
      attributes,
      attributeCount,
    );
  }

  late final _class_replacePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Class,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<objc_property_attribute_t>,
              ffi.UnsignedInt)>>('class_replaceProperty');
  late final _class_replaceProperty = _class_replacePropertyPtr.asFunction<
      void Function(Class, ffi.Pointer<ffi.Char>,
          ffi.Pointer<objc_property_attribute_t>, int)>();

  /// Sets the Ivar layout for a given class.
  ///
  /// @param cls The class to modify.
  /// @param layout The layout of the \c Ivars for \e cls.
  void class_setIvarLayout(
    Class cls,
    ffi.Pointer<ffi.Uint8> layout,
  ) {
    return _class_setIvarLayout(
      cls,
      layout,
    );
  }

  late final _class_setIvarLayoutPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Class, ffi.Pointer<ffi.Uint8>)>>(
      'class_setIvarLayout');
  late final _class_setIvarLayout = _class_setIvarLayoutPtr
      .asFunction<void Function(Class, ffi.Pointer<ffi.Uint8>)>();

  /// Sets the layout for weak Ivars for a given class.
  ///
  /// @param cls The class to modify.
  /// @param layout The layout of the weak Ivars for \e cls.
  void class_setWeakIvarLayout(
    Class cls,
    ffi.Pointer<ffi.Uint8> layout,
  ) {
    return _class_setWeakIvarLayout(
      cls,
      layout,
    );
  }

  late final _class_setWeakIvarLayoutPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Class, ffi.Pointer<ffi.Uint8>)>>(
      'class_setWeakIvarLayout');
  late final _class_setWeakIvarLayout = _class_setWeakIvarLayoutPtr
      .asFunction<void Function(Class, ffi.Pointer<ffi.Uint8>)>();

  /// Used by CoreFoundation's toll-free bridging.
  /// Return the id of the named class.
  ///
  /// @return The id of the named class, or an uninitialized class
  /// structure that will be used for the class when and if it does
  /// get loaded.
  ///
  /// @warning Do not call this function yourself.
  Class objc_getFutureClass(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_getFutureClass(
      name,
    );
  }

  late final _objc_getFutureClassPtr =
      _lookup<ffi.NativeFunction<Class Function(ffi.Pointer<ffi.Char>)>>(
          'objc_getFutureClass');
  late final _objc_getFutureClass = _objc_getFutureClassPtr
      .asFunction<Class Function(ffi.Pointer<ffi.Char>)>();

  /// Creates an instance of a class, allocating memory for the class in the
  /// default malloc memory zone.
  ///
  /// @param cls The class that you wish to allocate an instance of.
  /// @param extraBytes An integer indicating the number of extra bytes to allocate.
  /// The additional bytes can be used to store additional instance variables beyond
  /// those defined in the class definition.
  ///
  /// @return An instance of the class \e cls.
  id class_createInstance(
    Class cls,
    int extraBytes,
  ) {
    return _class_createInstance(
      cls,
      extraBytes,
    );
  }

  late final _class_createInstancePtr =
      _lookup<ffi.NativeFunction<id Function(Class, ffi.Size)>>(
          'class_createInstance');
  late final _class_createInstance =
      _class_createInstancePtr.asFunction<id Function(Class, int)>();

  /// Creates an instance of a class at the specific location provided.
  ///
  /// @param cls The class that you wish to allocate an instance of.
  /// @param bytes The location at which to allocate an instance of \e cls.
  /// Must point to at least \c class_getInstanceSize(cls) bytes of well-aligned,
  /// zero-filled memory.
  ///
  /// @return \e bytes on success, \c nil otherwise. (For example, \e cls or \e bytes
  /// might be \c nil)
  ///
  /// @see class_createInstance
  id objc_constructInstance(
    Class cls,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    return _objc_constructInstance(
      cls,
      bytes,
    );
  }

  late final _objc_constructInstancePtr =
      _lookup<ffi.NativeFunction<id Function(Class, ffi.Pointer<ffi.Void>)>>(
          'objc_constructInstance');
  late final _objc_constructInstance = _objc_constructInstancePtr
      .asFunction<id Function(Class, ffi.Pointer<ffi.Void>)>();

  /// Destroys an instance of a class without freeing memory and removes any
  /// associated references this instance might have had.
  ///
  /// @param obj The class instance to destroy.
  ///
  /// @return \e obj. Does nothing if \e obj is nil.
  ///
  /// @note CF and other clients do call this under GC.
  ffi.Pointer<ffi.Void> objc_destructInstance(
    id obj,
  ) {
    return _objc_destructInstance(
      obj,
    );
  }

  late final _objc_destructInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(id)>>(
          'objc_destructInstance');
  late final _objc_destructInstance = _objc_destructInstancePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(id)>();

  /// Creates a new class and metaclass.
  ///
  /// @param superclass The class to use as the new class's superclass, or \c Nil to create a new root class.
  /// @param name The string to use as the new class's name. The string will be copied.
  /// @param extraBytes The number of bytes to allocate for indexed ivars at the end of
  /// the class and metaclass objects. This should usually be \c 0.
  ///
  /// @return The new class, or Nil if the class could not be created (for example, the desired name is already in use).
  ///
  /// @note You can get a pointer to the new metaclass by calling \c object_getClass(newClass).
  /// @note To create a new class, start by calling \c objc_allocateClassPair.
  /// Then set the class's attributes with functions like \c class_addMethod and \c class_addIvar.
  /// When you are done building the class, call \c objc_registerClassPair. The new class is now ready for use.
  /// @note Instance methods and instance variables should be added to the class itself.
  /// Class methods should be added to the metaclass.
  Class objc_allocateClassPair(
    Class superclass,
    ffi.Pointer<ffi.Char> name,
    int extraBytes,
  ) {
    return _objc_allocateClassPair(
      superclass,
      name,
      extraBytes,
    );
  }

  late final _objc_allocateClassPairPtr = _lookup<
      ffi.NativeFunction<
          Class Function(Class, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('objc_allocateClassPair');
  late final _objc_allocateClassPair = _objc_allocateClassPairPtr
      .asFunction<Class Function(Class, ffi.Pointer<ffi.Char>, int)>();

  /// Registers a class that was allocated using \c objc_allocateClassPair.
  ///
  /// @param cls The class you want to register.
  void objc_registerClassPair(
    Class cls,
  ) {
    return _objc_registerClassPair(
      cls,
    );
  }

  late final _objc_registerClassPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Class)>>(
          'objc_registerClassPair');
  late final _objc_registerClassPair =
      _objc_registerClassPairPtr.asFunction<void Function(Class)>();

  /// Used by Foundation's Key-Value Observing.
  ///
  /// @warning Do not call this function yourself.
  Class objc_duplicateClass(
    Class original,
    ffi.Pointer<ffi.Char> name,
    int extraBytes,
  ) {
    return _objc_duplicateClass(
      original,
      name,
      extraBytes,
    );
  }

  late final _objc_duplicateClassPtr = _lookup<
      ffi.NativeFunction<
          Class Function(
              Class, ffi.Pointer<ffi.Char>, ffi.Size)>>('objc_duplicateClass');
  late final _objc_duplicateClass = _objc_duplicateClassPtr
      .asFunction<Class Function(Class, ffi.Pointer<ffi.Char>, int)>();

  /// Destroy a class and its associated metaclass.
  ///
  /// @param cls The class to be destroyed. It must have been allocated with
  /// \c objc_allocateClassPair
  ///
  /// @warning Do not call if instances of this class or a subclass exist.
  void objc_disposeClassPair(
    Class cls,
  ) {
    return _objc_disposeClassPair(
      cls,
    );
  }

  late final _objc_disposeClassPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Class)>>(
          'objc_disposeClassPair');
  late final _objc_disposeClassPair =
      _objc_disposeClassPairPtr.asFunction<void Function(Class)>();

  /// Returns the name of a method.
  ///
  /// @param m The method to inspect.
  ///
  /// @return A pointer of type SEL.
  ///
  /// @note To get the method name as a C string, call \c sel_getName(method_getName(method)).
  SEL method_getName(
    Method m,
  ) {
    return _method_getName(
      m,
    );
  }

  late final _method_getNamePtr =
      _lookup<ffi.NativeFunction<SEL Function(Method)>>('method_getName');
  late final _method_getName =
      _method_getNamePtr.asFunction<SEL Function(Method)>();

  /// Returns the implementation of a method.
  ///
  /// @param m The method to inspect.
  ///
  /// @return A function pointer of type IMP.
  IMP method_getImplementation(
    Method m,
  ) {
    return _method_getImplementation(
      m,
    );
  }

  late final _method_getImplementationPtr =
      _lookup<ffi.NativeFunction<IMP Function(Method)>>(
          'method_getImplementation');
  late final _method_getImplementation =
      _method_getImplementationPtr.asFunction<IMP Function(Method)>();

  /// Returns a string describing a method's parameter and return types.
  ///
  /// @param m The method to inspect.
  ///
  /// @return A C string. The string may be \c NULL.
  ffi.Pointer<ffi.Char> method_getTypeEncoding(
    Method m,
  ) {
    return _method_getTypeEncoding(
      m,
    );
  }

  late final _method_getTypeEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Method)>>(
          'method_getTypeEncoding');
  late final _method_getTypeEncoding = _method_getTypeEncodingPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Method)>();

  /// Returns the number of arguments accepted by a method.
  ///
  /// @param m A pointer to a \c Method data structure. Pass the method in question.
  ///
  /// @return An integer containing the number of arguments accepted by the given method.
  int method_getNumberOfArguments(
    Method m,
  ) {
    return _method_getNumberOfArguments(
      m,
    );
  }

  late final _method_getNumberOfArgumentsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(Method)>>(
          'method_getNumberOfArguments');
  late final _method_getNumberOfArguments =
      _method_getNumberOfArgumentsPtr.asFunction<int Function(Method)>();

  /// Returns a string describing a method's return type.
  ///
  /// @param m The method to inspect.
  ///
  /// @return A C string describing the return type. You must free the string with \c free().
  ffi.Pointer<ffi.Char> method_copyReturnType(
    Method m,
  ) {
    return _method_copyReturnType(
      m,
    );
  }

  late final _method_copyReturnTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Method)>>(
          'method_copyReturnType');
  late final _method_copyReturnType = _method_copyReturnTypePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Method)>();

  /// Returns a string describing a single parameter type of a method.
  ///
  /// @param m The method to inspect.
  /// @param index The index of the parameter to inspect.
  ///
  /// @return A C string describing the type of the parameter at index \e index, or \c NULL
  /// if method has no parameter index \e index. You must free the string with \c free().
  ffi.Pointer<ffi.Char> method_copyArgumentType(
    Method m,
    int index,
  ) {
    return _method_copyArgumentType(
      m,
      index,
    );
  }

  late final _method_copyArgumentTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              Method, ffi.UnsignedInt)>>('method_copyArgumentType');
  late final _method_copyArgumentType = _method_copyArgumentTypePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Method, int)>();

  /// Returns by reference a string describing a method's return type.
  ///
  /// @param m The method you want to inquire about.
  /// @param dst The reference string to store the description.
  /// @param dst_len The maximum number of characters that can be stored in \e dst.
  ///
  /// @note The method's return type string is copied to \e dst.
  /// \e dst is filled as if \c strncpy(dst, parameter_type, dst_len) were called.
  void method_getReturnType(
    Method m,
    ffi.Pointer<ffi.Char> dst,
    int dst_len,
  ) {
    return _method_getReturnType(
      m,
      dst,
      dst_len,
    );
  }

  late final _method_getReturnTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Method, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('method_getReturnType');
  late final _method_getReturnType = _method_getReturnTypePtr
      .asFunction<void Function(Method, ffi.Pointer<ffi.Char>, int)>();

  /// Returns by reference a string describing a single parameter type of a method.
  ///
  /// @param m The method you want to inquire about.
  /// @param index The index of the parameter you want to inquire about.
  /// @param dst The reference string to store the description.
  /// @param dst_len The maximum number of characters that can be stored in \e dst.
  ///
  /// @note The parameter type string is copied to \e dst. \e dst is filled as if \c strncpy(dst, parameter_type, dst_len)
  /// were called. If the method contains no parameter with that index, \e dst is filled as
  /// if \c strncpy(dst, "", dst_len) were called.
  void method_getArgumentType(
    Method m,
    int index,
    ffi.Pointer<ffi.Char> dst,
    int dst_len,
  ) {
    return _method_getArgumentType(
      m,
      index,
      dst,
      dst_len,
    );
  }

  late final _method_getArgumentTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Method, ffi.UnsignedInt, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('method_getArgumentType');
  late final _method_getArgumentType = _method_getArgumentTypePtr
      .asFunction<void Function(Method, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<objc_method_description> method_getDescription(
    Method m,
  ) {
    return _method_getDescription(
      m,
    );
  }

  late final _method_getDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc_method_description> Function(
              Method)>>('method_getDescription');
  late final _method_getDescription = _method_getDescriptionPtr
      .asFunction<ffi.Pointer<objc_method_description> Function(Method)>();

  /// Sets the implementation of a method.
  ///
  /// @param m The method for which to set an implementation.
  /// @param imp The implemention to set to this method.
  ///
  /// @return The previous implementation of the method.
  IMP method_setImplementation(
    Method m,
    IMP imp,
  ) {
    return _method_setImplementation(
      m,
      imp,
    );
  }

  late final _method_setImplementationPtr =
      _lookup<ffi.NativeFunction<IMP Function(Method, IMP)>>(
          'method_setImplementation');
  late final _method_setImplementation =
      _method_setImplementationPtr.asFunction<IMP Function(Method, IMP)>();

  /// Exchanges the implementations of two methods.
  ///
  /// @param m1 Method to exchange with second method.
  /// @param m2 Method to exchange with first method.
  ///
  /// @note This is an atomic version of the following:
  /// \code
  /// IMP imp1 = method_getImplementation(m1);
  /// IMP imp2 = method_getImplementation(m2);
  /// method_setImplementation(m1, imp2);
  /// method_setImplementation(m2, imp1);
  /// \endcode
  void method_exchangeImplementations(
    Method m1,
    Method m2,
  ) {
    return _method_exchangeImplementations(
      m1,
      m2,
    );
  }

  late final _method_exchangeImplementationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Method, Method)>>(
          'method_exchangeImplementations');
  late final _method_exchangeImplementations =
      _method_exchangeImplementationsPtr
          .asFunction<void Function(Method, Method)>();

  /// Returns the name of an instance variable.
  ///
  /// @param v The instance variable you want to enquire about.
  ///
  /// @return A C string containing the instance variable's name.
  ffi.Pointer<ffi.Char> ivar_getName(
    Ivar v,
  ) {
    return _ivar_getName(
      v,
    );
  }

  late final _ivar_getNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Ivar)>>(
          'ivar_getName');
  late final _ivar_getName =
      _ivar_getNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(Ivar)>();

  /// Returns the type string of an instance variable.
  ///
  /// @param v The instance variable you want to enquire about.
  ///
  /// @return A C string containing the instance variable's type encoding.
  ///
  /// @note For possible values, see Objective-C Runtime Programming Guide > Type Encodings.
  ffi.Pointer<ffi.Char> ivar_getTypeEncoding(
    Ivar v,
  ) {
    return _ivar_getTypeEncoding(
      v,
    );
  }

  late final _ivar_getTypeEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Ivar)>>(
          'ivar_getTypeEncoding');
  late final _ivar_getTypeEncoding = _ivar_getTypeEncodingPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Ivar)>();

  /// Returns the offset of an instance variable.
  ///
  /// @param v The instance variable you want to enquire about.
  ///
  /// @return The offset of \e v.
  ///
  /// @note For instance variables of type \c id or other object types, call \c object_getIvar
  /// and \c object_setIvar instead of using this offset to access the instance variable data directly.
  int ivar_getOffset(
    Ivar v,
  ) {
    return _ivar_getOffset(
      v,
    );
  }

  late final _ivar_getOffsetPtr =
      _lookup<ffi.NativeFunction<ptrdiff_t Function(Ivar)>>('ivar_getOffset');
  late final _ivar_getOffset =
      _ivar_getOffsetPtr.asFunction<int Function(Ivar)>();

  /// Returns the name of a property.
  ///
  /// @param property The property you want to inquire about.
  ///
  /// @return A C string containing the property's name.
  ffi.Pointer<ffi.Char> property_getName(
    objc_property_t property,
  ) {
    return _property_getName(
      property,
    );
  }

  late final _property_getNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(objc_property_t)>>(
      'property_getName');
  late final _property_getName = _property_getNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(objc_property_t)>();

  /// Returns the attribute string of a property.
  ///
  /// @param property A property.
  ///
  /// @return A C string containing the property's attributes.
  ///
  /// @note The format of the attribute string is described in Declared Properties in Objective-C Runtime Programming Guide.
  ffi.Pointer<ffi.Char> property_getAttributes(
    objc_property_t property,
  ) {
    return _property_getAttributes(
      property,
    );
  }

  late final _property_getAttributesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(objc_property_t)>>(
      'property_getAttributes');
  late final _property_getAttributes = _property_getAttributesPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(objc_property_t)>();

  /// Returns an array of property attributes for a property.
  ///
  /// @param property The property whose attributes you want copied.
  /// @param outCount The number of attributes returned in the array.
  ///
  /// @return An array of property attributes; must be free'd() by the caller.
  ffi.Pointer<objc_property_attribute_t> property_copyAttributeList(
    objc_property_t property,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _property_copyAttributeList(
      property,
      outCount,
    );
  }

  late final _property_copyAttributeListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc_property_attribute_t> Function(objc_property_t,
              ffi.Pointer<ffi.UnsignedInt>)>>('property_copyAttributeList');
  late final _property_copyAttributeList =
      _property_copyAttributeListPtr.asFunction<
          ffi.Pointer<objc_property_attribute_t> Function(
              objc_property_t, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns the value of a property attribute given the attribute name.
  ///
  /// @param property The property whose attribute value you are interested in.
  /// @param attributeName C string representing the attribute name.
  ///
  /// @return The value string of the attribute \e attributeName if it exists in
  /// \e property, \c nil otherwise.
  ffi.Pointer<ffi.Char> property_copyAttributeValue(
    objc_property_t property,
    ffi.Pointer<ffi.Char> attributeName,
  ) {
    return _property_copyAttributeValue(
      property,
      attributeName,
    );
  }

  late final _property_copyAttributeValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(objc_property_t,
              ffi.Pointer<ffi.Char>)>>('property_copyAttributeValue');
  late final _property_copyAttributeValue =
      _property_copyAttributeValuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              objc_property_t, ffi.Pointer<ffi.Char>)>();

  /// Returns a specified protocol.
  ///
  /// @param name The name of a protocol.
  ///
  /// @return The protocol named \e name, or \c NULL if no protocol named \e name could be found.
  ///
  /// @note This function acquires the runtime lock.
  ffi.Pointer<Protocol> objc_getProtocol(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_getProtocol(
      name,
    );
  }

  late final _objc_getProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Protocol> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getProtocol');
  late final _objc_getProtocol = _objc_getProtocolPtr
      .asFunction<ffi.Pointer<Protocol> Function(ffi.Pointer<ffi.Char>)>();

  /// Returns an array of all the protocols known to the runtime.
  ///
  /// @param outCount Upon return, contains the number of protocols in the returned array.
  ///
  /// @return A C array of all the protocols known to the runtime. The array contains \c *outCount
  /// pointers followed by a \c NULL terminator. You must free the list with \c free().
  ///
  /// @note This function acquires the runtime lock.
  ffi.Pointer<ffi.Pointer<Protocol>> objc_copyProtocolList(
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyProtocolList(
      outCount,
    );
  }

  late final _objc_copyProtocolListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<Protocol>> Function(
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyProtocolList');
  late final _objc_copyProtocolList = _objc_copyProtocolListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<Protocol>> Function(
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a Boolean value that indicates whether one protocol conforms to another protocol.
  ///
  /// @param proto A protocol.
  /// @param other A protocol.
  ///
  /// @return \c YES if \e proto conforms to \e other, otherwise \c NO.
  ///
  /// @note One protocol can incorporate other protocols using the same syntax
  /// that classes use to adopt a protocol:
  /// \code
  /// @protocol ProtocolName < protocol list >
  /// \endcode
  /// All the protocols listed between angle brackets are considered part of the ProtocolName protocol.
  bool protocol_conformsToProtocol(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<Protocol> other,
  ) {
    return _protocol_conformsToProtocol(
      proto,
      other,
    );
  }

  late final _protocol_conformsToProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Protocol>,
              ffi.Pointer<Protocol>)>>('protocol_conformsToProtocol');
  late final _protocol_conformsToProtocol =
      _protocol_conformsToProtocolPtr.asFunction<
          bool Function(ffi.Pointer<Protocol>, ffi.Pointer<Protocol>)>();

  /// Returns a Boolean value that indicates whether two protocols are equal.
  ///
  /// @param proto A protocol.
  /// @param other A protocol.
  ///
  /// @return \c YES if \e proto is the same as \e other, otherwise \c NO.
  bool protocol_isEqual(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<Protocol> other,
  ) {
    return _protocol_isEqual(
      proto,
      other,
    );
  }

  late final _protocol_isEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Protocol>,
              ffi.Pointer<Protocol>)>>('protocol_isEqual');
  late final _protocol_isEqual = _protocol_isEqualPtr.asFunction<
      bool Function(ffi.Pointer<Protocol>, ffi.Pointer<Protocol>)>();

  /// Returns the name of a protocol.
  ///
  /// @param proto A protocol.
  ///
  /// @return The name of the protocol \e p as a C string.
  ffi.Pointer<ffi.Char> protocol_getName(
    ffi.Pointer<Protocol> proto,
  ) {
    return _protocol_getName(
      proto,
    );
  }

  late final _protocol_getNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Protocol>)>>('protocol_getName');
  late final _protocol_getName = _protocol_getNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<Protocol>)>();

  /// Returns a method description structure for a specified method of a given protocol.
  ///
  /// @param proto A protocol.
  /// @param aSel A selector.
  /// @param isRequiredMethod A Boolean value that indicates whether aSel is a required method.
  /// @param isInstanceMethod A Boolean value that indicates whether aSel is an instance method.
  ///
  /// @return An \c objc_method_description structure that describes the method specified by \e aSel,
  /// \e isRequiredMethod, and \e isInstanceMethod for the protocol \e p.
  /// If the protocol does not contain the specified method, returns an \c objc_method_description structure
  /// with the value \c {NULL, \c NULL}.
  ///
  /// @note This function recursively searches any protocols that this protocol conforms to.
  objc_method_description protocol_getMethodDescription(
    ffi.Pointer<Protocol> proto,
    SEL aSel,
    bool isRequiredMethod,
    bool isInstanceMethod,
  ) {
    return _protocol_getMethodDescription(
      proto,
      aSel,
      isRequiredMethod,
      isInstanceMethod,
    );
  }

  late final _protocol_getMethodDescriptionPtr = _lookup<
      ffi.NativeFunction<
          objc_method_description Function(ffi.Pointer<Protocol>, SEL, ffi.Bool,
              ffi.Bool)>>('protocol_getMethodDescription');
  late final _protocol_getMethodDescription =
      _protocol_getMethodDescriptionPtr.asFunction<
          objc_method_description Function(
              ffi.Pointer<Protocol>, SEL, bool, bool)>();

  /// Returns an array of method descriptions of methods meeting a given specification for a given protocol.
  ///
  /// @param proto A protocol.
  /// @param isRequiredMethod A Boolean value that indicates whether returned methods should
  /// be required methods (pass YES to specify required methods).
  /// @param isInstanceMethod A Boolean value that indicates whether returned methods should
  /// be instance methods (pass YES to specify instance methods).
  /// @param outCount Upon return, contains the number of method description structures in the returned array.
  ///
  /// @return A C array of \c objc_method_description structures containing the names and types of \e p's methods
  /// specified by \e isRequiredMethod and \e isInstanceMethod. The array contains \c *outCount pointers followed
  /// by a \c NULL terminator. You must free the list with \c free().
  /// If the protocol declares no methods that meet the specification, \c NULL is returned and \c *outCount is 0.
  ///
  /// @note Methods in other protocols adopted by this protocol are not included.
  ffi.Pointer<objc_method_description> protocol_copyMethodDescriptionList(
    ffi.Pointer<Protocol> proto,
    bool isRequiredMethod,
    bool isInstanceMethod,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _protocol_copyMethodDescriptionList(
      proto,
      isRequiredMethod,
      isInstanceMethod,
      outCount,
    );
  }

  late final _protocol_copyMethodDescriptionListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<objc_method_description> Function(
                  ffi.Pointer<Protocol>,
                  ffi.Bool,
                  ffi.Bool,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'protocol_copyMethodDescriptionList');
  late final _protocol_copyMethodDescriptionList =
      _protocol_copyMethodDescriptionListPtr.asFunction<
          ffi.Pointer<objc_method_description> Function(ffi.Pointer<Protocol>,
              bool, bool, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns the specified property of a given protocol.
  ///
  /// @param proto A protocol.
  /// @param name The name of a property.
  /// @param isRequiredProperty \c YES searches for a required property, \c NO searches for an optional property.
  /// @param isInstanceProperty \c YES searches for an instance property, \c NO searches for a class property.
  ///
  /// @return The property specified by \e name, \e isRequiredProperty, and \e isInstanceProperty for \e proto,
  /// or \c NULL if none of \e proto's properties meets the specification.
  objc_property_t protocol_getProperty(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<ffi.Char> name,
    bool isRequiredProperty,
    bool isInstanceProperty,
  ) {
    return _protocol_getProperty(
      proto,
      name,
      isRequiredProperty,
      isInstanceProperty,
    );
  }

  late final _protocol_getPropertyPtr = _lookup<
      ffi.NativeFunction<
          objc_property_t Function(ffi.Pointer<Protocol>, ffi.Pointer<ffi.Char>,
              ffi.Bool, ffi.Bool)>>('protocol_getProperty');
  late final _protocol_getProperty = _protocol_getPropertyPtr.asFunction<
      objc_property_t Function(
          ffi.Pointer<Protocol>, ffi.Pointer<ffi.Char>, bool, bool)>();

  /// Returns an array of the required instance properties declared by a protocol.
  ///
  /// @note Identical to
  /// \code
  /// protocol_copyPropertyList2(proto, outCount, YES, YES);
  /// \endcode
  ffi.Pointer<objc_property_t> protocol_copyPropertyList(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _protocol_copyPropertyList(
      proto,
      outCount,
    );
  }

  late final _protocol_copyPropertyListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc_property_t> Function(ffi.Pointer<Protocol>,
              ffi.Pointer<ffi.UnsignedInt>)>>('protocol_copyPropertyList');
  late final _protocol_copyPropertyList =
      _protocol_copyPropertyListPtr.asFunction<
          ffi.Pointer<objc_property_t> Function(
              ffi.Pointer<Protocol>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns an array of properties declared by a protocol.
  ///
  /// @param proto A protocol.
  /// @param outCount Upon return, contains the number of elements in the returned array.
  /// @param isRequiredProperty \c YES returns required properties, \c NO returns optional properties.
  /// @param isInstanceProperty \c YES returns instance properties, \c NO returns class properties.
  ///
  /// @return A C array of pointers of type \c objc_property_t describing the properties declared by \e proto.
  /// Any properties declared by other protocols adopted by this protocol are not included. The array contains
  /// \c *outCount pointers followed by a \c NULL terminator. You must free the array with \c free().
  /// If the protocol declares no matching properties, \c NULL is returned and \c *outCount is \c 0.
  ffi.Pointer<objc_property_t> protocol_copyPropertyList2(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<ffi.UnsignedInt> outCount,
    bool isRequiredProperty,
    bool isInstanceProperty,
  ) {
    return _protocol_copyPropertyList2(
      proto,
      outCount,
      isRequiredProperty,
      isInstanceProperty,
    );
  }

  late final _protocol_copyPropertyList2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc_property_t> Function(
              ffi.Pointer<Protocol>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Bool,
              ffi.Bool)>>('protocol_copyPropertyList2');
  late final _protocol_copyPropertyList2 =
      _protocol_copyPropertyList2Ptr.asFunction<
          ffi.Pointer<objc_property_t> Function(ffi.Pointer<Protocol>,
              ffi.Pointer<ffi.UnsignedInt>, bool, bool)>();

  /// Returns an array of the protocols adopted by a protocol.
  ///
  /// @param proto A protocol.
  /// @param outCount Upon return, contains the number of elements in the returned array.
  ///
  /// @return A C array of protocols adopted by \e proto. The array contains \e *outCount pointers
  /// followed by a \c NULL terminator. You must free the array with \c free().
  /// If the protocol adopts no other protocols, \c NULL is returned and \c *outCount is \c 0.
  ffi.Pointer<ffi.Pointer<Protocol>> protocol_copyProtocolList(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _protocol_copyProtocolList(
      proto,
      outCount,
    );
  }

  late final _protocol_copyProtocolListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<Protocol>> Function(ffi.Pointer<Protocol>,
              ffi.Pointer<ffi.UnsignedInt>)>>('protocol_copyProtocolList');
  late final _protocol_copyProtocolList =
      _protocol_copyProtocolListPtr.asFunction<
          ffi.Pointer<ffi.Pointer<Protocol>> Function(
              ffi.Pointer<Protocol>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Creates a new protocol instance that cannot be used until registered with
  /// \c objc_registerProtocol()
  ///
  /// @param name The name of the protocol to create.
  ///
  /// @return The Protocol instance on success, \c nil if a protocol
  /// with the same name already exists.
  /// @note There is no dispose method for this.
  ffi.Pointer<Protocol> objc_allocateProtocol(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _objc_allocateProtocol(
      name,
    );
  }

  late final _objc_allocateProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Protocol> Function(
              ffi.Pointer<ffi.Char>)>>('objc_allocateProtocol');
  late final _objc_allocateProtocol = _objc_allocateProtocolPtr
      .asFunction<ffi.Pointer<Protocol> Function(ffi.Pointer<ffi.Char>)>();

  /// Registers a newly constructed protocol with the runtime. The protocol
  /// will be ready for use and is immutable after this.
  ///
  /// @param proto The protocol you want to register.
  void objc_registerProtocol(
    ffi.Pointer<Protocol> proto,
  ) {
    return _objc_registerProtocol(
      proto,
    );
  }

  late final _objc_registerProtocolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Protocol>)>>(
          'objc_registerProtocol');
  late final _objc_registerProtocol = _objc_registerProtocolPtr
      .asFunction<void Function(ffi.Pointer<Protocol>)>();

  /// Adds a method to a protocol. The protocol must be under construction.
  ///
  /// @param proto The protocol to add a method to.
  /// @param name The name of the method to add.
  /// @param types A C string that represents the method signature.
  /// @param isRequiredMethod YES if the method is not an optional method.
  /// @param isInstanceMethod YES if the method is an instance method.
  void protocol_addMethodDescription(
    ffi.Pointer<Protocol> proto,
    SEL name,
    ffi.Pointer<ffi.Char> types,
    bool isRequiredMethod,
    bool isInstanceMethod,
  ) {
    return _protocol_addMethodDescription(
      proto,
      name,
      types,
      isRequiredMethod,
      isInstanceMethod,
    );
  }

  late final _protocol_addMethodDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Protocol>, SEL, ffi.Pointer<ffi.Char>,
              ffi.Bool, ffi.Bool)>>('protocol_addMethodDescription');
  late final _protocol_addMethodDescription =
      _protocol_addMethodDescriptionPtr.asFunction<
          void Function(
              ffi.Pointer<Protocol>, SEL, ffi.Pointer<ffi.Char>, bool, bool)>();

  /// Adds an incorporated protocol to another protocol. The protocol being
  /// added to must still be under construction, while the additional protocol
  /// must be already constructed.
  ///
  /// @param proto The protocol you want to add to, it must be under construction.
  /// @param addition The protocol you want to incorporate into \e proto, it must be registered.
  void protocol_addProtocol(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<Protocol> addition,
  ) {
    return _protocol_addProtocol(
      proto,
      addition,
    );
  }

  late final _protocol_addProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Protocol>,
              ffi.Pointer<Protocol>)>>('protocol_addProtocol');
  late final _protocol_addProtocol = _protocol_addProtocolPtr.asFunction<
      void Function(ffi.Pointer<Protocol>, ffi.Pointer<Protocol>)>();

  /// Adds a property to a protocol. The protocol must be under construction.
  ///
  /// @param proto The protocol to add a property to.
  /// @param name The name of the property.
  /// @param attributes An array of property attributes.
  /// @param attributeCount The number of attributes in \e attributes.
  /// @param isRequiredProperty YES if the property (accessor methods) is not optional.
  /// @param isInstanceProperty YES if the property (accessor methods) are instance methods.
  /// This is the only case allowed fo a property, as a result, setting this to NO will
  /// not add the property to the protocol at all.
  void protocol_addProperty(
    ffi.Pointer<Protocol> proto,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<objc_property_attribute_t> attributes,
    int attributeCount,
    bool isRequiredProperty,
    bool isInstanceProperty,
  ) {
    return _protocol_addProperty(
      proto,
      name,
      attributes,
      attributeCount,
      isRequiredProperty,
      isInstanceProperty,
    );
  }

  late final _protocol_addPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Protocol>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<objc_property_attribute_t>,
              ffi.UnsignedInt,
              ffi.Bool,
              ffi.Bool)>>('protocol_addProperty');
  late final _protocol_addProperty = _protocol_addPropertyPtr.asFunction<
      void Function(ffi.Pointer<Protocol>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<objc_property_attribute_t>, int, bool, bool)>();

  /// Returns the names of all the loaded Objective-C frameworks and dynamic
  /// libraries.
  ///
  /// @param outCount The number of names returned.
  ///
  /// @return An array of C strings of names. Must be free()'d by caller.
  ffi.Pointer<ffi.Pointer<ffi.Char>> objc_copyImageNames(
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyImageNames(
      outCount,
    );
  }

  late final _objc_copyImageNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyImageNames');
  late final _objc_copyImageNames = _objc_copyImageNamesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns the dynamic library name a class originated from.
  ///
  /// @param cls The class you are inquiring about.
  ///
  /// @return The name of the library containing this class.
  ffi.Pointer<ffi.Char> class_getImageName(
    Class cls,
  ) {
    return _class_getImageName(
      cls,
    );
  }

  late final _class_getImageNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Class)>>(
          'class_getImageName');
  late final _class_getImageName = _class_getImageNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Class)>();

  /// Returns the names of all the classes within a library.
  ///
  /// @param image The library or framework you are inquiring about.
  /// @param outCount The number of class names returned.
  ///
  /// @return An array of C strings representing the class names.
  ffi.Pointer<ffi.Pointer<ffi.Char>> objc_copyClassNamesForImage(
    ffi.Pointer<ffi.Char> image,
    ffi.Pointer<ffi.UnsignedInt> outCount,
  ) {
    return _objc_copyClassNamesForImage(
      image,
      outCount,
    );
  }

  late final _objc_copyClassNamesForImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_copyClassNamesForImage');
  late final _objc_copyClassNamesForImage =
      _objc_copyClassNamesForImagePtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Returns a Boolean value that indicates whether two selectors are equal.
  ///
  /// @param lhs The selector to compare with rhs.
  /// @param rhs The selector to compare with lhs.
  ///
  /// @return \c YES if \e lhs and \e rhs are equal, otherwise \c NO.
  ///
  /// @note sel_isEqual is equivalent to ==.
  bool sel_isEqual(
    SEL lhs,
    SEL rhs,
  ) {
    return _sel_isEqual(
      lhs,
      rhs,
    );
  }

  late final _sel_isEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(SEL, SEL)>>('sel_isEqual');
  late final _sel_isEqual =
      _sel_isEqualPtr.asFunction<bool Function(SEL, SEL)>();

  /// This function is inserted by the compiler when a mutation
  /// is detected during a foreach iteration. It gets called
  /// when a mutation occurs, and the enumerationMutationHandler
  /// is enacted if it is set up. A fatal error occurs if a handler is not set up.
  ///
  /// @param obj The object being mutated.
  void objc_enumerationMutation(
    id obj,
  ) {
    return _objc_enumerationMutation(
      obj,
    );
  }

  late final _objc_enumerationMutationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(id)>>(
          'objc_enumerationMutation');
  late final _objc_enumerationMutation =
      _objc_enumerationMutationPtr.asFunction<void Function(id)>();

  /// Sets the current mutation handler.
  ///
  /// @param handler Function pointer to the new mutation handler.
  void objc_setEnumerationMutationHandler(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(id)>> handler,
  ) {
    return _objc_setEnumerationMutationHandler(
      handler,
    );
  }

  late final _objc_setEnumerationMutationHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(id)>>)>>(
      'objc_setEnumerationMutationHandler');
  late final _objc_setEnumerationMutationHandler =
      _objc_setEnumerationMutationHandlerPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function(id)>>)>();

  /// Set the function to be called by objc_msgForward.
  ///
  /// @param fwd Function to be jumped to by objc_msgForward.
  /// @param fwd_stret Function to be jumped to by objc_msgForward_stret.
  ///
  /// @see message.h::_objc_msgForward
  void objc_setForwardHandler(
    ffi.Pointer<ffi.Void> fwd,
    ffi.Pointer<ffi.Void> fwd_stret,
  ) {
    return _objc_setForwardHandler(
      fwd,
      fwd_stret,
    );
  }

  late final _objc_setForwardHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('objc_setForwardHandler');
  late final _objc_setForwardHandler = _objc_setForwardHandlerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// Creates a pointer to a function that will call the block
  /// when the method is called.
  ///
  /// @param block The block that implements this method. Its signature should
  /// be: method_return_type ^(id self, method_args...).
  /// The selector is not available as a parameter to this block.
  /// The block is copied with \c Block_copy().
  ///
  /// @return The IMP that calls this block. Must be disposed of with
  /// \c imp_removeBlock.
  IMP imp_implementationWithBlock(
    id block,
  ) {
    return _imp_implementationWithBlock(
      block,
    );
  }

  late final _imp_implementationWithBlockPtr =
      _lookup<ffi.NativeFunction<IMP Function(id)>>(
          'imp_implementationWithBlock');
  late final _imp_implementationWithBlock =
      _imp_implementationWithBlockPtr.asFunction<IMP Function(id)>();

  /// Return the block associated with an IMP that was created using
  /// \c imp_implementationWithBlock.
  ///
  /// @param anImp The IMP that calls this block.
  ///
  /// @return The block called by \e anImp.
  id imp_getBlock(
    IMP anImp,
  ) {
    return _imp_getBlock(
      anImp,
    );
  }

  late final _imp_getBlockPtr =
      _lookup<ffi.NativeFunction<id Function(IMP)>>('imp_getBlock');
  late final _imp_getBlock = _imp_getBlockPtr.asFunction<id Function(IMP)>();

  /// Disassociates a block from an IMP that was created using
  /// \c imp_implementationWithBlock and releases the copy of the
  /// block that was created.
  ///
  /// @param anImp An IMP that was created using \c imp_implementationWithBlock.
  ///
  /// @return YES if the block was released successfully, NO otherwise.
  /// (For example, the block might not have been used to create an IMP previously).
  bool imp_removeBlock(
    IMP anImp,
  ) {
    return _imp_removeBlock(
      anImp,
    );
  }

  late final _imp_removeBlockPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(IMP)>>('imp_removeBlock');
  late final _imp_removeBlock =
      _imp_removeBlockPtr.asFunction<bool Function(IMP)>();

  /// This loads the object referenced by a weak pointer and returns it, after
  /// retaining and autoreleasing the object to ensure that it stays alive
  /// long enough for the caller to use it. This function would be used
  /// anywhere a __weak variable is used in an expression.
  ///
  /// @param location The weak pointer address
  ///
  /// @return The object pointed to by \e location, or \c nil if \e *location is \c nil.
  id objc_loadWeak(
    ffi.Pointer<id> location,
  ) {
    return _objc_loadWeak(
      location,
    );
  }

  late final _objc_loadWeakPtr =
      _lookup<ffi.NativeFunction<id Function(ffi.Pointer<id>)>>(
          'objc_loadWeak');
  late final _objc_loadWeak =
      _objc_loadWeakPtr.asFunction<id Function(ffi.Pointer<id>)>();

  /// This function stores a new value into a __weak variable. It would
  /// be used anywhere a __weak variable is the target of an assignment.
  ///
  /// @param location The address of the weak pointer itself
  /// @param obj The new object this weak ptr should now point to
  ///
  /// @return The value stored into \e location, i.e. \e obj
  id objc_storeWeak(
    ffi.Pointer<id> location,
    id obj,
  ) {
    return _objc_storeWeak(
      location,
      obj,
    );
  }

  late final _objc_storeWeakPtr =
      _lookup<ffi.NativeFunction<id Function(ffi.Pointer<id>, id)>>(
          'objc_storeWeak');
  late final _objc_storeWeak =
      _objc_storeWeakPtr.asFunction<id Function(ffi.Pointer<id>, id)>();

  /// Sets an associated value for a given object using a given key and association policy.
  ///
  /// @param object The source object for the association.
  /// @param key The key for the association.
  /// @param value The value to associate with the key key for object. Pass nil to clear an existing association.
  /// @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”
  ///
  /// @see objc_setAssociatedObject
  /// @see objc_removeAssociatedObjects
  void objc_setAssociatedObject(
    id object,
    ffi.Pointer<ffi.Void> key,
    id value,
    int policy,
  ) {
    return _objc_setAssociatedObject(
      object,
      key,
      value,
      policy,
    );
  }

  late final _objc_setAssociatedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(id, ffi.Pointer<ffi.Void>, id,
              objc_AssociationPolicy)>>('objc_setAssociatedObject');
  late final _objc_setAssociatedObject = _objc_setAssociatedObjectPtr
      .asFunction<void Function(id, ffi.Pointer<ffi.Void>, id, int)>();

  /// Returns the value associated with a given object for a given key.
  ///
  /// @param object The source object for the association.
  /// @param key The key for the association.
  ///
  /// @return The value associated with the key \e key for \e object.
  ///
  /// @see objc_setAssociatedObject
  id objc_getAssociatedObject(
    id object,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _objc_getAssociatedObject(
      object,
      key,
    );
  }

  late final _objc_getAssociatedObjectPtr =
      _lookup<ffi.NativeFunction<id Function(id, ffi.Pointer<ffi.Void>)>>(
          'objc_getAssociatedObject');
  late final _objc_getAssociatedObject = _objc_getAssociatedObjectPtr
      .asFunction<id Function(id, ffi.Pointer<ffi.Void>)>();

  /// Removes all associations for a given object.
  ///
  /// @param object An object that maintains associated objects.
  ///
  /// @note The main purpose of this function is to make it easy to return an object
  /// to a "pristine state”. You should not use this function for general removal of
  /// associations from objects, since it also removes associations that other clients
  /// may have added to the object. Typically you should use \c objc_setAssociatedObject
  /// with a nil value to clear an association.
  ///
  /// @see objc_setAssociatedObject
  /// @see objc_getAssociatedObject
  void objc_removeAssociatedObjects(
    id object,
  ) {
    return _objc_removeAssociatedObjects(
      object,
    );
  }

  late final _objc_removeAssociatedObjectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(id)>>(
          'objc_removeAssociatedObjects');
  late final _objc_removeAssociatedObjects =
      _objc_removeAssociatedObjectsPtr.asFunction<void Function(id)>();

  /// Install a hook for class_getImageName().
  ///
  /// @param newValue The hook function to install.
  /// @param outOldValue The address of a function pointer variable. On return,
  /// the old hook function is stored in the variable.
  ///
  /// @note The store to *outOldValue is thread-safe: the variable will be
  /// updated before class_getImageName() calls your new hook to read it,
  /// even if your new hook is called from another thread before this
  /// setter completes.
  /// @note The first hook in the chain is the native implementation of
  /// class_getImageName(). Your hook should call the previous hook for
  /// classes that you do not recognize.
  ///
  /// @see class_getImageName
  /// @see objc_hook_getImageName
  void objc_setHook_getImageName(
    objc_hook_getImageName newValue,
    ffi.Pointer<objc_hook_getImageName> outOldValue,
  ) {
    return _objc_setHook_getImageName(
      newValue,
      outOldValue,
    );
  }

  late final _objc_setHook_getImageNamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(objc_hook_getImageName,
                  ffi.Pointer<objc_hook_getImageName>)>>(
      'objc_setHook_getImageName');
  late final _objc_setHook_getImageName =
      _objc_setHook_getImageNamePtr.asFunction<
          void Function(
              objc_hook_getImageName, ffi.Pointer<objc_hook_getImageName>)>();

  void objc_setHook_getClass(
    objc_hook_getClass newValue,
    ffi.Pointer<objc_hook_getClass> outOldValue,
  ) {
    return _objc_setHook_getClass(
      newValue,
      outOldValue,
    );
  }

  late final _objc_setHook_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(objc_hook_getClass,
              ffi.Pointer<objc_hook_getClass>)>>('objc_setHook_getClass');
  late final _objc_setHook_getClass = _objc_setHook_getClassPtr.asFunction<
      void Function(objc_hook_getClass, ffi.Pointer<objc_hook_getClass>)>();

  void objc_addLoadImageFunc(
    objc_func_loadImage func,
  ) {
    return _objc_addLoadImageFunc(
      func,
    );
  }

  late final _objc_addLoadImageFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(objc_func_loadImage)>>(
          'objc_addLoadImageFunc');
  late final _objc_addLoadImageFunc = _objc_addLoadImageFuncPtr
      .asFunction<void Function(objc_func_loadImage)>();

  void objc_setHook_lazyClassNamer(
    objc_hook_lazyClassNamer newValue,
    ffi.Pointer<objc_hook_lazyClassNamer> oldOutValue,
  ) {
    return _objc_setHook_lazyClassNamer(
      newValue,
      oldOutValue,
    );
  }

  late final _objc_setHook_lazyClassNamerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(objc_hook_lazyClassNamer,
                  ffi.Pointer<objc_hook_lazyClassNamer>)>>(
      'objc_setHook_lazyClassNamer');
  late final _objc_setHook_lazyClassNamer =
      _objc_setHook_lazyClassNamerPtr.asFunction<
          void Function(objc_hook_lazyClassNamer,
              ffi.Pointer<objc_hook_lazyClassNamer>)>();

  Class _objc_realizeClassFromSwift(
    Class cls,
    ffi.Pointer<ffi.Void> previously,
  ) {
    return __objc_realizeClassFromSwift(
      cls,
      previously,
    );
  }

  late final __objc_realizeClassFromSwiftPtr =
      _lookup<ffi.NativeFunction<Class Function(Class, ffi.Pointer<ffi.Void>)>>(
          '_objc_realizeClassFromSwift');
  late final __objc_realizeClassFromSwift = __objc_realizeClassFromSwiftPtr
      .asFunction<Class Function(Class, ffi.Pointer<ffi.Void>)>();

  IMP class_lookupMethod(
    Class cls,
    SEL sel,
  ) {
    return _class_lookupMethod(
      cls,
      sel,
    );
  }

  late final _class_lookupMethodPtr =
      _lookup<ffi.NativeFunction<IMP Function(Class, SEL)>>(
          'class_lookupMethod');
  late final _class_lookupMethod =
      _class_lookupMethodPtr.asFunction<IMP Function(Class, SEL)>();

  bool class_respondsToMethod(
    Class cls,
    SEL sel,
  ) {
    return _class_respondsToMethod(
      cls,
      sel,
    );
  }

  late final _class_respondsToMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Class, SEL)>>(
          'class_respondsToMethod');
  late final _class_respondsToMethod =
      _class_respondsToMethodPtr.asFunction<bool Function(Class, SEL)>();

  void _objc_flush_caches(
    Class cls,
  ) {
    return __objc_flush_caches(
      cls,
    );
  }

  late final __objc_flush_cachesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Class)>>(
          '_objc_flush_caches');
  late final __objc_flush_caches =
      __objc_flush_cachesPtr.asFunction<void Function(Class)>();

  id object_copyFromZone(
    id anObject,
    int nBytes,
    ffi.Pointer<ffi.Void> z,
  ) {
    return _object_copyFromZone(
      anObject,
      nBytes,
      z,
    );
  }

  late final _object_copyFromZonePtr = _lookup<
          ffi.NativeFunction<id Function(id, ffi.Size, ffi.Pointer<ffi.Void>)>>(
      'object_copyFromZone');
  late final _object_copyFromZone = _object_copyFromZonePtr
      .asFunction<id Function(id, int, ffi.Pointer<ffi.Void>)>();

  id class_createInstanceFromZone(
    Class arg0,
    int idxIvars,
    ffi.Pointer<ffi.Void> z,
  ) {
    return _class_createInstanceFromZone(
      arg0,
      idxIvars,
      z,
    );
  }

  late final _class_createInstanceFromZonePtr = _lookup<
      ffi.NativeFunction<
          id Function(Class, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('class_createInstanceFromZone');
  late final _class_createInstanceFromZone = _class_createInstanceFromZonePtr
      .asFunction<id Function(Class, int, ffi.Pointer<ffi.Void>)>();

  void __assert_rtn(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___assert_rtn(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___assert_rtnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('__assert_rtn');
  late final ___assert_rtn = ___assert_rtnPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<_RuneLocale> __DefaultRuneLocale =
      _lookup<_RuneLocale>('_DefaultRuneLocale');

  _RuneLocale get _DefaultRuneLocale => __DefaultRuneLocale.ref;

  late final ffi.Pointer<ffi.Pointer<_RuneLocale>> __CurrentRuneLocale =
      _lookup<ffi.Pointer<_RuneLocale>>('_CurrentRuneLocale');

  ffi.Pointer<_RuneLocale> get _CurrentRuneLocale => __CurrentRuneLocale.value;

  set _CurrentRuneLocale(ffi.Pointer<_RuneLocale> value) =>
      __CurrentRuneLocale.value = value;

  int ___runetype(
    int arg0,
  ) {
    return ____runetype(
      arg0,
    );
  }

  late final ____runetypePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(__darwin_ct_rune_t)>>(
      '___runetype');
  late final ____runetype = ____runetypePtr.asFunction<int Function(int)>();

  int ___tolower(
    int arg0,
  ) {
    return ____tolower(
      arg0,
    );
  }

  late final ____tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___tolower');
  late final ____tolower = ____tolowerPtr.asFunction<int Function(int)>();

  int ___toupper(
    int arg0,
  ) {
    return ____toupper(
      arg0,
    );
  }

  late final ____toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___toupper');
  late final ____toupper = ____toupperPtr.asFunction<int Function(int)>();

  int __maskrune(
    int arg0,
    int arg1,
  ) {
    return ___maskrune(
      arg0,
      arg1,
    );
  }

  late final ___maskrunePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __darwin_ct_rune_t, ffi.UnsignedLong)>>('__maskrune');
  late final ___maskrune = ___maskrunePtr.asFunction<int Function(int, int)>();

  int __toupper(
    int arg0,
  ) {
    return ___toupper1(
      arg0,
    );
  }

  late final ___toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__toupper');
  late final ___toupper1 = ___toupperPtr.asFunction<int Function(int)>();

  int __tolower(
    int arg0,
  ) {
    return ___tolower1(
      arg0,
    );
  }

  late final ___tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__tolower');
  late final ___tolower1 = ___tolowerPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __error() {
    return ___error();
  }

  late final ___errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__error');
  late final ___error =
      ___errorPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<lconv> localeconv() {
    return _localeconv();
  }

  late final _localeconvPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lconv> Function()>>('localeconv');
  late final _localeconv =
      _localeconvPtr.asFunction<ffi.Pointer<lconv> Function()>();

  ffi.Pointer<ffi.Char> setlocale(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setlocale(
      arg0,
      arg1,
    );
  }

  late final _setlocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('setlocale');
  late final _setlocale = _setlocalePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int setjmp(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _setjmp1(
      arg0,
    );
  }

  late final _setjmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'setjmp');
  late final _setjmp1 =
      _setjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  void longjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _longjmp1(
      arg0,
      arg1,
    );
  }

  late final _longjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'longjmp');
  late final _longjmp1 =
      _longjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int _setjmp(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return __setjmp(
      arg0,
    );
  }

  late final __setjmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          '_setjmp');
  late final __setjmp =
      __setjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  void _longjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return __longjmp(
      arg0,
      arg1,
    );
  }

  late final __longjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      '_longjmp');
  late final __longjmp =
      __longjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int sigsetjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _sigsetjmp(
      arg0,
      arg1,
    );
  }

  late final _sigsetjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'sigsetjmp');
  late final _sigsetjmp =
      _sigsetjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  void siglongjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _siglongjmp(
      arg0,
      arg1,
    );
  }

  late final _siglongjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'siglongjmp');
  late final _siglongjmp =
      _siglongjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  void longjmperror() {
    return _longjmperror();
  }

  late final _longjmperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('longjmperror');
  late final _longjmperror = _longjmperrorPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_signame =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_signame');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_signame => _sys_signame.value;

  set sys_signame(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_signame.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_siglist => _sys_siglist.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_siglist.value = value;

  int raise(
    int arg0,
  ) {
    return _raise(
      arg0,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> bsd_signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _bsd_signal(
      arg0,
      arg1,
    );
  }

  late final _bsd_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int)>>)>>('bsd_signal');
  late final _bsd_signal = _bsd_signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int kill(
    int arg0,
    int arg1,
  ) {
    return _kill(
      arg0,
      arg1,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int arg0,
    int arg1,
  ) {
    return _killpg(
      arg0,
      arg1,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int sigaction1(
    int arg0,
    ffi.Pointer<sigaction> arg1,
    ffi.Pointer<sigaction> arg2,
  ) {
    return _sigaction1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  late final _sigaddsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> arg0,
    ffi.Pointer<stack_t> arg1,
  ) {
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigdelset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  late final _sigdelsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigemptyset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigemptyset(
      arg0,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigfillset(
      arg0,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sighold(
    int arg0,
  ) {
    return _sighold(
      arg0,
    );
  }

  late final _sigholdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sighold');
  late final _sighold = _sigholdPtr.asFunction<int Function(int)>();

  int sigignore(
    int arg0,
  ) {
    return _sigignore(
      arg0,
    );
  }

  late final _sigignorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigignore');
  late final _sigignore = _sigignorePtr.asFunction<int Function(int)>();

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigismember(
      arg0,
      arg1,
    );
  }

  late final _sigismemberPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigpause(
    int arg0,
  ) {
    return _sigpause(
      arg0,
    );
  }

  late final _sigpausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigpause');
  late final _sigpause = _sigpausePtr.asFunction<int Function(int)>();

  int sigpending(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigpending(
      arg0,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigprocmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigrelse(
    int arg0,
  ) {
    return _sigrelse(
      arg0,
    );
  }

  late final _sigrelsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigrelse');
  late final _sigrelse = _sigrelsePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> sigset(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _sigset(
      arg0,
      arg1,
    );
  }

  late final _sigsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('sigset');
  late final _sigset = _sigsetPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigsuspend(
      arg0,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _sigwait(
      arg0,
      arg1,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr
      .asFunction<int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>();

  void psignal(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _psignal(
      arg0,
      arg1,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int sigblock(
    int arg0,
  ) {
    return _sigblock(
      arg0,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int arg0,
  ) {
    return _sigsetmask(
      arg0,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int sigvec1(
    int arg0,
    ffi.Pointer<sigvec> arg1,
    ffi.Pointer<sigvec> arg2,
  ) {
    return _sigvec1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigvec1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>>('sigvec');
  late final _sigvec1 = _sigvec1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int32, id_t, ffi.Pointer<siginfo_t>, ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit1(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_copy(
      aBlock,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_release(
      aBlock,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void _Block_object_assign(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __Block_object_assign(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Block_object_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('_Block_object_assign');
  late final __Block_object_assign = __Block_object_assignPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void _Block_object_dispose(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __Block_object_dispose(
      arg0,
      arg1,
    );
  }

  late final __Block_object_disposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('_Block_object_dispose');
  late final __Block_object_dispose = __Block_object_disposePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteGlobalBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteGlobalBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteGlobalBlock =>
      __NSConcreteGlobalBlock.value;

  set _NSConcreteGlobalBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteGlobalBlock.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteStackBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteStackBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteStackBlock =>
      __NSConcreteStackBlock.value;

  set _NSConcreteStackBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteStackBlock.value = value;

  void Debugger() {
    return _Debugger();
  }

  late final _DebuggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Debugger');
  late final _Debugger = _DebuggerPtr.asFunction<void Function()>();

  void DebugStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _DebugStr(
      debuggerMsg,
    );
  }

  late final _DebugStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'DebugStr');
  late final _DebugStr =
      _DebugStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreak() {
    return _SysBreak();
  }

  late final _SysBreakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SysBreak');
  late final _SysBreak = _SysBreakPtr.asFunction<void Function()>();

  void SysBreakStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakStr(
      debuggerMsg,
    );
  }

  late final _SysBreakStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakStr');
  late final _SysBreakStr =
      _SysBreakStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreakFunc(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakFunc(
      debuggerMsg,
    );
  }

  late final _SysBreakFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakFunc');
  late final _SysBreakFunc =
      _SysBreakFuncPtr.asFunction<void Function(ConstStr255Param)>();

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  int get kCFNotFound => _kCFNotFound.value;

  set kCFNotFound(int value) => _kCFNotFound.value = value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  set kCFNull(CFNullRef value) => _kCFNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  set kCFAllocatorDefault(CFAllocatorRef value) =>
      _kCFAllocatorDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  set kCFAllocatorSystemDefault(CFAllocatorRef value) =>
      _kCFAllocatorSystemDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  set kCFAllocatorMalloc(CFAllocatorRef value) =>
      _kCFAllocatorMalloc.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  set kCFAllocatorMallocZone(CFAllocatorRef value) =>
      _kCFAllocatorMallocZone.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  set kCFAllocatorNull(CFAllocatorRef value) => _kCFAllocatorNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  set kCFAllocatorUseContext(CFAllocatorRef value) =>
      _kCFAllocatorUseContext.value = value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  late final ffi.Pointer<CFArrayCallBacks> _kCFTypeArrayCallBacks =
      _lookup<CFArrayCallBacks>('kCFTypeArrayCallBacks');

  CFArrayCallBacks get kCFTypeArrayCallBacks => _kCFTypeArrayCallBacks.ref;

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate = _CFArrayCreatePtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy = _CFArrayCreateCopyPtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable = _CFArrayCreateMutablePtr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy =
      _CFArrayCreateMutableCopyPtr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue = _CFArrayGetCountOfValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue = _CFArrayContainsValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFArrayRef, CFIndex)>>('CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues = _CFArrayGetValuesPtr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction = _CFArrayApplyFunctionPtr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue = _CFArrayGetFirstIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue = _CFArrayGetLastIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValuesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues = _CFArrayBSearchValuesPtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue = _CFArrayAppendValuePtr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex =
      _CFArrayInsertValueAtIndexPtr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex = _CFArraySetValueAtIndexPtr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex = _CFArrayRemoveValueAtIndexPtr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues =
      _CFArrayRemoveAllValuesPtr.asFunction<void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues = _CFArrayReplaceValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices =
      _CFArrayExchangeValuesAtIndicesPtr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues = _CFArraySortValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray = _CFArrayAppendArrayPtr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  late final ffi.Pointer<CFBagCallBacks> _kCFTypeBagCallBacks =
      _lookup<CFBagCallBacks>('kCFTypeBagCallBacks');

  CFBagCallBacks get kCFTypeBagCallBacks => _kCFTypeBagCallBacks.ref;

  late final ffi.Pointer<CFBagCallBacks> _kCFCopyStringBagCallBacks =
      _lookup<CFBagCallBacks>('kCFCopyStringBagCallBacks');

  CFBagCallBacks get kCFCopyStringBagCallBacks =>
      _kCFCopyStringBagCallBacks.ref;

  int CFBagGetTypeID() {
    return _CFBagGetTypeID();
  }

  late final _CFBagGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID = _CFBagGetTypeIDPtr.asFunction<int Function()>();

  CFBagRef CFBagCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate = _CFBagCreatePtr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy = _CFBagCreateCopyPtr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable = _CFBagCreateMutablePtr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy = _CFBagCreateMutableCopyPtr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount(
      theBag,
    );
  }

  late final _CFBagGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount =
      _CFBagGetCountPtr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue = _CFBagGetCountOfValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagContainsValue');
  late final _CFBagContainsValue = _CFBagContainsValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue = _CFBagGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent = _CFBagGetValueIfPresentPtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues(
      theBag,
      values,
    );
  }

  late final _CFBagGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues = _CFBagGetValuesPtr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction = _CFBagApplyFunctionPtr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue(
      theBag,
      value,
    );
  }

  late final _CFBagAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue = _CFBagAddValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue = _CFBagReplaceValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue(
      theBag,
      value,
    );
  }

  late final _CFBagSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue = _CFBagSetValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue = _CFBagRemoveValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues(
      theBag,
    );
  }

  late final _CFBagRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues =
      _CFBagRemoveAllValuesPtr.asFunction<void Function(CFMutableBagRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFBinaryHeapGetTypeID() {
    return _CFBinaryHeapGetTypeID();
  }

  late final _CFBinaryHeapGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID =
      _CFBinaryHeapGetTypeIDPtr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate = _CFBinaryHeapCreatePtr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy = _CFBinaryHeapCreateCopyPtr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount(
      heap,
    );
  }

  late final _CFBinaryHeapGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount =
      _CFBinaryHeapGetCountPtr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue = _CFBinaryHeapGetCountOfValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue = _CFBinaryHeapContainsValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum = _CFBinaryHeapGetMinimumPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent =
      _CFBinaryHeapGetMinimumIfPresentPtr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues = _CFBinaryHeapGetValuesPtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction =
      _CFBinaryHeapApplyFunctionPtr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue = _CFBinaryHeapAddValuePtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue =
      _CFBinaryHeapRemoveMinimumValuePtr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues = _CFBinaryHeapRemoveAllValuesPtr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID() {
    return _CFBitVectorGetTypeID();
  }

  late final _CFBitVectorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID =
      _CFBitVectorGetTypeIDPtr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate = _CFBitVectorCreatePtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy = _CFBitVectorCreateCopyPtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable = _CFBitVectorCreateMutablePtr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy =
      _CFBitVectorCreateMutableCopyPtr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount(
      bv,
    );
  }

  late final _CFBitVectorGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount =
      _CFBitVectorGetCountPtr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit = _CFBitVectorGetCountOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBitPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit = _CFBitVectorContainsBitPtr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndexPtr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex = _CFBitVectorGetBitAtIndexPtr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits = _CFBitVectorGetBitsPtr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit = _CFBitVectorGetFirstIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit = _CFBitVectorGetLastIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorSetCount');
  late final _CFBitVectorSetCount = _CFBitVectorSetCountPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex = _CFBitVectorFlipBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange)>>('CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits = _CFBitVectorFlipBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex = _CFBitVectorSetBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits = _CFBitVectorSetBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits = _CFBitVectorSetAllBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFTypeDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFTypeDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFTypeDictionaryKeyCallBacks =>
      _kCFTypeDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFCopyStringDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFCopyStringDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFCopyStringDictionaryKeyCallBacks =>
      _kCFCopyStringDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryValueCallBacks>
      _kCFTypeDictionaryValueCallBacks =
      _lookup<CFDictionaryValueCallBacks>('kCFTypeDictionaryValueCallBacks');

  CFDictionaryValueCallBacks get kCFTypeDictionaryValueCallBacks =>
      _kCFTypeDictionaryValueCallBacks.ref;

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  int CFNotificationCenterGetTypeID() {
    return _CFNotificationCenterGetTypeID();
  }

  late final _CFNotificationCenterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID =
      _CFNotificationCenterGetTypeIDPtr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter() {
    return _CFNotificationCenterGetLocalCenter();
  }

  late final _CFNotificationCenterGetLocalCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter =
      _CFNotificationCenterGetLocalCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter() {
    return _CFNotificationCenterGetDistributedCenter();
  }

  late final _CFNotificationCenterGetDistributedCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter =
      _CFNotificationCenterGetDistributedCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter() {
    return _CFNotificationCenterGetDarwinNotifyCenter();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter =
      _CFNotificationCenterGetDarwinNotifyCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    int suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior,
    );
  }

  late final _CFNotificationCenterAddObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef,
                  ffi.Pointer<ffi.Void>,
                  CFNotificationCallback,
                  CFStringRef,
                  ffi.Pointer<ffi.Void>,
                  CFNotificationSuspensionBehavior)>>(
      'CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver =
      _CFNotificationCenterAddObserverPtr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver =
      _CFNotificationCenterRemoveObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver =
      _CFNotificationCenterRemoveEveryObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification =
      _CFNotificationCenterPostNotificationPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions =
      _CFNotificationCenterPostNotificationWithOptionsPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID() {
    return _CFLocaleGetTypeID();
  }

  late final _CFLocaleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID =
      _CFLocaleGetTypeIDPtr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem() {
    return _CFLocaleGetSystem();
  }

  late final _CFLocaleGetSystemPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem =
      _CFLocaleGetSystemPtr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent() {
    return _CFLocaleCopyCurrent();
  }

  late final _CFLocaleCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent =
      _CFLocaleCopyCurrentPtr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers() {
    return _CFLocaleCopyAvailableLocaleIdentifiers();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiersPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers =
      _CFLocaleCopyAvailableLocaleIdentifiersPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes() {
    return _CFLocaleCopyISOLanguageCodes();
  }

  late final _CFLocaleCopyISOLanguageCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes =
      _CFLocaleCopyISOLanguageCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes() {
    return _CFLocaleCopyISOCountryCodes();
  }

  late final _CFLocaleCopyISOCountryCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes =
      _CFLocaleCopyISOCountryCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes() {
    return _CFLocaleCopyISOCurrencyCodes();
  }

  late final _CFLocaleCopyISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes =
      _CFLocaleCopyISOCurrencyCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes() {
    return _CFLocaleCopyCommonISOCurrencyCodes();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes =
      _CFLocaleCopyCommonISOCurrencyCodesPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages() {
    return _CFLocaleCopyPreferredLanguages();
  }

  late final _CFLocaleCopyPreferredLanguagesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages =
      _CFLocaleCopyPreferredLanguagesPtr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString =
      _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString =
      _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr.asFunction<
          int Function(CFLocaleIdentifier)>();

  int CFLocaleGetLanguageCharacterDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageCharacterDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageCharacterDirectionPtr = _lookup<
          ffi.NativeFunction<CFLocaleLanguageDirection Function(CFStringRef)>>(
      'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection =
      _CFLocaleGetLanguageCharacterDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  int CFLocaleGetLanguageLineDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageLineDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageLineDirectionPtr = _lookup<
          ffi.NativeFunction<CFLocaleLanguageDirection Function(CFStringRef)>>(
      'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection =
      _CFLocaleGetLanguageLineDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifierPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier =
      _CFLocaleCreateComponentsFromLocaleIdentifierPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponentsPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents =
      _CFLocaleCreateLocaleIdentifierFromComponentsPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreatePtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate = _CFLocaleCreatePtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleRef)>>('CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy = _CFLocaleCreateCopyPtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier(
      locale,
    );
  }

  late final _CFLocaleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier = _CFLocaleGetIdentifierPtr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValuePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue = _CFLocaleGetValuePtr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue =
      _CFLocaleCopyDisplayNameForPropertyValuePtr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFLocaleCurrentLocaleDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFLocaleCurrentLocaleDidChangeNotification');

  CFNotificationName get kCFLocaleCurrentLocaleDidChangeNotification =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value;

  set kCFLocaleCurrentLocaleDidChangeNotification(CFNotificationName value) =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleIdentifier');

  CFLocaleKey get kCFLocaleIdentifier => _kCFLocaleIdentifier.value;

  set kCFLocaleIdentifier(CFLocaleKey value) =>
      _kCFLocaleIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleLanguageCode =
      _lookup<CFLocaleKey>('kCFLocaleLanguageCode');

  CFLocaleKey get kCFLocaleLanguageCode => _kCFLocaleLanguageCode.value;

  set kCFLocaleLanguageCode(CFLocaleKey value) =>
      _kCFLocaleLanguageCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCountryCode =
      _lookup<CFLocaleKey>('kCFLocaleCountryCode');

  CFLocaleKey get kCFLocaleCountryCode => _kCFLocaleCountryCode.value;

  set kCFLocaleCountryCode(CFLocaleKey value) =>
      _kCFLocaleCountryCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleScriptCode =
      _lookup<CFLocaleKey>('kCFLocaleScriptCode');

  CFLocaleKey get kCFLocaleScriptCode => _kCFLocaleScriptCode.value;

  set kCFLocaleScriptCode(CFLocaleKey value) =>
      _kCFLocaleScriptCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleVariantCode =
      _lookup<CFLocaleKey>('kCFLocaleVariantCode');

  CFLocaleKey get kCFLocaleVariantCode => _kCFLocaleVariantCode.value;

  set kCFLocaleVariantCode(CFLocaleKey value) =>
      _kCFLocaleVariantCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleExemplarCharacterSet =
      _lookup<CFLocaleKey>('kCFLocaleExemplarCharacterSet');

  CFLocaleKey get kCFLocaleExemplarCharacterSet =>
      _kCFLocaleExemplarCharacterSet.value;

  set kCFLocaleExemplarCharacterSet(CFLocaleKey value) =>
      _kCFLocaleExemplarCharacterSet.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendarIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCalendarIdentifier');

  CFLocaleKey get kCFLocaleCalendarIdentifier =>
      _kCFLocaleCalendarIdentifier.value;

  set kCFLocaleCalendarIdentifier(CFLocaleKey value) =>
      _kCFLocaleCalendarIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendar =
      _lookup<CFLocaleKey>('kCFLocaleCalendar');

  CFLocaleKey get kCFLocaleCalendar => _kCFLocaleCalendar.value;

  set kCFLocaleCalendar(CFLocaleKey value) => _kCFLocaleCalendar.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollationIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollationIdentifier');

  CFLocaleKey get kCFLocaleCollationIdentifier =>
      _kCFLocaleCollationIdentifier.value;

  set kCFLocaleCollationIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollationIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleUsesMetricSystem =
      _lookup<CFLocaleKey>('kCFLocaleUsesMetricSystem');

  CFLocaleKey get kCFLocaleUsesMetricSystem => _kCFLocaleUsesMetricSystem.value;

  set kCFLocaleUsesMetricSystem(CFLocaleKey value) =>
      _kCFLocaleUsesMetricSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleMeasurementSystem =
      _lookup<CFLocaleKey>('kCFLocaleMeasurementSystem');

  CFLocaleKey get kCFLocaleMeasurementSystem =>
      _kCFLocaleMeasurementSystem.value;

  set kCFLocaleMeasurementSystem(CFLocaleKey value) =>
      _kCFLocaleMeasurementSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleDecimalSeparator =
      _lookup<CFLocaleKey>('kCFLocaleDecimalSeparator');

  CFLocaleKey get kCFLocaleDecimalSeparator => _kCFLocaleDecimalSeparator.value;

  set kCFLocaleDecimalSeparator(CFLocaleKey value) =>
      _kCFLocaleDecimalSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleGroupingSeparator =
      _lookup<CFLocaleKey>('kCFLocaleGroupingSeparator');

  CFLocaleKey get kCFLocaleGroupingSeparator =>
      _kCFLocaleGroupingSeparator.value;

  set kCFLocaleGroupingSeparator(CFLocaleKey value) =>
      _kCFLocaleGroupingSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencySymbol =
      _lookup<CFLocaleKey>('kCFLocaleCurrencySymbol');

  CFLocaleKey get kCFLocaleCurrencySymbol => _kCFLocaleCurrencySymbol.value;

  set kCFLocaleCurrencySymbol(CFLocaleKey value) =>
      _kCFLocaleCurrencySymbol.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencyCode =
      _lookup<CFLocaleKey>('kCFLocaleCurrencyCode');

  CFLocaleKey get kCFLocaleCurrencyCode => _kCFLocaleCurrencyCode.value;

  set kCFLocaleCurrencyCode(CFLocaleKey value) =>
      _kCFLocaleCurrencyCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollatorIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollatorIdentifier');

  CFLocaleKey get kCFLocaleCollatorIdentifier =>
      _kCFLocaleCollatorIdentifier.value;

  set kCFLocaleCollatorIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollatorIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationBeginDelimiterKey =>
      _kCFLocaleQuotationBeginDelimiterKey.value;

  set kCFLocaleQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationEndDelimiterKey =>
      _kCFLocaleQuotationEndDelimiterKey.value;

  set kCFLocaleQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationBeginDelimiterKey =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value;

  set kCFLocaleAlternateQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationEndDelimiterKey =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value;

  set kCFLocaleAlternateQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFGregorianCalendar =
      _lookup<CFCalendarIdentifier>('kCFGregorianCalendar');

  CFCalendarIdentifier get kCFGregorianCalendar => _kCFGregorianCalendar.value;

  set kCFGregorianCalendar(CFCalendarIdentifier value) =>
      _kCFGregorianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFBuddhistCalendar =
      _lookup<CFCalendarIdentifier>('kCFBuddhistCalendar');

  CFCalendarIdentifier get kCFBuddhistCalendar => _kCFBuddhistCalendar.value;

  set kCFBuddhistCalendar(CFCalendarIdentifier value) =>
      _kCFBuddhistCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFChineseCalendar =
      _lookup<CFCalendarIdentifier>('kCFChineseCalendar');

  CFCalendarIdentifier get kCFChineseCalendar => _kCFChineseCalendar.value;

  set kCFChineseCalendar(CFCalendarIdentifier value) =>
      _kCFChineseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFHebrewCalendar =
      _lookup<CFCalendarIdentifier>('kCFHebrewCalendar');

  CFCalendarIdentifier get kCFHebrewCalendar => _kCFHebrewCalendar.value;

  set kCFHebrewCalendar(CFCalendarIdentifier value) =>
      _kCFHebrewCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCalendar');

  CFCalendarIdentifier get kCFIslamicCalendar => _kCFIslamicCalendar.value;

  set kCFIslamicCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCivilCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCivilCalendar');

  CFCalendarIdentifier get kCFIslamicCivilCalendar =>
      _kCFIslamicCivilCalendar.value;

  set kCFIslamicCivilCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCivilCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFJapaneseCalendar =
      _lookup<CFCalendarIdentifier>('kCFJapaneseCalendar');

  CFCalendarIdentifier get kCFJapaneseCalendar => _kCFJapaneseCalendar.value;

  set kCFJapaneseCalendar(CFCalendarIdentifier value) =>
      _kCFJapaneseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFRepublicOfChinaCalendar =
      _lookup<CFCalendarIdentifier>('kCFRepublicOfChinaCalendar');

  CFCalendarIdentifier get kCFRepublicOfChinaCalendar =>
      _kCFRepublicOfChinaCalendar.value;

  set kCFRepublicOfChinaCalendar(CFCalendarIdentifier value) =>
      _kCFRepublicOfChinaCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFPersianCalendar =
      _lookup<CFCalendarIdentifier>('kCFPersianCalendar');

  CFCalendarIdentifier get kCFPersianCalendar => _kCFPersianCalendar.value;

  set kCFPersianCalendar(CFCalendarIdentifier value) =>
      _kCFPersianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIndianCalendar =
      _lookup<CFCalendarIdentifier>('kCFIndianCalendar');

  CFCalendarIdentifier get kCFIndianCalendar => _kCFIndianCalendar.value;

  set kCFIndianCalendar(CFCalendarIdentifier value) =>
      _kCFIndianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFISO8601Calendar =
      _lookup<CFCalendarIdentifier>('kCFISO8601Calendar');

  CFCalendarIdentifier get kCFISO8601Calendar => _kCFISO8601Calendar.value;

  set kCFISO8601Calendar(CFCalendarIdentifier value) =>
      _kCFISO8601Calendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicTabularCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicTabularCalendar');

  CFCalendarIdentifier get kCFIslamicTabularCalendar =>
      _kCFIslamicTabularCalendar.value;

  set kCFIslamicTabularCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicTabularCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicUmmAlQuraCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicUmmAlQuraCalendar');

  CFCalendarIdentifier get kCFIslamicUmmAlQuraCalendar =>
      _kCFIslamicUmmAlQuraCalendar.value;

  set kCFIslamicUmmAlQuraCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicUmmAlQuraCalendar.value = value;

  double CFAbsoluteTimeGetCurrent() {
    return _CFAbsoluteTimeGetCurrent();
  }

  late final _CFAbsoluteTimeGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent =
      _CFAbsoluteTimeGetCurrentPtr.asFunction<double Function()>();

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1970 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1970');

  double get kCFAbsoluteTimeIntervalSince1970 =>
      _kCFAbsoluteTimeIntervalSince1970.value;

  set kCFAbsoluteTimeIntervalSince1970(double value) =>
      _kCFAbsoluteTimeIntervalSince1970.value = value;

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1904 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1904');

  double get kCFAbsoluteTimeIntervalSince1904 =>
      _kCFAbsoluteTimeIntervalSince1904.value;

  set kCFAbsoluteTimeIntervalSince1904(double value) =>
      _kCFAbsoluteTimeIntervalSince1904.value = value;

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate =
      _CFDateCreatePtr.asFunction<CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  int CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDateCompare(
      theDate,
      otherDate,
      context,
    );
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid = _CFGregorianDateIsValidPtr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime =
      _CFGregorianDateGetAbsoluteTimePtr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDatePtr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate =
      _CFAbsoluteTimeGetGregorianDatePtr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits =
      _CFAbsoluteTimeAddGregorianUnitsPtr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeekPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek = _CFAbsoluteTimeGetDayOfWeekPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear = _CFAbsoluteTimeGetDayOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear = _CFAbsoluteTimeGetWeekOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength =
      _CFDataSetLengthPtr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, CFDataSearchFlags)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID() {
    return _CFCharacterSetGetTypeID();
  }

  late final _CFCharacterSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID =
      _CFCharacterSetGetTypeIDPtr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefinedPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFCharacterSetPredefinedSet)>>('CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined = _CFCharacterSetGetPredefinedPtr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange =
      _CFCharacterSetCreateWithCharactersInRangePtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString =
      _CFCharacterSetCreateWithCharactersInStringPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation =
      _CFCharacterSetCreateWithBitmapRepresentationPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSetPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet =
      _CFCharacterSetCreateInvertedSetPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet = _CFCharacterSetIsSupersetOfSetPtr
      .asFunction<int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlanePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane =
      _CFCharacterSetHasMemberInPlanePtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable = _CFCharacterSetCreateMutablePtr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy =
      _CFCharacterSetCreateCopyPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy =
      _CFCharacterSetCreateMutableCopyPtr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMemberPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember =
      _CFCharacterSetIsCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMemberPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember =
      _CFCharacterSetIsLongCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation =
      _CFCharacterSetCreateBitmapRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange =
      _CFCharacterSetAddCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange =
      _CFCharacterSetRemoveCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString =
      _CFCharacterSetAddCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString =
      _CFCharacterSetRemoveCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion = _CFCharacterSetUnionPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect = _CFCharacterSetIntersectPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert(
      theSet,
    );
  }

  late final _CFCharacterSetInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert = _CFCharacterSetInvertPtr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<ffi.Char>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring = _CFStringCreateWithSubstringPtr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef)>>('CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFMutableStringRef CFStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>)>();

  int CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
    CFLocaleRef locale,
  ) {
    return _CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
      locale,
    );
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFStringCompareFlags,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  int CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
  ) {
    return _CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
    );
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(CFStringRef, CFStringRef, CFRange,
              CFStringCompareFlags)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  int CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    int compareOptions,
  ) {
    return _CFStringCompare(
      theString1,
      theString2,
      compareOptions,
    );
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(CFStringRef, CFStringRef,
              CFStringCompareFlags)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  int CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFStringCompareFlags,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  int CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFStringCompareFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              CFStringCompareFlags)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    int compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, CFStringCompareFlags)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  int CFStringFindCharacterFromSet(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFCharacterSetRef,
              CFRange,
              CFStringCompareFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString = _CFStringAppendPascalStringPtr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString(
    CFMutableStringRef theString,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<ffi.Char>, int)>();

  void CFStringAppendFormat(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  int CFStringFindAndReplace(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, CFStringCompareFlags)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize(
    CFMutableStringRef theString,
    int theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef,
              CFStringNormalizationForm)>>('CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold(
    CFMutableStringRef theString,
    int theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringCompareFlags,
              CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  set kCFStringTransformStripCombiningMarks(CFStringRef value) =>
      _kCFStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  set kCFStringTransformToLatin(CFStringRef value) =>
      _kCFStringTransformToLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  set kCFStringTransformFullwidthHalfwidth(CFStringRef value) =>
      _kCFStringTransformFullwidthHalfwidth.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  set kCFStringTransformLatinKatakana(CFStringRef value) =>
      _kCFStringTransformLatinKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  set kCFStringTransformLatinHiragana(CFStringRef value) =>
      _kCFStringTransformLatinHiragana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  set kCFStringTransformHiraganaKatakana(CFStringRef value) =>
      _kCFStringTransformHiraganaKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  set kCFStringTransformMandarinLatin(CFStringRef value) =>
      _kCFStringTransformMandarinLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  set kCFStringTransformLatinHangul(CFStringRef value) =>
      _kCFStringTransformLatinHangul.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  set kCFStringTransformLatinArabic(CFStringRef value) =>
      _kCFStringTransformLatinArabic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  set kCFStringTransformLatinHebrew(CFStringRef value) =>
      _kCFStringTransformLatinHebrew.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  set kCFStringTransformLatinThai(CFStringRef value) =>
      _kCFStringTransformLatinThai.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  set kCFStringTransformLatinCyrillic(CFStringRef value) =>
      _kCFStringTransformLatinCyrillic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  set kCFStringTransformLatinGreek(CFStringRef value) =>
      _kCFStringTransformLatinGreek.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  set kCFStringTransformToXMLHex(CFStringRef value) =>
      _kCFStringTransformToXMLHex.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  set kCFStringTransformToUnicodeName(CFStringRef value) =>
      _kCFStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  set kCFStringTransformStripDiacritics(CFStringRef value) =>
      _kCFStringTransformStripDiacritics.value = value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(ffi.UnsignedLong)>>(
          'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  void CFShow(
    CFTypeRef obj,
  ) {
    return _CFShow(
      obj,
    );
  }

  late final _CFShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow = _CFShowPtr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr(
    CFStringRef str,
  ) {
    return _CFShowStr(
      str,
    );
  }

  late final _CFShowStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr =
      _CFShowStrPtr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString(
    ffi.Pointer<ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString(
      cStr,
    );
  }

  late final ___CFStringMakeConstantStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Char>)>>(
          '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString = ___CFStringMakeConstantStringPtr
      .asFunction<CFStringRef Function(ffi.Pointer<ffi.Char>)>();

  int CFTimeZoneGetTypeID() {
    return _CFTimeZoneGetTypeID();
  }

  late final _CFTimeZoneGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID =
      _CFTimeZoneGetTypeIDPtr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem() {
    return _CFTimeZoneCopySystem();
  }

  late final _CFTimeZoneCopySystemPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem =
      _CFTimeZoneCopySystemPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem() {
    return _CFTimeZoneResetSystem();
  }

  late final _CFTimeZoneResetSystemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem =
      _CFTimeZoneResetSystemPtr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault() {
    return _CFTimeZoneCopyDefault();
  }

  late final _CFTimeZoneCopyDefaultPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault =
      _CFTimeZoneCopyDefaultPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault(
      tz,
    );
  }

  late final _CFTimeZoneSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault =
      _CFTimeZoneSetDefaultPtr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames() {
    return _CFTimeZoneCopyKnownNames();
  }

  late final _CFTimeZoneCopyKnownNamesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames =
      _CFTimeZoneCopyKnownNamesPtr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary() {
    return _CFTimeZoneCopyAbbreviationDictionary();
  }

  late final _CFTimeZoneCopyAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary =
      _CFTimeZoneCopyAbbreviationDictionaryPtr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary =
      _CFTimeZoneSetAbbreviationDictionaryPtr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate = _CFTimeZoneCreatePtr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT =
      _CFTimeZoneCreateWithTimeIntervalFromGMTPtr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithNamePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName = _CFTimeZoneCreateWithNamePtr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName(
      tz,
    );
  }

  late final _CFTimeZoneGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName =
      _CFTimeZoneGetNamePtr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData(
      tz,
    );
  }

  late final _CFTimeZoneGetDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData =
      _CFTimeZoneGetDataPtr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT = _CFTimeZoneGetSecondsFromGMTPtr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation = _CFTimeZoneCopyAbbreviationPtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTimePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime =
      _CFTimeZoneIsDaylightSavingTimePtr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffsetPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset =
      _CFTimeZoneGetDaylightSavingTimeOffsetPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition =
      _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName(
    CFTimeZoneRef tz,
    int style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName(
      tz,
      style,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedNamePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, CFTimeZoneNameStyle,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName = _CFTimeZoneCopyLocalizedNamePtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFTimeZoneSystemTimeZoneDidChangeNotification');

  CFNotificationName get kCFTimeZoneSystemTimeZoneDidChangeNotification =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value;

  set kCFTimeZoneSystemTimeZoneDidChangeNotification(
          CFNotificationName value) =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value = value;

  int CFCalendarGetTypeID() {
    return _CFCalendarGetTypeID();
  }

  late final _CFCalendarGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID =
      _CFCalendarGetTypeIDPtr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent() {
    return _CFCalendarCopyCurrent();
  }

  late final _CFCalendarCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent =
      _CFCalendarCopyCurrentPtr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifierPtr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier =
      _CFCalendarCreateWithIdentifierPtr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier = _CFCalendarGetIdentifierPtr.asFunction<
      CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale(
      calendar,
    );
  }

  late final _CFCalendarCopyLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale = _CFCalendarCopyLocalePtr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale = _CFCalendarSetLocalePtr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZonePtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone = _CFCalendarCopyTimeZonePtr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZonePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone = _CFCalendarSetTimeZonePtr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday =
      _CFCalendarGetFirstWeekdayPtr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday = _CFCalendarSetFirstWeekdayPtr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek =
      _CFCalendarGetMinimumDaysInFirstWeekPtr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek =
      _CFCalendarSetMinimumDaysInFirstWeekPtr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFCalendarUnit)>>(
      'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit =
      _CFCalendarGetMinimumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFCalendarUnit)>>(
      'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit =
      _CFCalendarGetMaximumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetRangeOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, CFCalendarUnit, CFCalendarUnit,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit = _CFCalendarGetRangeOfUnitPtr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetOrdinalityOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, CFCalendarUnit, CFCalendarUnit,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit = _CFCalendarGetOrdinalityOfUnitPtr
      .asFunction<int Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetTimeRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
    double at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit(
      calendar,
      unit,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFCalendarUnit,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit =
      _CFCalendarGetTimeRangeOfUnitPtr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime =
      _CFCalendarComposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime =
      _CFCalendarDecomposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<ffi.Char>)>();

  int CFCalendarAddComponents(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponentsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents = _CFCalendarAddComponentsPtr.asFunction<
      int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
          ffi.Pointer<ffi.Char>)>();

  int CFCalendarGetComponentDifference(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifferencePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference =
      _CFCalendarGetComponentDifferencePtr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    CFAllocatorRef allocator,
    int formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
          ffi.NativeFunction<
              CFDateFormatterRef Function(
                  CFAllocatorRef, CFISO8601DateFormatOptions)>>(
      'CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int dateStyle,
    int timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle,
      timeStyle,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(
              CFAllocatorRef,
              CFLocaleRef,
              CFDateFormatterStyle,
              CFDateFormatterStyle)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  int CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetDateStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetDateStylePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterStyle Function(
              CFDateFormatterRef)>>('CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  int CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetTimeStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetTimeStylePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterStyle Function(
              CFDateFormatterRef)>>('CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDateFormatterRef, CFStringRef)>>('CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  set kCFDateFormatterIsLenient(CFDateFormatterKey value) =>
      _kCFDateFormatterIsLenient.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  set kCFDateFormatterTimeZone(CFDateFormatterKey value) =>
      _kCFDateFormatterTimeZone.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  set kCFDateFormatterCalendarName(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendarName.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  set kCFDateFormatterDefaultFormat(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  set kCFDateFormatterTwoDigitStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterTwoDigitStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  set kCFDateFormatterDefaultDate(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  set kCFDateFormatterCalendar(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendar.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  set kCFDateFormatterEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  set kCFDateFormatterMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  set kCFDateFormatterShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  set kCFDateFormatterWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  set kCFDateFormatterShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  set kCFDateFormatterAMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterAMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  set kCFDateFormatterPMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterPMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  set kCFDateFormatterLongEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterLongEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  set kCFDateFormatterVeryShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  set kCFDateFormatterStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  set kCFDateFormatterShortStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  set kCFDateFormatterVeryShortStandaloneMonthSymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  set kCFDateFormatterVeryShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  set kCFDateFormatterStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterShortStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterVeryShortStandaloneWeekdaySymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  set kCFDateFormatterQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  set kCFDateFormatterShortQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  set kCFDateFormatterStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  set kCFDateFormatterShortStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  set kCFDateFormatterGregorianStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterGregorianStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  set kCFDateFormatterDoesRelativeDateFormattingKey(CFDateFormatterKey value) =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value = value;

  int CFErrorGetTypeID() {
    return _CFErrorGetTypeID();
  }

  late final _CFErrorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID =
      _CFErrorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainPOSIX =
      _lookup<CFErrorDomain>('kCFErrorDomainPOSIX');

  CFErrorDomain get kCFErrorDomainPOSIX => _kCFErrorDomainPOSIX.value;

  set kCFErrorDomainPOSIX(CFErrorDomain value) =>
      _kCFErrorDomainPOSIX.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainOSStatus =
      _lookup<CFErrorDomain>('kCFErrorDomainOSStatus');

  CFErrorDomain get kCFErrorDomainOSStatus => _kCFErrorDomainOSStatus.value;

  set kCFErrorDomainOSStatus(CFErrorDomain value) =>
      _kCFErrorDomainOSStatus.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainMach =
      _lookup<CFErrorDomain>('kCFErrorDomainMach');

  CFErrorDomain get kCFErrorDomainMach => _kCFErrorDomainMach.value;

  set kCFErrorDomainMach(CFErrorDomain value) =>
      _kCFErrorDomainMach.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainCocoa =
      _lookup<CFErrorDomain>('kCFErrorDomainCocoa');

  CFErrorDomain get kCFErrorDomainCocoa => _kCFErrorDomainCocoa.value;

  set kCFErrorDomainCocoa(CFErrorDomain value) =>
      _kCFErrorDomainCocoa.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedDescriptionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedDescriptionKey');

  CFStringRef get kCFErrorLocalizedDescriptionKey =>
      _kCFErrorLocalizedDescriptionKey.value;

  set kCFErrorLocalizedDescriptionKey(CFStringRef value) =>
      _kCFErrorLocalizedDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureKey');

  CFStringRef get kCFErrorLocalizedFailureKey =>
      _kCFErrorLocalizedFailureKey.value;

  set kCFErrorLocalizedFailureKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureReasonKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureReasonKey');

  CFStringRef get kCFErrorLocalizedFailureReasonKey =>
      _kCFErrorLocalizedFailureReasonKey.value;

  set kCFErrorLocalizedFailureReasonKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureReasonKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedRecoverySuggestionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedRecoverySuggestionKey');

  CFStringRef get kCFErrorLocalizedRecoverySuggestionKey =>
      _kCFErrorLocalizedRecoverySuggestionKey.value;

  set kCFErrorLocalizedRecoverySuggestionKey(CFStringRef value) =>
      _kCFErrorLocalizedRecoverySuggestionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorDescriptionKey =
      _lookup<CFStringRef>('kCFErrorDescriptionKey');

  CFStringRef get kCFErrorDescriptionKey => _kCFErrorDescriptionKey.value;

  set kCFErrorDescriptionKey(CFStringRef value) =>
      _kCFErrorDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorUnderlyingErrorKey =
      _lookup<CFStringRef>('kCFErrorUnderlyingErrorKey');

  CFStringRef get kCFErrorUnderlyingErrorKey =>
      _kCFErrorUnderlyingErrorKey.value;

  set kCFErrorUnderlyingErrorKey(CFStringRef value) =>
      _kCFErrorUnderlyingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorURLKey =
      _lookup<CFStringRef>('kCFErrorURLKey');

  CFStringRef get kCFErrorURLKey => _kCFErrorURLKey.value;

  set kCFErrorURLKey(CFStringRef value) => _kCFErrorURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorFilePathKey =
      _lookup<CFStringRef>('kCFErrorFilePathKey');

  CFStringRef get kCFErrorFilePathKey => _kCFErrorFilePathKey.value;

  set kCFErrorFilePathKey(CFStringRef value) =>
      _kCFErrorFilePathKey.value = value;

  CFErrorRef CFErrorCreate(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate = _CFErrorCreatePtr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValuesPtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues =
      _CFErrorCreateWithUserInfoKeysAndValuesPtr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain(
      err,
    );
  }

  late final _CFErrorGetDomainPtr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain =
      _CFErrorGetDomainPtr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode(
      err,
    );
  }

  late final _CFErrorGetCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode =
      _CFErrorGetCodePtr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo(
      err,
    );
  }

  late final _CFErrorCopyUserInfoPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo = _CFErrorCopyUserInfoPtr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription(
      err,
    );
  }

  late final _CFErrorCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription =
      _CFErrorCopyDescriptionPtr.asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason(
      err,
    );
  }

  late final _CFErrorCopyFailureReasonPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason = _CFErrorCopyFailureReasonPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion = _CFErrorCopyRecoverySuggestionPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  set kCFBooleanTrue(CFBooleanRef value) => _kCFBooleanTrue.value = value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanFalse =
      _lookup<CFBooleanRef>('kCFBooleanFalse');

  CFBooleanRef get kCFBooleanFalse => _kCFBooleanFalse.value;

  set kCFBooleanFalse(CFBooleanRef value) => _kCFBooleanFalse.value = value;

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  int CFBooleanGetValue(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<int Function(CFBooleanRef)>();

  late final ffi.Pointer<CFNumberRef> _kCFNumberPositiveInfinity =
      _lookup<CFNumberRef>('kCFNumberPositiveInfinity');

  CFNumberRef get kCFNumberPositiveInfinity => _kCFNumberPositiveInfinity.value;

  set kCFNumberPositiveInfinity(CFNumberRef value) =>
      _kCFNumberPositiveInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNegativeInfinity =
      _lookup<CFNumberRef>('kCFNumberNegativeInfinity');

  CFNumberRef get kCFNumberNegativeInfinity => _kCFNumberNegativeInfinity.value;

  set kCFNumberNegativeInfinity(CFNumberRef value) =>
      _kCFNumberNegativeInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNaN =
      _lookup<CFNumberRef>('kCFNumberNaN');

  CFNumberRef get kCFNumberNaN => _kCFNumberNaN.value;

  set kCFNumberNaN(CFNumberRef value) => _kCFNumberNaN.value = value;

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate(
    CFAllocatorRef allocator,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate(
      allocator,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberType,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate = _CFNumberCreatePtr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberGetType(
    CFNumberRef number,
  ) {
    return _CFNumberGetType(
      number,
    );
  }

  late final _CFNumberGetTypePtr =
      _lookup<ffi.NativeFunction<CFNumberType Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType =
      _CFNumberGetTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize(
      number,
    );
  }

  late final _CFNumberGetByteSizePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize =
      _CFNumberGetByteSizePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType(
      number,
    );
  }

  late final _CFNumberIsFloatTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType =
      _CFNumberIsFloatTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetValue(
    CFNumberRef number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, CFNumberType,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberCompare(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFNumberCompare(
      number,
      otherNumber,
      context,
    );
  }

  late final _CFNumberComparePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare = _CFNumberComparePtr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID() {
    return _CFNumberFormatterGetTypeID();
  }

  late final _CFNumberFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID =
      _CFNumberFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int style,
  ) {
    return _CFNumberFormatterCreate(
      allocator,
      locale,
      style,
    );
  }

  late final _CFNumberFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              CFNumberFormatterStyle)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate = _CFNumberFormatterCreatePtr.asFunction<
      CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale = _CFNumberFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  int CFNumberFormatterGetStyle(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetStyle(
      formatter,
    );
  }

  late final _CFNumberFormatterGetStylePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterStyle Function(
              CFNumberFormatterRef)>>('CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle = _CFNumberFormatterGetStylePtr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat = _CFNumberFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat = _CFNumberFormatterSetFormatPtr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumberPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber =
      _CFNumberFormatterCreateStringWithNumberPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue(
      allocator,
      formatter,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValuePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  CFNumberType, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue =
      _CFNumberFormatterCreateStringWithValuePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString =
      _CFNumberFormatterCreateNumberFromStringPtr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  int CFNumberFormatterGetValueFromString(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString(
      formatter,
      string,
      rangep,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFNumberType,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString =
      _CFNumberFormatterGetValueFromStringPtr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty =
      _CFNumberFormatterSetPropertyPtr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty =
      _CFNumberFormatterCopyPropertyPtr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterCurrencyCode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencyCode');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyCode =>
      _kCFNumberFormatterCurrencyCode.value;

  set kCFNumberFormatterCurrencyCode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyCode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDecimalSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterDecimalSeparator =>
      _kCFNumberFormatterDecimalSeparator.value;

  set kCFNumberFormatterDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyDecimalSeparator =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value;

  set kCFNumberFormatterCurrencyDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterAlwaysShowDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterAlwaysShowDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterAlwaysShowDecimalSeparator =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value;

  set kCFNumberFormatterAlwaysShowDecimalSeparator(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSeparator =>
      _kCFNumberFormatterGroupingSeparator.value;

  set kCFNumberFormatterGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterUseGroupingSeparator =>
      _kCFNumberFormatterUseGroupingSeparator.value;

  set kCFNumberFormatterUseGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPercentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPercentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPercentSymbol =>
      _kCFNumberFormatterPercentSymbol.value;

  set kCFNumberFormatterPercentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPercentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterZeroSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterZeroSymbol');

  CFNumberFormatterKey get kCFNumberFormatterZeroSymbol =>
      _kCFNumberFormatterZeroSymbol.value;

  set kCFNumberFormatterZeroSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterZeroSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterNaNSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNaNSymbol');

  CFNumberFormatterKey get kCFNumberFormatterNaNSymbol =>
      _kCFNumberFormatterNaNSymbol.value;

  set kCFNumberFormatterNaNSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNaNSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInfinitySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterInfinitySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInfinitySymbol =>
      _kCFNumberFormatterInfinitySymbol.value;

  set kCFNumberFormatterInfinitySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterInfinitySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMinusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinusSign');

  CFNumberFormatterKey get kCFNumberFormatterMinusSign =>
      _kCFNumberFormatterMinusSign.value;

  set kCFNumberFormatterMinusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterPlusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPlusSign');

  CFNumberFormatterKey get kCFNumberFormatterPlusSign =>
      _kCFNumberFormatterPlusSign.value;

  set kCFNumberFormatterPlusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPlusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterCurrencySymbol =>
      _kCFNumberFormatterCurrencySymbol.value;

  set kCFNumberFormatterCurrencySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterExponentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterExponentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterExponentSymbol =>
      _kCFNumberFormatterExponentSymbol.value;

  set kCFNumberFormatterExponentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterExponentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinIntegerDigits =>
      _kCFNumberFormatterMinIntegerDigits.value;

  set kCFNumberFormatterMinIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxIntegerDigits =>
      _kCFNumberFormatterMaxIntegerDigits.value;

  set kCFNumberFormatterMaxIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinFractionDigits =>
      _kCFNumberFormatterMinFractionDigits.value;

  set kCFNumberFormatterMinFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxFractionDigits =>
      _kCFNumberFormatterMaxFractionDigits.value;

  set kCFNumberFormatterMaxFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSize =>
      _kCFNumberFormatterGroupingSize.value;

  set kCFNumberFormatterGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterSecondaryGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterSecondaryGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterSecondaryGroupingSize =>
      _kCFNumberFormatterSecondaryGroupingSize.value;

  set kCFNumberFormatterSecondaryGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterSecondaryGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterRoundingMode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingMode');

  CFNumberFormatterKey get kCFNumberFormatterRoundingMode =>
      _kCFNumberFormatterRoundingMode.value;

  set kCFNumberFormatterRoundingMode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingMode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterRoundingIncrement =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingIncrement');

  CFNumberFormatterKey get kCFNumberFormatterRoundingIncrement =>
      _kCFNumberFormatterRoundingIncrement.value;

  set kCFNumberFormatterRoundingIncrement(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingIncrement.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterFormatWidth =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterFormatWidth');

  CFNumberFormatterKey get kCFNumberFormatterFormatWidth =>
      _kCFNumberFormatterFormatWidth.value;

  set kCFNumberFormatterFormatWidth(CFNumberFormatterKey value) =>
      _kCFNumberFormatterFormatWidth.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingPosition =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingPosition');

  CFNumberFormatterKey get kCFNumberFormatterPaddingPosition =>
      _kCFNumberFormatterPaddingPosition.value;

  set kCFNumberFormatterPaddingPosition(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingPosition.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingCharacter =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingCharacter');

  CFNumberFormatterKey get kCFNumberFormatterPaddingCharacter =>
      _kCFNumberFormatterPaddingCharacter.value;

  set kCFNumberFormatterPaddingCharacter(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingCharacter.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDefaultFormat =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDefaultFormat');

  CFNumberFormatterKey get kCFNumberFormatterDefaultFormat =>
      _kCFNumberFormatterDefaultFormat.value;

  set kCFNumberFormatterDefaultFormat(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMultiplier =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMultiplier');

  CFNumberFormatterKey get kCFNumberFormatterMultiplier =>
      _kCFNumberFormatterMultiplier.value;

  set kCFNumberFormatterMultiplier(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMultiplier.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositivePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositivePrefix');

  CFNumberFormatterKey get kCFNumberFormatterPositivePrefix =>
      _kCFNumberFormatterPositivePrefix.value;

  set kCFNumberFormatterPositivePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositivePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositiveSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositiveSuffix');

  CFNumberFormatterKey get kCFNumberFormatterPositiveSuffix =>
      _kCFNumberFormatterPositiveSuffix.value;

  set kCFNumberFormatterPositiveSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositiveSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativePrefix');

  CFNumberFormatterKey get kCFNumberFormatterNegativePrefix =>
      _kCFNumberFormatterNegativePrefix.value;

  set kCFNumberFormatterNegativePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativeSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativeSuffix');

  CFNumberFormatterKey get kCFNumberFormatterNegativeSuffix =>
      _kCFNumberFormatterNegativeSuffix.value;

  set kCFNumberFormatterNegativeSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativeSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPerMillSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPerMillSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPerMillSymbol =>
      _kCFNumberFormatterPerMillSymbol.value;

  set kCFNumberFormatterPerMillSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPerMillSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInternationalCurrencySymbol =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterInternationalCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInternationalCurrencySymbol =>
      _kCFNumberFormatterInternationalCurrencySymbol.value;

  set kCFNumberFormatterInternationalCurrencySymbol(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterInternationalCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyGroupingSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyGroupingSeparator =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value;

  set kCFNumberFormatterCurrencyGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterIsLenient =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterIsLenient');

  CFNumberFormatterKey get kCFNumberFormatterIsLenient =>
      _kCFNumberFormatterIsLenient.value;

  set kCFNumberFormatterIsLenient(CFNumberFormatterKey value) =>
      _kCFNumberFormatterIsLenient.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterUseSignificantDigits =>
      _kCFNumberFormatterUseSignificantDigits.value;

  set kCFNumberFormatterUseSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinSignificantDigits =>
      _kCFNumberFormatterMinSignificantDigits.value;

  set kCFNumberFormatterMinSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxSignificantDigits =>
      _kCFNumberFormatterMaxSignificantDigits.value;

  set kCFNumberFormatterMaxSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxSignificantDigits.value = value;

  int CFNumberFormatterGetDecimalInfoForCurrencyCode(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode =
      _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyApplication =
      _lookup<CFStringRef>('kCFPreferencesAnyApplication');

  CFStringRef get kCFPreferencesAnyApplication =>
      _kCFPreferencesAnyApplication.value;

  set kCFPreferencesAnyApplication(CFStringRef value) =>
      _kCFPreferencesAnyApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentApplication =
      _lookup<CFStringRef>('kCFPreferencesCurrentApplication');

  CFStringRef get kCFPreferencesCurrentApplication =>
      _kCFPreferencesCurrentApplication.value;

  set kCFPreferencesCurrentApplication(CFStringRef value) =>
      _kCFPreferencesCurrentApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyHost =
      _lookup<CFStringRef>('kCFPreferencesAnyHost');

  CFStringRef get kCFPreferencesAnyHost => _kCFPreferencesAnyHost.value;

  set kCFPreferencesAnyHost(CFStringRef value) =>
      _kCFPreferencesAnyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentHost =
      _lookup<CFStringRef>('kCFPreferencesCurrentHost');

  CFStringRef get kCFPreferencesCurrentHost => _kCFPreferencesCurrentHost.value;

  set kCFPreferencesCurrentHost(CFStringRef value) =>
      _kCFPreferencesCurrentHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyUser =
      _lookup<CFStringRef>('kCFPreferencesAnyUser');

  CFStringRef get kCFPreferencesAnyUser => _kCFPreferencesAnyUser.value;

  set kCFPreferencesAnyUser(CFStringRef value) =>
      _kCFPreferencesAnyUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentUser =
      _lookup<CFStringRef>('kCFPreferencesCurrentUser');

  CFStringRef get kCFPreferencesCurrentUser => _kCFPreferencesCurrentUser.value;

  set kCFPreferencesCurrentUser(CFStringRef value) =>
      _kCFPreferencesCurrentUser.value = value;

  CFPropertyListRef CFPreferencesCopyAppValue(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue = _CFPreferencesCopyAppValuePtr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue =
      _CFPreferencesGetAppBooleanValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue =
      _CFPreferencesGetAppIntegerValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue = _CFPreferencesSetAppValuePtr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp =
      _CFPreferencesAddSuitePreferencesToAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp =
      _CFPreferencesRemoveSuitePreferencesFromAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronizePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize =
      _CFPreferencesAppSynchronizePtr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue = _CFPreferencesCopyValuePtr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiplePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple =
      _CFPreferencesCopyMultiplePtr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue = _CFPreferencesSetValuePtr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple =
      _CFPreferencesSetMultiplePtr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronizePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize = _CFPreferencesSynchronizePtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationListPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList =
      _CFPreferencesCopyApplicationListPtr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyListPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList = _CFPreferencesCopyKeyListPtr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForcedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced = _CFPreferencesAppValueIsForcedPtr
      .asFunction<int Function(CFStringRef, CFStringRef)>();

  int CFURLGetTypeID() {
    return _CFURLGetTypeID();
  }

  late final _CFURLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID = _CFURLGetTypeIDPtr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes = _CFURLCreateWithBytesPtr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData = _CFURLCreateDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes =
      _CFURLCreateAbsoluteURLWithBytesPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPathPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLPathStyle,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath = _CFURLCreateWithFileSystemPathPtr
      .asFunction<CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation =
      _CFURLCreateFromFileSystemRepresentationPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBasePtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFURLPathStyle,
              Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase =
      _CFURLCreateWithFileSystemPathRelativeToBasePtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase =
      _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation =
      _CFURLGetFileSystemRepresentationPtr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL =
      _CFURLCopyAbsoluteURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString(
    CFURLRef anURL,
  ) {
    return _CFURLGetString(
      anURL,
    );
  }

  late final _CFURLGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString =
      _CFURLGetStringPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL(
      anURL,
    );
  }

  late final _CFURLGetBaseURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL =
      _CFURLGetBaseURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed =
      _CFURLCanBeDecomposedPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme(
      anURL,
    );
  }

  late final _CFURLCopySchemePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme =
      _CFURLCopySchemePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation(
      anURL,
    );
  }

  late final _CFURLCopyNetLocationPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation =
      _CFURLCopyNetLocationPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath(
      anURL,
    );
  }

  late final _CFURLCopyPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath =
      _CFURLCopyPathPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath = _CFURLCopyStrictPathPtr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath(
    CFURLRef anURL,
    int pathStyle,
  ) {
    return _CFURLCopyFileSystemPath(
      anURL,
      pathStyle,
    );
  }

  late final _CFURLCopyFileSystemPathPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFURLRef, CFURLPathStyle)>>(
      'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath = _CFURLCopyFileSystemPathPtr.asFunction<
      CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPathPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath =
      _CFURLHasDirectoryPathPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier = _CFURLCopyResourceSpecifierPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName(
      anURL,
    );
  }

  late final _CFURLCopyHostNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName =
      _CFURLCopyHostNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber(
      anURL,
    );
  }

  late final _CFURLGetPortNumberPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber =
      _CFURLGetPortNumberPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName(
      anURL,
    );
  }

  late final _CFURLCopyUserNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName =
      _CFURLCopyUserNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword(
      anURL,
    );
  }

  late final _CFURLCopyPasswordPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword =
      _CFURLCopyPasswordPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString = _CFURLCopyParameterStringPtr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString = _CFURLCopyQueryStringPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragmentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment = _CFURLCopyFragmentPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent(
      url,
    );
  }

  late final _CFURLCopyLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent = _CFURLCopyLastPathComponentPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension(
      url,
    );
  }

  late final _CFURLCopyPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension =
      _CFURLCopyPathExtensionPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponentPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent =
      _CFURLCreateCopyAppendingPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent =
      _CFURLCreateCopyDeletingLastPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension1,
  ) {
    return _CFURLCreateCopyAppendingPathExtension(
      allocator,
      url,
      extension1,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtensionPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension =
      _CFURLCreateCopyAppendingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension =
      _CFURLCreateCopyDeletingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes = _CFURLGetBytesPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent(
    CFURLRef url,
    int component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent(
      url,
      component,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponentPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, CFURLComponentType,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent = _CFURLGetByteRangeForComponentPtr
      .asFunction<CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes =
      _CFURLCreateStringByReplacingPercentEscapesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes =
      _CFURLCreateStringByAddingPercentEscapesPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL(
      url,
    );
  }

  late final _CFURLIsFileReferenceURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL =
      _CFURLIsFileReferenceURLPtr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL =
      _CFURLCreateFileReferenceURLPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL = _CFURLCreateFilePathURLPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRefPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef = _CFURLCreateFromFSRefPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRefPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef = _CFURLGetFSRefPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey =
      _CFURLCopyResourcePropertyForKeyPtr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys =
      _CFURLCopyResourcePropertiesForKeysPtr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey =
      _CFURLSetResourcePropertyForKeyPtr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys =
      _CFURLSetResourcePropertiesForKeysPtr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLKeysOfUnsetValuesKey =
      _lookup<CFStringRef>('kCFURLKeysOfUnsetValuesKey');

  CFStringRef get kCFURLKeysOfUnsetValuesKey =>
      _kCFURLKeysOfUnsetValuesKey.value;

  set kCFURLKeysOfUnsetValuesKey(CFStringRef value) =>
      _kCFURLKeysOfUnsetValuesKey.value = value;

  void CFURLClearResourcePropertyCacheForKey(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey =
      _CFURLClearResourcePropertyCacheForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache =
      _CFURLClearResourcePropertyCachePtr.asFunction<void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFURLRef, CFStringRef,
              CFTypeRef)>>('CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey =
      _CFURLSetTemporaryResourcePropertyForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable = _CFURLResourceIsReachablePtr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLNameKey =
      _lookup<CFStringRef>('kCFURLNameKey');

  CFStringRef get kCFURLNameKey => _kCFURLNameKey.value;

  set kCFURLNameKey(CFStringRef value) => _kCFURLNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLLocalizedNameKey');

  CFStringRef get kCFURLLocalizedNameKey => _kCFURLLocalizedNameKey.value;

  set kCFURLLocalizedNameKey(CFStringRef value) =>
      _kCFURLLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsRegularFileKey =
      _lookup<CFStringRef>('kCFURLIsRegularFileKey');

  CFStringRef get kCFURLIsRegularFileKey => _kCFURLIsRegularFileKey.value;

  set kCFURLIsRegularFileKey(CFStringRef value) =>
      _kCFURLIsRegularFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsDirectoryKey =
      _lookup<CFStringRef>('kCFURLIsDirectoryKey');

  CFStringRef get kCFURLIsDirectoryKey => _kCFURLIsDirectoryKey.value;

  set kCFURLIsDirectoryKey(CFStringRef value) =>
      _kCFURLIsDirectoryKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSymbolicLinkKey =
      _lookup<CFStringRef>('kCFURLIsSymbolicLinkKey');

  CFStringRef get kCFURLIsSymbolicLinkKey => _kCFURLIsSymbolicLinkKey.value;

  set kCFURLIsSymbolicLinkKey(CFStringRef value) =>
      _kCFURLIsSymbolicLinkKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsVolumeKey =
      _lookup<CFStringRef>('kCFURLIsVolumeKey');

  CFStringRef get kCFURLIsVolumeKey => _kCFURLIsVolumeKey.value;

  set kCFURLIsVolumeKey(CFStringRef value) => _kCFURLIsVolumeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPackageKey =
      _lookup<CFStringRef>('kCFURLIsPackageKey');

  CFStringRef get kCFURLIsPackageKey => _kCFURLIsPackageKey.value;

  set kCFURLIsPackageKey(CFStringRef value) =>
      _kCFURLIsPackageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsApplicationKey =
      _lookup<CFStringRef>('kCFURLIsApplicationKey');

  CFStringRef get kCFURLIsApplicationKey => _kCFURLIsApplicationKey.value;

  set kCFURLIsApplicationKey(CFStringRef value) =>
      _kCFURLIsApplicationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLApplicationIsScriptableKey =
      _lookup<CFStringRef>('kCFURLApplicationIsScriptableKey');

  CFStringRef get kCFURLApplicationIsScriptableKey =>
      _kCFURLApplicationIsScriptableKey.value;

  set kCFURLApplicationIsScriptableKey(CFStringRef value) =>
      _kCFURLApplicationIsScriptableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSystemImmutableKey =
      _lookup<CFStringRef>('kCFURLIsSystemImmutableKey');

  CFStringRef get kCFURLIsSystemImmutableKey =>
      _kCFURLIsSystemImmutableKey.value;

  set kCFURLIsSystemImmutableKey(CFStringRef value) =>
      _kCFURLIsSystemImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUserImmutableKey =
      _lookup<CFStringRef>('kCFURLIsUserImmutableKey');

  CFStringRef get kCFURLIsUserImmutableKey => _kCFURLIsUserImmutableKey.value;

  set kCFURLIsUserImmutableKey(CFStringRef value) =>
      _kCFURLIsUserImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsHiddenKey =
      _lookup<CFStringRef>('kCFURLIsHiddenKey');

  CFStringRef get kCFURLIsHiddenKey => _kCFURLIsHiddenKey.value;

  set kCFURLIsHiddenKey(CFStringRef value) => _kCFURLIsHiddenKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHasHiddenExtensionKey =
      _lookup<CFStringRef>('kCFURLHasHiddenExtensionKey');

  CFStringRef get kCFURLHasHiddenExtensionKey =>
      _kCFURLHasHiddenExtensionKey.value;

  set kCFURLHasHiddenExtensionKey(CFStringRef value) =>
      _kCFURLHasHiddenExtensionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCreationDateKey =
      _lookup<CFStringRef>('kCFURLCreationDateKey');

  CFStringRef get kCFURLCreationDateKey => _kCFURLCreationDateKey.value;

  set kCFURLCreationDateKey(CFStringRef value) =>
      _kCFURLCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentAccessDateKey =
      _lookup<CFStringRef>('kCFURLContentAccessDateKey');

  CFStringRef get kCFURLContentAccessDateKey =>
      _kCFURLContentAccessDateKey.value;

  set kCFURLContentAccessDateKey(CFStringRef value) =>
      _kCFURLContentAccessDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentModificationDateKey =
      _lookup<CFStringRef>('kCFURLContentModificationDateKey');

  CFStringRef get kCFURLContentModificationDateKey =>
      _kCFURLContentModificationDateKey.value;

  set kCFURLContentModificationDateKey(CFStringRef value) =>
      _kCFURLContentModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAttributeModificationDateKey =
      _lookup<CFStringRef>('kCFURLAttributeModificationDateKey');

  CFStringRef get kCFURLAttributeModificationDateKey =>
      _kCFURLAttributeModificationDateKey.value;

  set kCFURLAttributeModificationDateKey(CFStringRef value) =>
      _kCFURLAttributeModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileContentIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileContentIdentifierKey');

  CFStringRef get kCFURLFileContentIdentifierKey =>
      _kCFURLFileContentIdentifierKey.value;

  set kCFURLFileContentIdentifierKey(CFStringRef value) =>
      _kCFURLFileContentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayShareFileContentKey =
      _lookup<CFStringRef>('kCFURLMayShareFileContentKey');

  CFStringRef get kCFURLMayShareFileContentKey =>
      _kCFURLMayShareFileContentKey.value;

  set kCFURLMayShareFileContentKey(CFStringRef value) =>
      _kCFURLMayShareFileContentKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayHaveExtendedAttributesKey =
      _lookup<CFStringRef>('kCFURLMayHaveExtendedAttributesKey');

  CFStringRef get kCFURLMayHaveExtendedAttributesKey =>
      _kCFURLMayHaveExtendedAttributesKey.value;

  set kCFURLMayHaveExtendedAttributesKey(CFStringRef value) =>
      _kCFURLMayHaveExtendedAttributesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPurgeableKey =
      _lookup<CFStringRef>('kCFURLIsPurgeableKey');

  CFStringRef get kCFURLIsPurgeableKey => _kCFURLIsPurgeableKey.value;

  set kCFURLIsPurgeableKey(CFStringRef value) =>
      _kCFURLIsPurgeableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSparseKey =
      _lookup<CFStringRef>('kCFURLIsSparseKey');

  CFStringRef get kCFURLIsSparseKey => _kCFURLIsSparseKey.value;

  set kCFURLIsSparseKey(CFStringRef value) => _kCFURLIsSparseKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLinkCountKey =
      _lookup<CFStringRef>('kCFURLLinkCountKey');

  CFStringRef get kCFURLLinkCountKey => _kCFURLLinkCountKey.value;

  set kCFURLLinkCountKey(CFStringRef value) =>
      _kCFURLLinkCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLParentDirectoryURLKey =
      _lookup<CFStringRef>('kCFURLParentDirectoryURLKey');

  CFStringRef get kCFURLParentDirectoryURLKey =>
      _kCFURLParentDirectoryURLKey.value;

  set kCFURLParentDirectoryURLKey(CFStringRef value) =>
      _kCFURLParentDirectoryURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLKey =
      _lookup<CFStringRef>('kCFURLVolumeURLKey');

  CFStringRef get kCFURLVolumeURLKey => _kCFURLVolumeURLKey.value;

  set kCFURLVolumeURLKey(CFStringRef value) =>
      _kCFURLVolumeURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTypeIdentifierKey =
      _lookup<CFStringRef>('kCFURLTypeIdentifierKey');

  CFStringRef get kCFURLTypeIdentifierKey => _kCFURLTypeIdentifierKey.value;

  set kCFURLTypeIdentifierKey(CFStringRef value) =>
      _kCFURLTypeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedTypeDescriptionKey =
      _lookup<CFStringRef>('kCFURLLocalizedTypeDescriptionKey');

  CFStringRef get kCFURLLocalizedTypeDescriptionKey =>
      _kCFURLLocalizedTypeDescriptionKey.value;

  set kCFURLLocalizedTypeDescriptionKey(CFStringRef value) =>
      _kCFURLLocalizedTypeDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelNumberKey =
      _lookup<CFStringRef>('kCFURLLabelNumberKey');

  CFStringRef get kCFURLLabelNumberKey => _kCFURLLabelNumberKey.value;

  set kCFURLLabelNumberKey(CFStringRef value) =>
      _kCFURLLabelNumberKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelColorKey =
      _lookup<CFStringRef>('kCFURLLabelColorKey');

  CFStringRef get kCFURLLabelColorKey => _kCFURLLabelColorKey.value;

  set kCFURLLabelColorKey(CFStringRef value) =>
      _kCFURLLabelColorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedLabelKey =
      _lookup<CFStringRef>('kCFURLLocalizedLabelKey');

  CFStringRef get kCFURLLocalizedLabelKey => _kCFURLLocalizedLabelKey.value;

  set kCFURLLocalizedLabelKey(CFStringRef value) =>
      _kCFURLLocalizedLabelKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLEffectiveIconKey =
      _lookup<CFStringRef>('kCFURLEffectiveIconKey');

  CFStringRef get kCFURLEffectiveIconKey => _kCFURLEffectiveIconKey.value;

  set kCFURLEffectiveIconKey(CFStringRef value) =>
      _kCFURLEffectiveIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCustomIconKey =
      _lookup<CFStringRef>('kCFURLCustomIconKey');

  CFStringRef get kCFURLCustomIconKey => _kCFURLCustomIconKey.value;

  set kCFURLCustomIconKey(CFStringRef value) =>
      _kCFURLCustomIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileResourceIdentifierKey');

  CFStringRef get kCFURLFileResourceIdentifierKey =>
      _kCFURLFileResourceIdentifierKey.value;

  set kCFURLFileResourceIdentifierKey(CFStringRef value) =>
      _kCFURLFileResourceIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIdentifierKey =
      _lookup<CFStringRef>('kCFURLVolumeIdentifierKey');

  CFStringRef get kCFURLVolumeIdentifierKey => _kCFURLVolumeIdentifierKey.value;

  set kCFURLVolumeIdentifierKey(CFStringRef value) =>
      _kCFURLVolumeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPreferredIOBlockSizeKey =
      _lookup<CFStringRef>('kCFURLPreferredIOBlockSizeKey');

  CFStringRef get kCFURLPreferredIOBlockSizeKey =>
      _kCFURLPreferredIOBlockSizeKey.value;

  set kCFURLPreferredIOBlockSizeKey(CFStringRef value) =>
      _kCFURLPreferredIOBlockSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsReadableKey =
      _lookup<CFStringRef>('kCFURLIsReadableKey');

  CFStringRef get kCFURLIsReadableKey => _kCFURLIsReadableKey.value;

  set kCFURLIsReadableKey(CFStringRef value) =>
      _kCFURLIsReadableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsWritableKey =
      _lookup<CFStringRef>('kCFURLIsWritableKey');

  CFStringRef get kCFURLIsWritableKey => _kCFURLIsWritableKey.value;

  set kCFURLIsWritableKey(CFStringRef value) =>
      _kCFURLIsWritableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExecutableKey =
      _lookup<CFStringRef>('kCFURLIsExecutableKey');

  CFStringRef get kCFURLIsExecutableKey => _kCFURLIsExecutableKey.value;

  set kCFURLIsExecutableKey(CFStringRef value) =>
      _kCFURLIsExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSecurityKey =
      _lookup<CFStringRef>('kCFURLFileSecurityKey');

  CFStringRef get kCFURLFileSecurityKey => _kCFURLFileSecurityKey.value;

  set kCFURLFileSecurityKey(CFStringRef value) =>
      _kCFURLFileSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExcludedFromBackupKey =
      _lookup<CFStringRef>('kCFURLIsExcludedFromBackupKey');

  CFStringRef get kCFURLIsExcludedFromBackupKey =>
      _kCFURLIsExcludedFromBackupKey.value;

  set kCFURLIsExcludedFromBackupKey(CFStringRef value) =>
      _kCFURLIsExcludedFromBackupKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTagNamesKey =
      _lookup<CFStringRef>('kCFURLTagNamesKey');

  CFStringRef get kCFURLTagNamesKey => _kCFURLTagNamesKey.value;

  set kCFURLTagNamesKey(CFStringRef value) => _kCFURLTagNamesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPathKey =
      _lookup<CFStringRef>('kCFURLPathKey');

  CFStringRef get kCFURLPathKey => _kCFURLPathKey.value;

  set kCFURLPathKey(CFStringRef value) => _kCFURLPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCanonicalPathKey =
      _lookup<CFStringRef>('kCFURLCanonicalPathKey');

  CFStringRef get kCFURLCanonicalPathKey => _kCFURLCanonicalPathKey.value;

  set kCFURLCanonicalPathKey(CFStringRef value) =>
      _kCFURLCanonicalPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsMountTriggerKey =
      _lookup<CFStringRef>('kCFURLIsMountTriggerKey');

  CFStringRef get kCFURLIsMountTriggerKey => _kCFURLIsMountTriggerKey.value;

  set kCFURLIsMountTriggerKey(CFStringRef value) =>
      _kCFURLIsMountTriggerKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLGenerationIdentifierKey =
      _lookup<CFStringRef>('kCFURLGenerationIdentifierKey');

  CFStringRef get kCFURLGenerationIdentifierKey =>
      _kCFURLGenerationIdentifierKey.value;

  set kCFURLGenerationIdentifierKey(CFStringRef value) =>
      _kCFURLGenerationIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLDocumentIdentifierKey =
      _lookup<CFStringRef>('kCFURLDocumentIdentifierKey');

  CFStringRef get kCFURLDocumentIdentifierKey =>
      _kCFURLDocumentIdentifierKey.value;

  set kCFURLDocumentIdentifierKey(CFStringRef value) =>
      _kCFURLDocumentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAddedToDirectoryDateKey =
      _lookup<CFStringRef>('kCFURLAddedToDirectoryDateKey');

  CFStringRef get kCFURLAddedToDirectoryDateKey =>
      _kCFURLAddedToDirectoryDateKey.value;

  set kCFURLAddedToDirectoryDateKey(CFStringRef value) =>
      _kCFURLAddedToDirectoryDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLQuarantinePropertiesKey =
      _lookup<CFStringRef>('kCFURLQuarantinePropertiesKey');

  CFStringRef get kCFURLQuarantinePropertiesKey =>
      _kCFURLQuarantinePropertiesKey.value;

  set kCFURLQuarantinePropertiesKey(CFStringRef value) =>
      _kCFURLQuarantinePropertiesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeKey =
      _lookup<CFStringRef>('kCFURLFileResourceTypeKey');

  CFStringRef get kCFURLFileResourceTypeKey => _kCFURLFileResourceTypeKey.value;

  set kCFURLFileResourceTypeKey(CFStringRef value) =>
      _kCFURLFileResourceTypeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeNamedPipe =
      _lookup<CFStringRef>('kCFURLFileResourceTypeNamedPipe');

  CFStringRef get kCFURLFileResourceTypeNamedPipe =>
      _kCFURLFileResourceTypeNamedPipe.value;

  set kCFURLFileResourceTypeNamedPipe(CFStringRef value) =>
      _kCFURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeCharacterSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeCharacterSpecial');

  CFStringRef get kCFURLFileResourceTypeCharacterSpecial =>
      _kCFURLFileResourceTypeCharacterSpecial.value;

  set kCFURLFileResourceTypeCharacterSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeDirectory =
      _lookup<CFStringRef>('kCFURLFileResourceTypeDirectory');

  CFStringRef get kCFURLFileResourceTypeDirectory =>
      _kCFURLFileResourceTypeDirectory.value;

  set kCFURLFileResourceTypeDirectory(CFStringRef value) =>
      _kCFURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeBlockSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeBlockSpecial');

  CFStringRef get kCFURLFileResourceTypeBlockSpecial =>
      _kCFURLFileResourceTypeBlockSpecial.value;

  set kCFURLFileResourceTypeBlockSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeRegular =
      _lookup<CFStringRef>('kCFURLFileResourceTypeRegular');

  CFStringRef get kCFURLFileResourceTypeRegular =>
      _kCFURLFileResourceTypeRegular.value;

  set kCFURLFileResourceTypeRegular(CFStringRef value) =>
      _kCFURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSymbolicLink =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSymbolicLink');

  CFStringRef get kCFURLFileResourceTypeSymbolicLink =>
      _kCFURLFileResourceTypeSymbolicLink.value;

  set kCFURLFileResourceTypeSymbolicLink(CFStringRef value) =>
      _kCFURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSocket =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSocket');

  CFStringRef get kCFURLFileResourceTypeSocket =>
      _kCFURLFileResourceTypeSocket.value;

  set kCFURLFileResourceTypeSocket(CFStringRef value) =>
      _kCFURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeUnknown =
      _lookup<CFStringRef>('kCFURLFileResourceTypeUnknown');

  CFStringRef get kCFURLFileResourceTypeUnknown =>
      _kCFURLFileResourceTypeUnknown.value;

  set kCFURLFileResourceTypeUnknown(CFStringRef value) =>
      _kCFURLFileResourceTypeUnknown.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSizeKey =
      _lookup<CFStringRef>('kCFURLFileSizeKey');

  CFStringRef get kCFURLFileSizeKey => _kCFURLFileSizeKey.value;

  set kCFURLFileSizeKey(CFStringRef value) => _kCFURLFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLFileAllocatedSizeKey');

  CFStringRef get kCFURLFileAllocatedSizeKey =>
      _kCFURLFileAllocatedSizeKey.value;

  set kCFURLFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileSizeKey');

  CFStringRef get kCFURLTotalFileSizeKey => _kCFURLTotalFileSizeKey.value;

  set kCFURLTotalFileSizeKey(CFStringRef value) =>
      _kCFURLTotalFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileAllocatedSizeKey');

  CFStringRef get kCFURLTotalFileAllocatedSizeKey =>
      _kCFURLTotalFileAllocatedSizeKey.value;

  set kCFURLTotalFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLTotalFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsAliasFileKey =
      _lookup<CFStringRef>('kCFURLIsAliasFileKey');

  CFStringRef get kCFURLIsAliasFileKey => _kCFURLIsAliasFileKey.value;

  set kCFURLIsAliasFileKey(CFStringRef value) =>
      _kCFURLIsAliasFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionKey =
      _lookup<CFStringRef>('kCFURLFileProtectionKey');

  CFStringRef get kCFURLFileProtectionKey => _kCFURLFileProtectionKey.value;

  set kCFURLFileProtectionKey(CFStringRef value) =>
      _kCFURLFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionNone =
      _lookup<CFStringRef>('kCFURLFileProtectionNone');

  CFStringRef get kCFURLFileProtectionNone => _kCFURLFileProtectionNone.value;

  set kCFURLFileProtectionNone(CFStringRef value) =>
      _kCFURLFileProtectionNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionComplete =
      _lookup<CFStringRef>('kCFURLFileProtectionComplete');

  CFStringRef get kCFURLFileProtectionComplete =>
      _kCFURLFileProtectionComplete.value;

  set kCFURLFileProtectionComplete(CFStringRef value) =>
      _kCFURLFileProtectionComplete.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionCompleteUnlessOpen =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteUnlessOpen');

  CFStringRef get kCFURLFileProtectionCompleteUnlessOpen =>
      _kCFURLFileProtectionCompleteUnlessOpen.value;

  set kCFURLFileProtectionCompleteUnlessOpen(CFStringRef value) =>
      _kCFURLFileProtectionCompleteUnlessOpen.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<CFStringRef>(
          'kCFURLFileProtectionCompleteUntilFirstUserAuthentication');

  CFStringRef get kCFURLFileProtectionCompleteUntilFirstUserAuthentication =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set kCFURLFileProtectionCompleteUntilFirstUserAuthentication(
          CFStringRef value) =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeLocalizedFormatDescriptionKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedFormatDescriptionKey');

  CFStringRef get kCFURLVolumeLocalizedFormatDescriptionKey =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value;

  set kCFURLVolumeLocalizedFormatDescriptionKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTotalCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeTotalCapacityKey');

  CFStringRef get kCFURLVolumeTotalCapacityKey =>
      _kCFURLVolumeTotalCapacityKey.value;

  set kCFURLVolumeTotalCapacityKey(CFStringRef value) =>
      _kCFURLVolumeTotalCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeAvailableCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityKey');

  CFStringRef get kCFURLVolumeAvailableCapacityKey =>
      _kCFURLVolumeAvailableCapacityKey.value;

  set kCFURLVolumeAvailableCapacityKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityForImportantUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForImportantUsageKey =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value;

  set kCFURLVolumeAvailableCapacityForImportantUsageKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<CFStringRef>(
          'kCFURLVolumeAvailableCapacityForOpportunisticUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set kCFURLVolumeAvailableCapacityForOpportunisticUsageKey(
          CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeResourceCountKey =
      _lookup<CFStringRef>('kCFURLVolumeResourceCountKey');

  CFStringRef get kCFURLVolumeResourceCountKey =>
      _kCFURLVolumeResourceCountKey.value;

  set kCFURLVolumeResourceCountKey(CFStringRef value) =>
      _kCFURLVolumeResourceCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsPersistentIDsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsPersistentIDsKey');

  CFStringRef get kCFURLVolumeSupportsPersistentIDsKey =>
      _kCFURLVolumeSupportsPersistentIDsKey.value;

  set kCFURLVolumeSupportsPersistentIDsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsPersistentIDsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSymbolicLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSymbolicLinksKey');

  CFStringRef get kCFURLVolumeSupportsSymbolicLinksKey =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value;

  set kCFURLVolumeSupportsSymbolicLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsHardLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsHardLinksKey');

  CFStringRef get kCFURLVolumeSupportsHardLinksKey =>
      _kCFURLVolumeSupportsHardLinksKey.value;

  set kCFURLVolumeSupportsHardLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsHardLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsJournalingKey');

  CFStringRef get kCFURLVolumeSupportsJournalingKey =>
      _kCFURLVolumeSupportsJournalingKey.value;

  set kCFURLVolumeSupportsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeIsJournalingKey');

  CFStringRef get kCFURLVolumeIsJournalingKey =>
      _kCFURLVolumeIsJournalingKey.value;

  set kCFURLVolumeIsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeIsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSparseFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSparseFilesKey');

  CFStringRef get kCFURLVolumeSupportsSparseFilesKey =>
      _kCFURLVolumeSupportsSparseFilesKey.value;

  set kCFURLVolumeSupportsSparseFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSparseFilesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsZeroRunsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsZeroRunsKey');

  CFStringRef get kCFURLVolumeSupportsZeroRunsKey =>
      _kCFURLVolumeSupportsZeroRunsKey.value;

  set kCFURLVolumeSupportsZeroRunsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsZeroRunsKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCaseSensitiveNamesKey');

  CFStringRef get kCFURLVolumeSupportsCaseSensitiveNamesKey =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value;

  set kCFURLVolumeSupportsCaseSensitiveNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCasePreservedNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCasePreservedNamesKey');

  CFStringRef get kCFURLVolumeSupportsCasePreservedNamesKey =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value;

  set kCFURLVolumeSupportsCasePreservedNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRootDirectoryDatesKey');

  CFStringRef get kCFURLVolumeSupportsRootDirectoryDatesKey =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value;

  set kCFURLVolumeSupportsRootDirectoryDatesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsVolumeSizesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsVolumeSizesKey');

  CFStringRef get kCFURLVolumeSupportsVolumeSizesKey =>
      _kCFURLVolumeSupportsVolumeSizesKey.value;

  set kCFURLVolumeSupportsVolumeSizesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsVolumeSizesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRenamingKey');

  CFStringRef get kCFURLVolumeSupportsRenamingKey =>
      _kCFURLVolumeSupportsRenamingKey.value;

  set kCFURLVolumeSupportsRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAdvisoryFileLockingKey');

  CFStringRef get kCFURLVolumeSupportsAdvisoryFileLockingKey =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value;

  set kCFURLVolumeSupportsAdvisoryFileLockingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsExtendedSecurityKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExtendedSecurityKey');

  CFStringRef get kCFURLVolumeSupportsExtendedSecurityKey =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value;

  set kCFURLVolumeSupportsExtendedSecurityKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsBrowsableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsBrowsableKey');

  CFStringRef get kCFURLVolumeIsBrowsableKey =>
      _kCFURLVolumeIsBrowsableKey.value;

  set kCFURLVolumeIsBrowsableKey(CFStringRef value) =>
      _kCFURLVolumeIsBrowsableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMaximumFileSizeKey =
      _lookup<CFStringRef>('kCFURLVolumeMaximumFileSizeKey');

  CFStringRef get kCFURLVolumeMaximumFileSizeKey =>
      _kCFURLVolumeMaximumFileSizeKey.value;

  set kCFURLVolumeMaximumFileSizeKey(CFStringRef value) =>
      _kCFURLVolumeMaximumFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEjectableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEjectableKey');

  CFStringRef get kCFURLVolumeIsEjectableKey =>
      _kCFURLVolumeIsEjectableKey.value;

  set kCFURLVolumeIsEjectableKey(CFStringRef value) =>
      _kCFURLVolumeIsEjectableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRemovableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRemovableKey');

  CFStringRef get kCFURLVolumeIsRemovableKey =>
      _kCFURLVolumeIsRemovableKey.value;

  set kCFURLVolumeIsRemovableKey(CFStringRef value) =>
      _kCFURLVolumeIsRemovableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsInternalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsInternalKey');

  CFStringRef get kCFURLVolumeIsInternalKey => _kCFURLVolumeIsInternalKey.value;

  set kCFURLVolumeIsInternalKey(CFStringRef value) =>
      _kCFURLVolumeIsInternalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsAutomountedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsAutomountedKey');

  CFStringRef get kCFURLVolumeIsAutomountedKey =>
      _kCFURLVolumeIsAutomountedKey.value;

  set kCFURLVolumeIsAutomountedKey(CFStringRef value) =>
      _kCFURLVolumeIsAutomountedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsLocalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsLocalKey');

  CFStringRef get kCFURLVolumeIsLocalKey => _kCFURLVolumeIsLocalKey.value;

  set kCFURLVolumeIsLocalKey(CFStringRef value) =>
      _kCFURLVolumeIsLocalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsReadOnlyKey =
      _lookup<CFStringRef>('kCFURLVolumeIsReadOnlyKey');

  CFStringRef get kCFURLVolumeIsReadOnlyKey => _kCFURLVolumeIsReadOnlyKey.value;

  set kCFURLVolumeIsReadOnlyKey(CFStringRef value) =>
      _kCFURLVolumeIsReadOnlyKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeCreationDateKey =
      _lookup<CFStringRef>('kCFURLVolumeCreationDateKey');

  CFStringRef get kCFURLVolumeCreationDateKey =>
      _kCFURLVolumeCreationDateKey.value;

  set kCFURLVolumeCreationDateKey(CFStringRef value) =>
      _kCFURLVolumeCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLForRemountingKey =
      _lookup<CFStringRef>('kCFURLVolumeURLForRemountingKey');

  CFStringRef get kCFURLVolumeURLForRemountingKey =>
      _kCFURLVolumeURLForRemountingKey.value;

  set kCFURLVolumeURLForRemountingKey(CFStringRef value) =>
      _kCFURLVolumeURLForRemountingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeUUIDStringKey =
      _lookup<CFStringRef>('kCFURLVolumeUUIDStringKey');

  CFStringRef get kCFURLVolumeUUIDStringKey => _kCFURLVolumeUUIDStringKey.value;

  set kCFURLVolumeUUIDStringKey(CFStringRef value) =>
      _kCFURLVolumeUUIDStringKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeNameKey');

  CFStringRef get kCFURLVolumeNameKey => _kCFURLVolumeNameKey.value;

  set kCFURLVolumeNameKey(CFStringRef value) =>
      _kCFURLVolumeNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedNameKey');

  CFStringRef get kCFURLVolumeLocalizedNameKey =>
      _kCFURLVolumeLocalizedNameKey.value;

  set kCFURLVolumeLocalizedNameKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEncryptedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEncryptedKey');

  CFStringRef get kCFURLVolumeIsEncryptedKey =>
      _kCFURLVolumeIsEncryptedKey.value;

  set kCFURLVolumeIsEncryptedKey(CFStringRef value) =>
      _kCFURLVolumeIsEncryptedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRootFileSystemKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRootFileSystemKey');

  CFStringRef get kCFURLVolumeIsRootFileSystemKey =>
      _kCFURLVolumeIsRootFileSystemKey.value;

  set kCFURLVolumeIsRootFileSystemKey(CFStringRef value) =>
      _kCFURLVolumeIsRootFileSystemKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsCompressionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCompressionKey');

  CFStringRef get kCFURLVolumeSupportsCompressionKey =>
      _kCFURLVolumeSupportsCompressionKey.value;

  set kCFURLVolumeSupportsCompressionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCompressionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileCloningKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileCloningKey');

  CFStringRef get kCFURLVolumeSupportsFileCloningKey =>
      _kCFURLVolumeSupportsFileCloningKey.value;

  set kCFURLVolumeSupportsFileCloningKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileCloningKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSwapRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSwapRenamingKey');

  CFStringRef get kCFURLVolumeSupportsSwapRenamingKey =>
      _kCFURLVolumeSupportsSwapRenamingKey.value;

  set kCFURLVolumeSupportsSwapRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSwapRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsExclusiveRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExclusiveRenamingKey');

  CFStringRef get kCFURLVolumeSupportsExclusiveRenamingKey =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value;

  set kCFURLVolumeSupportsExclusiveRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsImmutableFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsImmutableFilesKey');

  CFStringRef get kCFURLVolumeSupportsImmutableFilesKey =>
      _kCFURLVolumeSupportsImmutableFilesKey.value;

  set kCFURLVolumeSupportsImmutableFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsImmutableFilesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAccessPermissionsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAccessPermissionsKey');

  CFStringRef get kCFURLVolumeSupportsAccessPermissionsKey =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value;

  set kCFURLVolumeSupportsAccessPermissionsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileProtectionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileProtectionKey');

  CFStringRef get kCFURLVolumeSupportsFileProtectionKey =>
      _kCFURLVolumeSupportsFileProtectionKey.value;

  set kCFURLVolumeSupportsFileProtectionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUbiquitousItemKey =
      _lookup<CFStringRef>('kCFURLIsUbiquitousItemKey');

  CFStringRef get kCFURLIsUbiquitousItemKey => _kCFURLIsUbiquitousItemKey.value;

  set kCFURLIsUbiquitousItemKey(CFStringRef value) =>
      _kCFURLIsUbiquitousItemKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemHasUnresolvedConflictsKey');

  CFStringRef get kCFURLUbiquitousItemHasUnresolvedConflictsKey =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set kCFURLUbiquitousItemHasUnresolvedConflictsKey(CFStringRef value) =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadedKey =>
      _kCFURLUbiquitousItemIsDownloadedKey.value;

  set kCFURLUbiquitousItemIsDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadingKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadingKey =>
      _kCFURLUbiquitousItemIsDownloadingKey.value;

  set kCFURLUbiquitousItemIsDownloadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadedKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadedKey =>
      _kCFURLUbiquitousItemIsUploadedKey.value;

  set kCFURLUbiquitousItemIsUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadingKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadingKey =>
      _kCFURLUbiquitousItemIsUploadingKey.value;

  set kCFURLUbiquitousItemIsUploadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemPercentDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentDownloadedKey =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value;

  set kCFURLUbiquitousItemPercentDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemPercentUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentUploadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentUploadedKey =>
      _kCFURLUbiquitousItemPercentUploadedKey.value;

  set kCFURLUbiquitousItemPercentUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusKey =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value;

  set kCFURLUbiquitousItemDownloadingStatusKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemDownloadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingErrorKey =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value;

  set kCFURLUbiquitousItemDownloadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemUploadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemUploadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemUploadingErrorKey =>
      _kCFURLUbiquitousItemUploadingErrorKey.value;

  set kCFURLUbiquitousItemUploadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemUploadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsExcludedFromSyncKey');

  CFStringRef get kCFURLUbiquitousItemIsExcludedFromSyncKey =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value;

  set kCFURLUbiquitousItemIsExcludedFromSyncKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<CFStringRef>(
          'kCFURLUbiquitousItemDownloadingStatusNotDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusNotDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusNotDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusCurrent');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusCurrent =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value;

  set kCFURLUbiquitousItemDownloadingStatusCurrent(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value = value;

  CFDataRef CFURLCreateBookmarkData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData(
      allocator,
      url,
      options,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFURLRef,
              CFURLBookmarkCreationOptions,
              CFArrayRef,
              CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData = _CFURLCreateBookmarkDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef, CFURLRef,
          ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    int options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData(
      allocator,
      bookmark,
      options,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLBookmarkResolutionOptions,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData =
      _CFURLCreateByResolvingBookmarkDataPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>>(
      'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData =
      _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFilePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile =
      _CFURLCreateBookmarkDataFromFilePtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFilePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile =
      _CFURLWriteBookmarkDataToFilePtr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecordPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord =
      _CFURLCreateBookmarkDataFromAliasRecordPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource =
      _CFURLStartAccessingSecurityScopedResourcePtr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource =
      _CFURLStopAccessingSecurityScopedResourcePtr.asFunction<
          void Function(CFURLRef)>();

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopDefaultMode =
      _lookup<CFRunLoopMode>('kCFRunLoopDefaultMode');

  CFRunLoopMode get kCFRunLoopDefaultMode => _kCFRunLoopDefaultMode.value;

  set kCFRunLoopDefaultMode(CFRunLoopMode value) =>
      _kCFRunLoopDefaultMode.value = value;

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopCommonModes =
      _lookup<CFRunLoopMode>('kCFRunLoopCommonModes');

  CFRunLoopMode get kCFRunLoopCommonModes => _kCFRunLoopCommonModes.value;

  set kCFRunLoopCommonModes(CFRunLoopMode value) =>
      _kCFRunLoopCommonModes.value = value;

  int CFRunLoopGetTypeID() {
    return _CFRunLoopGetTypeID();
  }

  late final _CFRunLoopGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID =
      _CFRunLoopGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGetMain();
  }

  late final _CFRunLoopGetMainPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain =
      _CFRunLoopGetMainPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentModePtr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode = _CFRunLoopCopyCurrentModePtr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes =
      _CFRunLoopCopyAllModesPtr.asFunction<CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonModePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode = _CFRunLoopAddCommonModePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDatePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate = _CFRunLoopGetNextTimerFireDatePtr
      .asFunction<double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun() {
    return _CFRunLoopRun();
  }

  late final _CFRunLoopRunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun = _CFRunLoopRunPtr.asFunction<void Function()>();

  int CFRunLoopRunInMode(
    CFRunLoopMode mode,
    double seconds,
    int returnAfterSourceHandled,
  ) {
    return _CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    );
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopRunResult Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting(
      rl,
    );
  }

  late final _CFRunLoopIsWaitingPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting =
      _CFRunLoopIsWaitingPtr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp(
      rl,
    );
  }

  late final _CFRunLoopWakeUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp =
      _CFRunLoopWakeUpPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop(
      rl,
    );
  }

  late final _CFRunLoopStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop =
      _CFRunLoopStopPtr.asFunction<void Function(CFRunLoopRef)>();

  int CFRunLoopContainsSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource = _CFRunLoopContainsSourcePtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource = _CFRunLoopRemoveSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserverPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver =
      _CFRunLoopContainsObserverPtr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver = _CFRunLoopAddObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver = _CFRunLoopRemoveObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer = _CFRunLoopContainsTimerPtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer = _CFRunLoopAddTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer = _CFRunLoopRemoveTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID() {
    return _CFRunLoopSourceGetTypeID();
  }

  late final _CFRunLoopSourceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID =
      _CFRunLoopSourceGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate = _CFRunLoopSourceCreatePtr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder = _CFRunLoopSourceGetOrderPtr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate = _CFRunLoopSourceInvalidatePtr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid(
      source,
    );
  }

  late final _CFRunLoopSourceIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid =
      _CFRunLoopSourceIsValidPtr.asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext =
      _CFRunLoopSourceGetContextPtr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal(
      source,
    );
  }

  late final _CFRunLoopSourceSignalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal =
      _CFRunLoopSourceSignalPtr.asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID() {
    return _CFRunLoopObserverGetTypeID();
  }

  late final _CFRunLoopObserverGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID =
      _CFRunLoopObserverGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreatePtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate = _CFRunLoopObserverCreatePtr.asFunction<
      CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
          CFRunLoopObserverCallBack, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopObserverGetActivities(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivitiesPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities =
      _CFRunLoopObserverGetActivitiesPtr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat = _CFRunLoopObserverDoesRepeatPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder = _CFRunLoopObserverGetOrderPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate = _CFRunLoopObserverInvalidatePtr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid = _CFRunLoopObserverIsValidPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext =
      _CFRunLoopObserverGetContextPtr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID() {
    return _CFRunLoopTimerGetTypeID();
  }

  late final _CFRunLoopTimerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID =
      _CFRunLoopTimerGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate = _CFRunLoopTimerCreatePtr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetNextFireDate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDatePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate = _CFRunLoopTimerGetNextFireDatePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate = _CFRunLoopTimerSetNextFireDatePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval(
      timer,
    );
  }

  late final _CFRunLoopTimerGetIntervalPtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval = _CFRunLoopTimerGetIntervalPtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat = _CFRunLoopTimerDoesRepeatPtr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder =
      _CFRunLoopTimerGetOrderPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate = _CFRunLoopTimerInvalidatePtr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid =
      _CFRunLoopTimerIsValidPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext =
      _CFRunLoopTimerGetContextPtr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerancePtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance = _CFRunLoopTimerGetTolerancePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance = _CFRunLoopTimerSetTolerancePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID() {
    return _CFSocketGetTypeID();
  }

  late final _CFSocketGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID =
      _CFSocketGetTypeIDPtr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate = _CFSocketCreatePtr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNativePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative =
      _CFSocketCreateWithNativePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature =
      _CFSocketCreateWithSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignaturePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature =
      _CFSocketCreateConnectedToSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  int CFSocketSetAddress(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return _CFSocketSetAddress(
      s,
      address,
    );
  }

  late final _CFSocketSetAddressPtr = _lookup<
          ffi.NativeFunction<CFSocketError Function(CFSocketRef, CFDataRef)>>(
      'CFSocketSetAddress');
  late final _CFSocketSetAddress =
      _CFSocketSetAddressPtr.asFunction<int Function(CFSocketRef, CFDataRef)>();

  int CFSocketConnectToAddress(
    CFSocketRef s,
    CFDataRef address,
    double timeout,
  ) {
    return _CFSocketConnectToAddress(
      s,
      address,
      timeout,
    );
  }

  late final _CFSocketConnectToAddressPtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress = _CFSocketConnectToAddressPtr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate(
      s,
    );
  }

  late final _CFSocketInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate =
      _CFSocketInvalidatePtr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid(
      s,
    );
  }

  late final _CFSocketIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid =
      _CFSocketIsValidPtr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress(
      s,
    );
  }

  late final _CFSocketCopyAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress =
      _CFSocketCopyAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress(
      s,
    );
  }

  late final _CFSocketCopyPeerAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress =
      _CFSocketCopyPeerAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext(
      s,
      context,
    );
  }

  late final _CFSocketGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext = _CFSocketGetContextPtr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative(
      s,
    );
  }

  late final _CFSocketGetNativePtr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative =
      _CFSocketGetNativePtr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource =
      _CFSocketCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags(
      s,
    );
  }

  late final _CFSocketGetSocketFlagsPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags =
      _CFSocketGetSocketFlagsPtr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags =
      _CFSocketSetSocketFlagsPtr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks = _CFSocketDisableCallBacksPtr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks =
      _CFSocketEnableCallBacksPtr.asFunction<void Function(CFSocketRef, int)>();

  int CFSocketSendData(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    double timeout,
  ) {
    return _CFSocketSendData(
      s,
      address,
      data,
      timeout,
    );
  }

  late final _CFSocketSendDataPtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData = _CFSocketSendDataPtr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  int CFSocketRegisterValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return _CFSocketRegisterValue(
      nameServerSignature,
      timeout,
      name,
      value,
    );
  }

  late final _CFSocketRegisterValuePtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue = _CFSocketRegisterValuePtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  int CFSocketCopyRegisteredValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredValue(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredValuePtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue =
      _CFSocketCopyRegisteredValuePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  int CFSocketRegisterSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return _CFSocketRegisterSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
    );
  }

  late final _CFSocketRegisterSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketError Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature =
      _CFSocketRegisterSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  int CFSocketCopyRegisteredSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketError Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature =
      _CFSocketCopyRegisteredSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  int CFSocketUnregister(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
  ) {
    return _CFSocketUnregister(
      nameServerSignature,
      timeout,
      name,
    );
  }

  late final _CFSocketUnregisterPtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister = _CFSocketUnregisterPtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber =
      _CFSocketSetDefaultNameRegistryPortNumberPtr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber() {
    return _CFSocketGetDefaultNameRegistryPortNumber();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber =
      _CFSocketGetDefaultNameRegistryPortNumberPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCFSocketCommandKey =
      _lookup<CFStringRef>('kCFSocketCommandKey');

  CFStringRef get kCFSocketCommandKey => _kCFSocketCommandKey.value;

  set kCFSocketCommandKey(CFStringRef value) =>
      _kCFSocketCommandKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketNameKey =
      _lookup<CFStringRef>('kCFSocketNameKey');

  CFStringRef get kCFSocketNameKey => _kCFSocketNameKey.value;

  set kCFSocketNameKey(CFStringRef value) => _kCFSocketNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketValueKey =
      _lookup<CFStringRef>('kCFSocketValueKey');

  CFStringRef get kCFSocketValueKey => _kCFSocketValueKey.value;

  set kCFSocketValueKey(CFStringRef value) => _kCFSocketValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketResultKey =
      _lookup<CFStringRef>('kCFSocketResultKey');

  CFStringRef get kCFSocketResultKey => _kCFSocketResultKey.value;

  set kCFSocketResultKey(CFStringRef value) =>
      _kCFSocketResultKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketErrorKey =
      _lookup<CFStringRef>('kCFSocketErrorKey');

  CFStringRef get kCFSocketErrorKey => _kCFSocketErrorKey.value;

  set kCFSocketErrorKey(CFStringRef value) => _kCFSocketErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRegisterCommand =
      _lookup<CFStringRef>('kCFSocketRegisterCommand');

  CFStringRef get kCFSocketRegisterCommand => _kCFSocketRegisterCommand.value;

  set kCFSocketRegisterCommand(CFStringRef value) =>
      _kCFSocketRegisterCommand.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRetrieveCommand =
      _lookup<CFStringRef>('kCFSocketRetrieveCommand');

  CFStringRef get kCFSocketRetrieveCommand => _kCFSocketRetrieveCommand.value;

  set kCFSocketRetrieveCommand(CFStringRef value) =>
      _kCFSocketRetrieveCommand.value = value;

  ffi.Pointer<ffi.Void> os_retain(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_retain(
      object,
    );
  }

  late final _os_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('os_retain');
  late final _os_retain = _os_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void os_release(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_release(
      object,
    );
  }

  late final _os_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'os_release');
  late final _os_release =
      _os_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int os_workgroup_copy_port(
    os_workgroup_t wg,
    ffi.Pointer<mach_port_t> mach_port_out,
  ) {
    return _os_workgroup_copy_port(
      wg,
      mach_port_out,
    );
  }

  late final _os_workgroup_copy_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_t,
              ffi.Pointer<mach_port_t>)>>('os_workgroup_copy_port');
  late final _os_workgroup_copy_port = _os_workgroup_copy_portPtr
      .asFunction<int Function(os_workgroup_t, ffi.Pointer<mach_port_t>)>();

  os_workgroup_t os_workgroup_create_with_port(
    ffi.Pointer<ffi.Char> name,
    int mach_port,
  ) {
    return _os_workgroup_create_with_port(
      name,
      mach_port,
    );
  }

  late final _os_workgroup_create_with_portPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>,
              mach_port_t)>>('os_workgroup_create_with_port');
  late final _os_workgroup_create_with_port = _os_workgroup_create_with_portPtr
      .asFunction<os_workgroup_t Function(ffi.Pointer<ffi.Char>, int)>();

  os_workgroup_t os_workgroup_create_with_workgroup(
    ffi.Pointer<ffi.Char> name,
    os_workgroup_t wg,
  ) {
    return _os_workgroup_create_with_workgroup(
      name,
      wg,
    );
  }

  late final _os_workgroup_create_with_workgroupPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>,
              os_workgroup_t)>>('os_workgroup_create_with_workgroup');
  late final _os_workgroup_create_with_workgroup =
      _os_workgroup_create_with_workgroupPtr.asFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>, os_workgroup_t)>();

  int os_workgroup_join(
    os_workgroup_t wg,
    os_workgroup_join_token_t token_out,
  ) {
    return _os_workgroup_join(
      wg,
      token_out,
    );
  }

  late final _os_workgroup_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              os_workgroup_t, os_workgroup_join_token_t)>>('os_workgroup_join');
  late final _os_workgroup_join = _os_workgroup_joinPtr
      .asFunction<int Function(os_workgroup_t, os_workgroup_join_token_t)>();

  void os_workgroup_leave(
    os_workgroup_t wg,
    os_workgroup_join_token_t token,
  ) {
    return _os_workgroup_leave(
      wg,
      token,
    );
  }

  late final _os_workgroup_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(os_workgroup_t,
              os_workgroup_join_token_t)>>('os_workgroup_leave');
  late final _os_workgroup_leave = _os_workgroup_leavePtr
      .asFunction<void Function(os_workgroup_t, os_workgroup_join_token_t)>();

  int os_workgroup_set_working_arena(
    os_workgroup_t wg,
    ffi.Pointer<ffi.Void> arena,
    int max_workers,
    os_workgroup_working_arena_destructor_t destructor,
  ) {
    return _os_workgroup_set_working_arena(
      wg,
      arena,
      max_workers,
      destructor,
    );
  }

  late final _os_workgroup_set_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(os_workgroup_t, ffi.Pointer<ffi.Void>,
                  ffi.Uint32, os_workgroup_working_arena_destructor_t)>>(
      'os_workgroup_set_working_arena');
  late final _os_workgroup_set_working_arena =
      _os_workgroup_set_working_arenaPtr.asFunction<
          int Function(os_workgroup_t, ffi.Pointer<ffi.Void>, int,
              os_workgroup_working_arena_destructor_t)>();

  ffi.Pointer<ffi.Void> os_workgroup_get_working_arena(
    os_workgroup_t wg,
    ffi.Pointer<os_workgroup_index> index_out,
  ) {
    return _os_workgroup_get_working_arena(
      wg,
      index_out,
    );
  }

  late final _os_workgroup_get_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  os_workgroup_t, ffi.Pointer<os_workgroup_index>)>>(
      'os_workgroup_get_working_arena');
  late final _os_workgroup_get_working_arena =
      _os_workgroup_get_working_arenaPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              os_workgroup_t, ffi.Pointer<os_workgroup_index>)>();

  void os_workgroup_cancel(
    os_workgroup_t wg,
  ) {
    return _os_workgroup_cancel(
      wg,
    );
  }

  late final _os_workgroup_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(os_workgroup_t)>>(
          'os_workgroup_cancel');
  late final _os_workgroup_cancel =
      _os_workgroup_cancelPtr.asFunction<void Function(os_workgroup_t)>();

  bool os_workgroup_testcancel(
    os_workgroup_t wg,
  ) {
    return _os_workgroup_testcancel(
      wg,
    );
  }

  late final _os_workgroup_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(os_workgroup_t)>>(
          'os_workgroup_testcancel');
  late final _os_workgroup_testcancel =
      _os_workgroup_testcancelPtr.asFunction<bool Function(os_workgroup_t)>();

  int os_workgroup_max_parallel_threads(
    os_workgroup_t wg,
    os_workgroup_mpt_attr_t attr,
  ) {
    return _os_workgroup_max_parallel_threads(
      wg,
      attr,
    );
  }

  late final _os_workgroup_max_parallel_threadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_t,
              os_workgroup_mpt_attr_t)>>('os_workgroup_max_parallel_threads');
  late final _os_workgroup_max_parallel_threads =
      _os_workgroup_max_parallel_threadsPtr
          .asFunction<int Function(os_workgroup_t, os_workgroup_mpt_attr_t)>();

  int os_workgroup_interval_start(
    os_workgroup_interval_t wg,
    int start,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_start(
      wg,
      start,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t, ffi.Uint64, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_start');
  late final _os_workgroup_interval_start =
      _os_workgroup_interval_startPtr.asFunction<
          int Function(os_workgroup_interval_t, int, int,
              os_workgroup_interval_data_t)>();

  int os_workgroup_interval_update(
    os_workgroup_interval_t wg,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_update(
      wg,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_update');
  late final _os_workgroup_interval_update =
      _os_workgroup_interval_updatePtr.asFunction<
          int Function(
              os_workgroup_interval_t, int, os_workgroup_interval_data_t)>();

  int os_workgroup_interval_finish(
    os_workgroup_interval_t wg,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_finish(
      wg,
      data,
    );
  }

  late final _os_workgroup_interval_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_finish');
  late final _os_workgroup_interval_finish =
      _os_workgroup_interval_finishPtr.asFunction<
          int Function(
              os_workgroup_interval_t, os_workgroup_interval_data_t)>();

  os_workgroup_parallel_t os_workgroup_parallel_create(
    ffi.Pointer<ffi.Char> name,
    os_workgroup_attr_t attr,
  ) {
    return _os_workgroup_parallel_create(
      name,
      attr,
    );
  }

  late final _os_workgroup_parallel_createPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_parallel_t Function(ffi.Pointer<ffi.Char>,
              os_workgroup_attr_t)>>('os_workgroup_parallel_create');
  late final _os_workgroup_parallel_create =
      _os_workgroup_parallel_createPtr.asFunction<
          os_workgroup_parallel_t Function(
              ffi.Pointer<ffi.Char>, os_workgroup_attr_t)>();

  int dispatch_time(
    int when,
    int delta,
  ) {
    return _dispatch_time(
      when,
      delta,
    );
  }

  late final _dispatch_timePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              dispatch_time_t, ffi.Int64)>>('dispatch_time');
  late final _dispatch_time =
      _dispatch_timePtr.asFunction<int Function(int, int)>();

  int dispatch_walltime(
    ffi.Pointer<timespec> when,
    int delta,
  ) {
    return _dispatch_walltime(
      when,
      delta,
    );
  }

  late final _dispatch_walltimePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              ffi.Pointer<timespec>, ffi.Int64)>>('dispatch_walltime');
  late final _dispatch_walltime = _dispatch_walltimePtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>();

  void dispatch_retain(
    dispatch_object_t object,
  ) {
    return _dispatch_retain(
      object,
    );
  }

  late final _dispatch_retainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_retain');
  late final _dispatch_retain =
      _dispatch_retainPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_release(
    dispatch_object_t object,
  ) {
    return _dispatch_release(
      object,
    );
  }

  late final _dispatch_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_release');
  late final _dispatch_release =
      _dispatch_releasePtr.asFunction<void Function(dispatch_object_t)>();

  ffi.Pointer<ffi.Void> dispatch_get_context(
    dispatch_object_t object,
  ) {
    return _dispatch_get_context(
      object,
    );
  }

  late final _dispatch_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              dispatch_object_t)>>('dispatch_get_context');
  late final _dispatch_get_context = _dispatch_get_contextPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(dispatch_object_t)>();

  void dispatch_set_context(
    dispatch_object_t object,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _dispatch_set_context(
      object,
      context,
    );
  }

  late final _dispatch_set_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_set_context');
  late final _dispatch_set_context = _dispatch_set_contextPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Void>)>();

  void dispatch_set_finalizer_f(
    dispatch_object_t object,
    dispatch_function_t finalizer,
  ) {
    return _dispatch_set_finalizer_f(
      object,
      finalizer,
    );
  }

  late final _dispatch_set_finalizer_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_function_t)>>('dispatch_set_finalizer_f');
  late final _dispatch_set_finalizer_f = _dispatch_set_finalizer_fPtr
      .asFunction<void Function(dispatch_object_t, dispatch_function_t)>();

  void dispatch_activate(
    dispatch_object_t object,
  ) {
    return _dispatch_activate(
      object,
    );
  }

  late final _dispatch_activatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_activate');
  late final _dispatch_activate =
      _dispatch_activatePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_suspend(
    dispatch_object_t object,
  ) {
    return _dispatch_suspend(
      object,
    );
  }

  late final _dispatch_suspendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_suspend');
  late final _dispatch_suspend =
      _dispatch_suspendPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_resume(
    dispatch_object_t object,
  ) {
    return _dispatch_resume(
      object,
    );
  }

  late final _dispatch_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_resume');
  late final _dispatch_resume =
      _dispatch_resumePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_set_qos_class_floor(
    dispatch_object_t object,
    int qos_class,
    int relative_priority,
  ) {
    return _dispatch_set_qos_class_floor(
      object,
      qos_class,
      relative_priority,
    );
  }

  late final _dispatch_set_qos_class_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, dispatch_qos_class_t,
              ffi.Int)>>('dispatch_set_qos_class_floor');
  late final _dispatch_set_qos_class_floor = _dispatch_set_qos_class_floorPtr
      .asFunction<void Function(dispatch_object_t, int, int)>();

  int dispatch_wait(
    ffi.Pointer<ffi.Void> object,
    int timeout,
  ) {
    return _dispatch_wait(
      object,
      timeout,
    );
  }

  late final _dispatch_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<ffi.Void>, dispatch_time_t)>>('dispatch_wait');
  late final _dispatch_wait =
      _dispatch_waitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  void dispatch_cancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_cancel(
      object,
    );
  }

  late final _dispatch_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_cancel');
  late final _dispatch_cancel =
      _dispatch_cancelPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dispatch_testcancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_testcancel(
      object,
    );
  }

  late final _dispatch_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_testcancel');
  late final _dispatch_testcancel =
      _dispatch_testcancelPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_debug(
    dispatch_object_t object,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _dispatch_debug(
      object,
      message,
    );
  }

  late final _dispatch_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_object_t, ffi.Pointer<ffi.Char>)>>('dispatch_debug');
  late final _dispatch_debug = _dispatch_debugPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Char>)>();

  void dispatch_debugv(
    dispatch_object_t object,
    ffi.Pointer<ffi.Char> message,
    va_list ap,
  ) {
    return _dispatch_debugv(
      object,
      message,
      ap,
    );
  }

  late final _dispatch_debugvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, ffi.Pointer<ffi.Char>,
              va_list)>>('dispatch_debugv');
  late final _dispatch_debugv = _dispatch_debugvPtr.asFunction<
      void Function(dispatch_object_t, ffi.Pointer<ffi.Char>, va_list)>();

  void dispatch_async_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_f');
  late final _dispatch_async_f = _dispatch_async_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_sync_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_sync_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_sync_f');
  late final _dispatch_sync_f = _dispatch_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_async_and_wait_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_and_wait_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_and_wait_f');
  late final _dispatch_async_and_wait_f =
      _dispatch_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_apply_f(
    int iterations,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
        work,
  ) {
    return _dispatch_apply_f(
      iterations,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_apply_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Size,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          ffi.Size)>>)>>('dispatch_apply_f');
  late final _dispatch_apply_f = _dispatch_apply_fPtr.asFunction<
      void Function(
          int,
          dispatch_queue_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>)>();

  dispatch_queue_t dispatch_get_current_queue() {
    return _dispatch_get_current_queue();
  }

  late final _dispatch_get_current_queuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function()>>(
          'dispatch_get_current_queue');
  late final _dispatch_get_current_queue =
      _dispatch_get_current_queuePtr.asFunction<dispatch_queue_t Function()>();

  late final ffi.Pointer<dispatch_queue_s> __dispatch_main_q =
      _lookup<dispatch_queue_s>('_dispatch_main_q');

  ffi.Pointer<dispatch_queue_s> get _dispatch_main_q => __dispatch_main_q;

  dispatch_queue_global_t dispatch_get_global_queue(
    int identifier,
    int flags,
  ) {
    return _dispatch_get_global_queue(
      identifier,
      flags,
    );
  }

  late final _dispatch_get_global_queuePtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_global_t Function(
              ffi.IntPtr, uintptr_t)>>('dispatch_get_global_queue');
  late final _dispatch_get_global_queue = _dispatch_get_global_queuePtr
      .asFunction<dispatch_queue_global_t Function(int, int)>();

  late final ffi.Pointer<dispatch_queue_attr_s>
      __dispatch_queue_attr_concurrent =
      _lookup<dispatch_queue_attr_s>('_dispatch_queue_attr_concurrent');

  ffi.Pointer<dispatch_queue_attr_s> get _dispatch_queue_attr_concurrent =>
      __dispatch_queue_attr_concurrent;

  dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(
    dispatch_queue_attr_t attr,
  ) {
    return _dispatch_queue_attr_make_initially_inactive(
      attr,
    );
  }

  late final _dispatch_queue_attr_make_initially_inactivePtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(dispatch_queue_attr_t)>>(
      'dispatch_queue_attr_make_initially_inactive');
  late final _dispatch_queue_attr_make_initially_inactive =
      _dispatch_queue_attr_make_initially_inactivePtr
          .asFunction<dispatch_queue_attr_t Function(dispatch_queue_attr_t)>();

  dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(
    dispatch_queue_attr_t attr,
    int frequency,
  ) {
    return _dispatch_queue_attr_make_with_autorelease_frequency(
      attr,
      frequency,
    );
  }

  late final _dispatch_queue_attr_make_with_autorelease_frequencyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(
                  dispatch_queue_attr_t, ffi.Int32)>>(
      'dispatch_queue_attr_make_with_autorelease_frequency');
  late final _dispatch_queue_attr_make_with_autorelease_frequency =
      _dispatch_queue_attr_make_with_autorelease_frequencyPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int)>();

  dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(
    dispatch_queue_attr_t attr,
    int qos_class,
    int relative_priority,
  ) {
    return _dispatch_queue_attr_make_with_qos_class(
      attr,
      qos_class,
      relative_priority,
    );
  }

  late final _dispatch_queue_attr_make_with_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_attr_t Function(
              dispatch_queue_attr_t,
              dispatch_qos_class_t,
              ffi.Int)>>('dispatch_queue_attr_make_with_qos_class');
  late final _dispatch_queue_attr_make_with_qos_class =
      _dispatch_queue_attr_make_with_qos_classPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int, int)>();

  dispatch_queue_t dispatch_queue_create_with_target(
    ffi.Pointer<ffi.Char> label,
    dispatch_queue_attr_t attr,
    dispatch_queue_t target,
  ) {
    return _dispatch_queue_create_with_target(
      label,
      attr,
      target,
    );
  }

  late final _dispatch_queue_create_with_targetPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(
              ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t,
              dispatch_queue_t)>>('dispatch_queue_create_with_target');
  late final _dispatch_queue_create_with_target =
      _dispatch_queue_create_with_targetPtr.asFunction<
          dispatch_queue_t Function(ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t, dispatch_queue_t)>();

  dispatch_queue_t dispatch_queue_create(
    ffi.Pointer<ffi.Char> label,
    dispatch_queue_attr_t attr,
  ) {
    return _dispatch_queue_create(
      label,
      attr,
    );
  }

  late final _dispatch_queue_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t)>>('dispatch_queue_create');
  late final _dispatch_queue_create = _dispatch_queue_createPtr.asFunction<
      dispatch_queue_t Function(
          ffi.Pointer<ffi.Char>, dispatch_queue_attr_t)>();

  ffi.Pointer<ffi.Char> dispatch_queue_get_label(
    dispatch_queue_t queue,
  ) {
    return _dispatch_queue_get_label(
      queue,
    );
  }

  late final _dispatch_queue_get_labelPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dispatch_queue_t)>>(
      'dispatch_queue_get_label');
  late final _dispatch_queue_get_label = _dispatch_queue_get_labelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(dispatch_queue_t)>();

  int dispatch_queue_get_qos_class(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Int> relative_priority_ptr,
  ) {
    return _dispatch_queue_get_qos_class(
      queue,
      relative_priority_ptr,
    );
  }

  late final _dispatch_queue_get_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_qos_class_t Function(dispatch_queue_t,
              ffi.Pointer<ffi.Int>)>>('dispatch_queue_get_qos_class');
  late final _dispatch_queue_get_qos_class = _dispatch_queue_get_qos_classPtr
      .asFunction<int Function(dispatch_queue_t, ffi.Pointer<ffi.Int>)>();

  void dispatch_set_target_queue(
    dispatch_object_t object,
    dispatch_queue_t queue,
  ) {
    return _dispatch_set_target_queue(
      object,
      queue,
    );
  }

  late final _dispatch_set_target_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_queue_t)>>('dispatch_set_target_queue');
  late final _dispatch_set_target_queue = _dispatch_set_target_queuePtr
      .asFunction<void Function(dispatch_object_t, dispatch_queue_t)>();

  void dispatch_main() {
    return _dispatch_main();
  }

  late final _dispatch_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dispatch_main');
  late final _dispatch_main = _dispatch_mainPtr.asFunction<void Function()>();

  void dispatch_after_f(
    int when,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_after_f(
      when,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_after_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_time_t, dispatch_queue_t,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>>('dispatch_after_f');
  late final _dispatch_after_f = _dispatch_after_fPtr.asFunction<
      void Function(
          int, dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_f');
  late final _dispatch_barrier_async_f =
      _dispatch_barrier_async_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_sync_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_sync_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_sync_f');
  late final _dispatch_barrier_sync_f = _dispatch_barrier_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async_and_wait_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_and_wait_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_and_wait_f');
  late final _dispatch_barrier_async_and_wait_f =
      _dispatch_barrier_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_queue_set_specific(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t destructor,
  ) {
    return _dispatch_queue_set_specific(
      queue,
      key,
      context,
      destructor,
    );
  }

  late final _dispatch_queue_set_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_queue_set_specific');
  late final _dispatch_queue_set_specific =
      _dispatch_queue_set_specificPtr.asFunction<
          void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  ffi.Pointer<ffi.Void> dispatch_queue_get_specific(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_queue_get_specific(
      queue,
      key,
    );
  }

  late final _dispatch_queue_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(dispatch_queue_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_queue_get_specific');
  late final _dispatch_queue_get_specific =
      _dispatch_queue_get_specificPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> dispatch_get_specific(
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_get_specific(
      key,
    );
  }

  late final _dispatch_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('dispatch_get_specific');
  late final _dispatch_get_specific = _dispatch_get_specificPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_assert_queue(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue(
      queue,
    );
  }

  late final _dispatch_assert_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue');
  late final _dispatch_assert_queue =
      _dispatch_assert_queuePtr.asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_barrier(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_barrier(
      queue,
    );
  }

  late final _dispatch_assert_queue_barrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_barrier');
  late final _dispatch_assert_queue_barrier = _dispatch_assert_queue_barrierPtr
      .asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_not(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_not(
      queue,
    );
  }

  late final _dispatch_assert_queue_notPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_not');
  late final _dispatch_assert_queue_not = _dispatch_assert_queue_notPtr
      .asFunction<void Function(dispatch_queue_t)>();

  late final ffi.Pointer<security_token_t> _KERNEL_SECURITY_TOKEN =
      _lookup<security_token_t>('KERNEL_SECURITY_TOKEN');

  security_token_t get KERNEL_SECURITY_TOKEN => _KERNEL_SECURITY_TOKEN.ref;

  late final ffi.Pointer<audit_token_t> _KERNEL_AUDIT_TOKEN =
      _lookup<audit_token_t>('KERNEL_AUDIT_TOKEN');

  audit_token_t get KERNEL_AUDIT_TOKEN => _KERNEL_AUDIT_TOKEN.ref;

  int mach_msg_overwrite(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
    ffi.Pointer<mach_msg_header_t> rcv_msg,
    int rcv_limit,
  ) {
    return _mach_msg_overwrite(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
      rcv_msg,
      rcv_limit,
    );
  }

  late final _mach_msg_overwritePtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t,
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_size_t)>>('mach_msg_overwrite');
  late final _mach_msg_overwrite = _mach_msg_overwritePtr.asFunction<
      int Function(ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int,
          ffi.Pointer<mach_msg_header_t>, int)>();

  int mach_msg(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
  ) {
    return _mach_msg(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
    );
  }

  late final _mach_msgPtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t)>>('mach_msg');
  late final _mach_msg = _mach_msgPtr.asFunction<
      int Function(
          ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int)>();

  int mach_voucher_deallocate(
    int voucher,
  ) {
    return _mach_voucher_deallocate(
      voucher,
    );
  }

  late final _mach_voucher_deallocatePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(mach_port_name_t)>>(
          'mach_voucher_deallocate');
  late final _mach_voucher_deallocate =
      _mach_voucher_deallocatePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_add =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_add');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_add =>
      __dispatch_source_type_data_add;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_or =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_or');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_or =>
      __dispatch_source_type_data_or;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_replace =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_replace');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_replace =>
      __dispatch_source_type_data_replace;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_send =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_send');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_send =>
      __dispatch_source_type_mach_send;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_recv =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_recv');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_recv =>
      __dispatch_source_type_mach_recv;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_memorypressure =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_memorypressure');

  ffi.Pointer<dispatch_source_type_s>
      get _dispatch_source_type_memorypressure =>
          __dispatch_source_type_memorypressure;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_proc =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_proc');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_proc =>
      __dispatch_source_type_proc;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_read =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_read');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_read =>
      __dispatch_source_type_read;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_signal =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_signal');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_signal =>
      __dispatch_source_type_signal;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_timer =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_timer');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_timer =>
      __dispatch_source_type_timer;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_vnode =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_vnode');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_vnode =>
      __dispatch_source_type_vnode;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_write =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_write');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_write =>
      __dispatch_source_type_write;

  dispatch_source_t dispatch_source_create(
    dispatch_source_type_t type,
    int handle,
    int mask,
    dispatch_queue_t queue,
  ) {
    return _dispatch_source_create(
      type,
      handle,
      mask,
      queue,
    );
  }

  late final _dispatch_source_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_source_t Function(dispatch_source_type_t, uintptr_t,
              uintptr_t, dispatch_queue_t)>>('dispatch_source_create');
  late final _dispatch_source_create = _dispatch_source_createPtr.asFunction<
      dispatch_source_t Function(
          dispatch_source_type_t, int, int, dispatch_queue_t)>();

  void dispatch_source_set_event_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_event_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_event_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_event_handler_f');
  late final _dispatch_source_set_event_handler_f =
      _dispatch_source_set_event_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_set_cancel_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_cancel_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_cancel_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_cancel_handler_f');
  late final _dispatch_source_set_cancel_handler_f =
      _dispatch_source_set_cancel_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_cancel(
    dispatch_source_t source,
  ) {
    return _dispatch_source_cancel(
      source,
    );
  }

  late final _dispatch_source_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_source_t)>>(
          'dispatch_source_cancel');
  late final _dispatch_source_cancel =
      _dispatch_source_cancelPtr.asFunction<void Function(dispatch_source_t)>();

  int dispatch_source_testcancel(
    dispatch_source_t source,
  ) {
    return _dispatch_source_testcancel(
      source,
    );
  }

  late final _dispatch_source_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_source_t)>>(
          'dispatch_source_testcancel');
  late final _dispatch_source_testcancel = _dispatch_source_testcancelPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_handle(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_handle(
      source,
    );
  }

  late final _dispatch_source_get_handlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(dispatch_source_t)>>(
          'dispatch_source_get_handle');
  late final _dispatch_source_get_handle = _dispatch_source_get_handlePtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_mask(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_mask(
      source,
    );
  }

  late final _dispatch_source_get_maskPtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(dispatch_source_t)>>(
          'dispatch_source_get_mask');
  late final _dispatch_source_get_mask = _dispatch_source_get_maskPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_data(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_data(
      source,
    );
  }

  late final _dispatch_source_get_dataPtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(dispatch_source_t)>>(
          'dispatch_source_get_data');
  late final _dispatch_source_get_data = _dispatch_source_get_dataPtr
      .asFunction<int Function(dispatch_source_t)>();

  void dispatch_source_merge_data(
    dispatch_source_t source,
    int value,
  ) {
    return _dispatch_source_merge_data(
      source,
      value,
    );
  }

  late final _dispatch_source_merge_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(dispatch_source_t, uintptr_t)>>(
      'dispatch_source_merge_data');
  late final _dispatch_source_merge_data = _dispatch_source_merge_dataPtr
      .asFunction<void Function(dispatch_source_t, int)>();

  void dispatch_source_set_timer(
    dispatch_source_t source,
    int start,
    int interval,
    int leeway,
  ) {
    return _dispatch_source_set_timer(
      source,
      start,
      interval,
      leeway,
    );
  }

  late final _dispatch_source_set_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t, dispatch_time_t, ffi.Uint64,
              ffi.Uint64)>>('dispatch_source_set_timer');
  late final _dispatch_source_set_timer = _dispatch_source_set_timerPtr
      .asFunction<void Function(dispatch_source_t, int, int, int)>();

  void dispatch_source_set_registration_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_registration_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_registration_handler_fPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_source_t, dispatch_function_t)>>(
      'dispatch_source_set_registration_handler_f');
  late final _dispatch_source_set_registration_handler_f =
      _dispatch_source_set_registration_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  dispatch_group_t dispatch_group_create() {
    return _dispatch_group_create();
  }

  late final _dispatch_group_createPtr =
      _lookup<ffi.NativeFunction<dispatch_group_t Function()>>(
          'dispatch_group_create');
  late final _dispatch_group_create =
      _dispatch_group_createPtr.asFunction<dispatch_group_t Function()>();

  void dispatch_group_async_f(
    dispatch_group_t group,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_async_f(
      group,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_group_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_async_f');
  late final _dispatch_group_async_f = _dispatch_group_async_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  int dispatch_group_wait(
    dispatch_group_t group,
    int timeout,
  ) {
    return _dispatch_group_wait(
      group,
      timeout,
    );
  }

  late final _dispatch_group_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              dispatch_group_t, dispatch_time_t)>>('dispatch_group_wait');
  late final _dispatch_group_wait =
      _dispatch_group_waitPtr.asFunction<int Function(dispatch_group_t, int)>();

  void dispatch_group_notify_f(
    dispatch_group_t group,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_notify_f(
      group,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_group_notify_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_notify_f');
  late final _dispatch_group_notify_f = _dispatch_group_notify_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  void dispatch_group_enter(
    dispatch_group_t group,
  ) {
    return _dispatch_group_enter(
      group,
    );
  }

  late final _dispatch_group_enterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_enter');
  late final _dispatch_group_enter =
      _dispatch_group_enterPtr.asFunction<void Function(dispatch_group_t)>();

  void dispatch_group_leave(
    dispatch_group_t group,
  ) {
    return _dispatch_group_leave(
      group,
    );
  }

  late final _dispatch_group_leavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_leave');
  late final _dispatch_group_leave =
      _dispatch_group_leavePtr.asFunction<void Function(dispatch_group_t)>();

  dispatch_semaphore_t dispatch_semaphore_create(
    int value,
  ) {
    return _dispatch_semaphore_create(
      value,
    );
  }

  late final _dispatch_semaphore_createPtr =
      _lookup<ffi.NativeFunction<dispatch_semaphore_t Function(ffi.IntPtr)>>(
          'dispatch_semaphore_create');
  late final _dispatch_semaphore_create = _dispatch_semaphore_createPtr
      .asFunction<dispatch_semaphore_t Function(int)>();

  int dispatch_semaphore_wait(
    dispatch_semaphore_t dsema,
    int timeout,
  ) {
    return _dispatch_semaphore_wait(
      dsema,
      timeout,
    );
  }

  late final _dispatch_semaphore_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(dispatch_semaphore_t,
              dispatch_time_t)>>('dispatch_semaphore_wait');
  late final _dispatch_semaphore_wait = _dispatch_semaphore_waitPtr
      .asFunction<int Function(dispatch_semaphore_t, int)>();

  int dispatch_semaphore_signal(
    dispatch_semaphore_t dsema,
  ) {
    return _dispatch_semaphore_signal(
      dsema,
    );
  }

  late final _dispatch_semaphore_signalPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_semaphore_t)>>(
          'dispatch_semaphore_signal');
  late final _dispatch_semaphore_signal = _dispatch_semaphore_signalPtr
      .asFunction<int Function(dispatch_semaphore_t)>();

  void dispatch_once_f(
    ffi.Pointer<dispatch_once_t> predicate,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t function,
  ) {
    return _dispatch_once_f(
      predicate,
      context,
      function,
    );
  }

  late final _dispatch_once_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_once_f');
  late final _dispatch_once_f = _dispatch_once_fPtr.asFunction<
      void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  late final ffi.Pointer<dispatch_data_s> __dispatch_data_empty =
      _lookup<dispatch_data_s>('_dispatch_data_empty');

  ffi.Pointer<dispatch_data_s> get _dispatch_data_empty =>
      __dispatch_data_empty;

  int dispatch_data_get_size(
    dispatch_data_t data,
  ) {
    return _dispatch_data_get_size(
      data,
    );
  }

  late final _dispatch_data_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(dispatch_data_t)>>(
          'dispatch_data_get_size');
  late final _dispatch_data_get_size =
      _dispatch_data_get_sizePtr.asFunction<int Function(dispatch_data_t)>();

  dispatch_data_t dispatch_data_create_map(
    dispatch_data_t data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer_ptr,
    ffi.Pointer<ffi.Size> size_ptr,
  ) {
    return _dispatch_data_create_map(
      data,
      buffer_ptr,
      size_ptr,
    );
  }

  late final _dispatch_data_create_mapPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('dispatch_data_create_map');
  late final _dispatch_data_create_map =
      _dispatch_data_create_mapPtr.asFunction<
          dispatch_data_t Function(dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  dispatch_data_t dispatch_data_create_concat(
    dispatch_data_t data1,
    dispatch_data_t data2,
  ) {
    return _dispatch_data_create_concat(
      data1,
      data2,
    );
  }

  late final _dispatch_data_create_concatPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t,
              dispatch_data_t)>>('dispatch_data_create_concat');
  late final _dispatch_data_create_concat = _dispatch_data_create_concatPtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, dispatch_data_t)>();

  dispatch_data_t dispatch_data_create_subrange(
    dispatch_data_t data,
    int offset,
    int length,
  ) {
    return _dispatch_data_create_subrange(
      data,
      offset,
      length,
    );
  }

  late final _dispatch_data_create_subrangePtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, ffi.Size,
              ffi.Size)>>('dispatch_data_create_subrange');
  late final _dispatch_data_create_subrange = _dispatch_data_create_subrangePtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, int, int)>();

  dispatch_data_t dispatch_data_copy_region(
    dispatch_data_t data,
    int location,
    ffi.Pointer<ffi.Size> offset_ptr,
  ) {
    return _dispatch_data_copy_region(
      data,
      location,
      offset_ptr,
    );
  }

  late final _dispatch_data_copy_regionPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('dispatch_data_copy_region');
  late final _dispatch_data_copy_region =
      _dispatch_data_copy_regionPtr.asFunction<
          dispatch_data_t Function(
              dispatch_data_t, int, ffi.Pointer<ffi.Size>)>();

  void dispatch_io_close(
    dispatch_io_t channel,
    int flags,
  ) {
    return _dispatch_io_close(
      channel,
      flags,
    );
  }

  late final _dispatch_io_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_io_t, dispatch_io_close_flags_t)>>('dispatch_io_close');
  late final _dispatch_io_close =
      _dispatch_io_closePtr.asFunction<void Function(dispatch_io_t, int)>();

  int dispatch_io_get_descriptor(
    dispatch_io_t channel,
  ) {
    return _dispatch_io_get_descriptor(
      channel,
    );
  }

  late final _dispatch_io_get_descriptorPtr =
      _lookup<ffi.NativeFunction<dispatch_fd_t Function(dispatch_io_t)>>(
          'dispatch_io_get_descriptor');
  late final _dispatch_io_get_descriptor =
      _dispatch_io_get_descriptorPtr.asFunction<int Function(dispatch_io_t)>();

  void dispatch_io_set_high_water(
    dispatch_io_t channel,
    int high_water,
  ) {
    return _dispatch_io_set_high_water(
      channel,
      high_water,
    );
  }

  late final _dispatch_io_set_high_waterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_io_t, ffi.Size)>>(
          'dispatch_io_set_high_water');
  late final _dispatch_io_set_high_water = _dispatch_io_set_high_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_low_water(
    dispatch_io_t channel,
    int low_water,
  ) {
    return _dispatch_io_set_low_water(
      channel,
      low_water,
    );
  }

  late final _dispatch_io_set_low_waterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_io_t, ffi.Size)>>(
          'dispatch_io_set_low_water');
  late final _dispatch_io_set_low_water = _dispatch_io_set_low_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_interval(
    dispatch_io_t channel,
    int interval,
    int flags,
  ) {
    return _dispatch_io_set_interval(
      channel,
      interval,
      flags,
    );
  }

  late final _dispatch_io_set_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, ffi.Uint64,
              dispatch_io_interval_flags_t)>>('dispatch_io_set_interval');
  late final _dispatch_io_set_interval = _dispatch_io_set_intervalPtr
      .asFunction<void Function(dispatch_io_t, int, int)>();

  dispatch_workloop_t dispatch_workloop_create(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _dispatch_workloop_create(
      label,
    );
  }

  late final _dispatch_workloop_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_workloop_t Function(
              ffi.Pointer<ffi.Char>)>>('dispatch_workloop_create');
  late final _dispatch_workloop_create = _dispatch_workloop_createPtr
      .asFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>();

  dispatch_workloop_t dispatch_workloop_create_inactive(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _dispatch_workloop_create_inactive(
      label,
    );
  }

  late final _dispatch_workloop_create_inactivePtr = _lookup<
      ffi.NativeFunction<
          dispatch_workloop_t Function(
              ffi.Pointer<ffi.Char>)>>('dispatch_workloop_create_inactive');
  late final _dispatch_workloop_create_inactive =
      _dispatch_workloop_create_inactivePtr
          .asFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>();

  void dispatch_workloop_set_autorelease_frequency(
    dispatch_workloop_t workloop,
    int frequency,
  ) {
    return _dispatch_workloop_set_autorelease_frequency(
      workloop,
      frequency,
    );
  }

  late final _dispatch_workloop_set_autorelease_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_workloop_t,
              ffi.Int32)>>('dispatch_workloop_set_autorelease_frequency');
  late final _dispatch_workloop_set_autorelease_frequency =
      _dispatch_workloop_set_autorelease_frequencyPtr
          .asFunction<void Function(dispatch_workloop_t, int)>();

  void dispatch_workloop_set_os_workgroup(
    dispatch_workloop_t workloop,
    os_workgroup_t workgroup,
  ) {
    return _dispatch_workloop_set_os_workgroup(
      workloop,
      workgroup,
    );
  }

  late final _dispatch_workloop_set_os_workgroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_workloop_t,
              os_workgroup_t)>>('dispatch_workloop_set_os_workgroup');
  late final _dispatch_workloop_set_os_workgroup =
      _dispatch_workloop_set_os_workgroupPtr
          .asFunction<void Function(dispatch_workloop_t, os_workgroup_t)>();

  int CFReadStreamGetTypeID() {
    return _CFReadStreamGetTypeID();
  }

  late final _CFReadStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID =
      _CFReadStreamGetTypeIDPtr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID() {
    return _CFWriteStreamGetTypeID();
  }

  late final _CFWriteStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID =
      _CFWriteStreamGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyDataWritten =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyDataWritten');

  CFStreamPropertyKey get kCFStreamPropertyDataWritten =>
      _kCFStreamPropertyDataWritten.value;

  set kCFStreamPropertyDataWritten(CFStreamPropertyKey value) =>
      _kCFStreamPropertyDataWritten.value = value;

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy =
      _CFReadStreamCreateWithBytesNoCopyPtr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBufferPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer =
      _CFWriteStreamCreateWithBufferPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffersPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers =
      _CFWriteStreamCreateWithAllocatedBuffersPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile = _CFReadStreamCreateWithFilePtr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile = _CFWriteStreamCreateWithFilePtr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair = _CFStreamCreateBoundPairPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
          ffi.Pointer<CFWriteStreamRef>, int)>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyAppendToFile =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyAppendToFile');

  CFStreamPropertyKey get kCFStreamPropertyAppendToFile =>
      _kCFStreamPropertyAppendToFile.value;

  set kCFStreamPropertyAppendToFile(CFStreamPropertyKey value) =>
      _kCFStreamPropertyAppendToFile.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertyFileCurrentOffset =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyFileCurrentOffset');

  CFStreamPropertyKey get kCFStreamPropertyFileCurrentOffset =>
      _kCFStreamPropertyFileCurrentOffset.value;

  set kCFStreamPropertyFileCurrentOffset(CFStreamPropertyKey value) =>
      _kCFStreamPropertyFileCurrentOffset.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketNativeHandle =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketNativeHandle');

  CFStreamPropertyKey get kCFStreamPropertySocketNativeHandle =>
      _kCFStreamPropertySocketNativeHandle.value;

  set kCFStreamPropertySocketNativeHandle(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketNativeHandle.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemoteHostName =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemoteHostName');

  CFStreamPropertyKey get kCFStreamPropertySocketRemoteHostName =>
      _kCFStreamPropertySocketRemoteHostName.value;

  set kCFStreamPropertySocketRemoteHostName(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemoteHostName.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemotePortNumber =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemotePortNumber');

  CFStreamPropertyKey get kCFStreamPropertySocketRemotePortNumber =>
      _kCFStreamPropertySocketRemotePortNumber.value;

  set kCFStreamPropertySocketRemotePortNumber(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemotePortNumber.value = value;

  late final ffi.Pointer<ffi.Int> _kCFStreamErrorDomainSOCKS =
      _lookup<ffi.Int>('kCFStreamErrorDomainSOCKS');

  int get kCFStreamErrorDomainSOCKS => _kCFStreamErrorDomainSOCKS.value;

  set kCFStreamErrorDomainSOCKS(int value) =>
      _kCFStreamErrorDomainSOCKS.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxy =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxy');

  CFStringRef get kCFStreamPropertySOCKSProxy =>
      _kCFStreamPropertySOCKSProxy.value;

  set kCFStreamPropertySOCKSProxy(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyHost =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyHost');

  CFStringRef get kCFStreamPropertySOCKSProxyHost =>
      _kCFStreamPropertySOCKSProxyHost.value;

  set kCFStreamPropertySOCKSProxyHost(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyPort =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyPort');

  CFStringRef get kCFStreamPropertySOCKSProxyPort =>
      _kCFStreamPropertySOCKSProxyPort.value;

  set kCFStreamPropertySOCKSProxyPort(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyPort.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSVersion =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSVersion');

  CFStringRef get kCFStreamPropertySOCKSVersion =>
      _kCFStreamPropertySOCKSVersion.value;

  set kCFStreamPropertySOCKSVersion(CFStringRef value) =>
      _kCFStreamPropertySOCKSVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion4 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion4');

  CFStringRef get kCFStreamSocketSOCKSVersion4 =>
      _kCFStreamSocketSOCKSVersion4.value;

  set kCFStreamSocketSOCKSVersion4(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion4.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion5 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion5');

  CFStringRef get kCFStreamSocketSOCKSVersion5 =>
      _kCFStreamSocketSOCKSVersion5.value;

  set kCFStreamSocketSOCKSVersion5(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion5.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSUser =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSUser');

  CFStringRef get kCFStreamPropertySOCKSUser =>
      _kCFStreamPropertySOCKSUser.value;

  set kCFStreamPropertySOCKSUser(CFStringRef value) =>
      _kCFStreamPropertySOCKSUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSPassword =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSPassword');

  CFStringRef get kCFStreamPropertySOCKSPassword =>
      _kCFStreamPropertySOCKSPassword.value;

  set kCFStreamPropertySOCKSPassword(CFStringRef value) =>
      _kCFStreamPropertySOCKSPassword.value = value;

  late final ffi.Pointer<ffi.Int> _kCFStreamErrorDomainSSL =
      _lookup<ffi.Int>('kCFStreamErrorDomainSSL');

  int get kCFStreamErrorDomainSSL => _kCFStreamErrorDomainSSL.value;

  set kCFStreamErrorDomainSSL(int value) =>
      _kCFStreamErrorDomainSSL.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySocketSecurityLevel =
      _lookup<CFStringRef>('kCFStreamPropertySocketSecurityLevel');

  CFStringRef get kCFStreamPropertySocketSecurityLevel =>
      _kCFStreamPropertySocketSecurityLevel.value;

  set kCFStreamPropertySocketSecurityLevel(CFStringRef value) =>
      _kCFStreamPropertySocketSecurityLevel.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelNone =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNone');

  CFStringRef get kCFStreamSocketSecurityLevelNone =>
      _kCFStreamSocketSecurityLevelNone.value;

  set kCFStreamSocketSecurityLevelNone(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv2 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv2');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv2 =>
      _kCFStreamSocketSecurityLevelSSLv2.value;

  set kCFStreamSocketSecurityLevelSSLv2(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv3 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv3');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv3 =>
      _kCFStreamSocketSecurityLevelSSLv3.value;

  set kCFStreamSocketSecurityLevelSSLv3(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelTLSv1 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelTLSv1');

  CFStringRef get kCFStreamSocketSecurityLevelTLSv1 =>
      _kCFStreamSocketSecurityLevelTLSv1.value;

  set kCFStreamSocketSecurityLevelTLSv1(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNegotiatedSSL');

  CFStringRef get kCFStreamSocketSecurityLevelNegotiatedSSL =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value;

  set kCFStreamSocketSecurityLevelNegotiatedSSL(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamPropertyShouldCloseNativeSocket =
      _lookup<CFStringRef>('kCFStreamPropertyShouldCloseNativeSocket');

  CFStringRef get kCFStreamPropertyShouldCloseNativeSocket =>
      _kCFStreamPropertyShouldCloseNativeSocket.value;

  set kCFStreamPropertyShouldCloseNativeSocket(CFStringRef value) =>
      _kCFStreamPropertyShouldCloseNativeSocket.value = value;

  void CFStreamCreatePairWithSocket(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket =
      _CFStreamCreatePairWithSocketPtr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost =
      _CFStreamCreatePairWithSocketToHostPtr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature =
      _CFStreamCreatePairWithPeerSocketSignaturePtr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  int CFReadStreamGetStatus(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetStatus(
      stream,
    );
  }

  late final _CFReadStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFStreamStatus Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus =
      _CFReadStreamGetStatusPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamGetStatus(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetStatus(
      stream,
    );
  }

  late final _CFWriteStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFStreamStatus Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus =
      _CFWriteStreamGetStatusPtr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError(
      stream,
    );
  }

  late final _CFReadStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError = _CFReadStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError(
      stream,
    );
  }

  late final _CFWriteStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError = _CFWriteStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen(
      stream,
    );
  }

  late final _CFReadStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen =
      _CFReadStreamOpenPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen(
      stream,
    );
  }

  late final _CFWriteStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen =
      _CFWriteStreamOpenPtr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose(
      stream,
    );
  }

  late final _CFReadStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose =
      _CFReadStreamClosePtr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose(
      stream,
    );
  }

  late final _CFWriteStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose =
      _CFWriteStreamClosePtr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable = _CFReadStreamHasBytesAvailablePtr
      .asFunction<int Function(CFReadStreamRef)>();

  int CFReadStreamRead(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamReadPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead = _CFReadStreamReadPtr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer = _CFReadStreamGetBufferPtr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytesPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes = _CFWriteStreamCanAcceptBytesPtr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite = _CFWriteStreamWritePtr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty = _CFReadStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty = _CFWriteStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty = _CFReadStreamSetPropertyPtr.asFunction<
      int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty =
      _CFWriteStreamSetPropertyPtr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient = _CFReadStreamSetClientPtr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient = _CFWriteStreamSetClientPtr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop =
      _CFReadStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop =
      _CFWriteStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop =
      _CFReadStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop =
      _CFWriteStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue(
    CFReadStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFReadStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue = _CFReadStreamSetDispatchQueuePtr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue(
    CFWriteStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFWriteStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue = _CFWriteStreamSetDispatchQueuePtr
      .asFunction<void Function(CFWriteStreamRef, dispatch_queue_t)>();

  dispatch_queue_t CFReadStreamCopyDispatchQueue(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFReadStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue = _CFReadStreamCopyDispatchQueuePtr
      .asFunction<dispatch_queue_t Function(CFReadStreamRef)>();

  dispatch_queue_t CFWriteStreamCopyDispatchQueue(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFWriteStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue =
      _CFWriteStreamCopyDispatchQueuePtr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError(
      stream,
    );
  }

  late final _CFReadStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError = _CFReadStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError(
      stream,
    );
  }

  late final _CFWriteStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError = _CFWriteStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData =
      _CFPropertyListCreateFromXMLDataPtr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData = _CFPropertyListCreateXMLDataPtr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopyPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy =
      _CFPropertyListCreateDeepCopyPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  int CFPropertyListIsValid(
    CFPropertyListRef plist,
    int format,
  ) {
    return _CFPropertyListIsValid(
      plist,
      format,
    );
  }

  late final _CFPropertyListIsValidPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFPropertyListRef,
              CFPropertyListFormat)>>('CFPropertyListIsValid');
  late final _CFPropertyListIsValid = _CFPropertyListIsValidPtr.asFunction<
      int Function(CFPropertyListRef, int)>();

  int CFPropertyListWriteToStream(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream(
      propertyList,
      stream,
      format,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFPropertyListRef,
              CFWriteStreamRef,
              CFPropertyListFormat,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream =
      _CFPropertyListWriteToStreamPtr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<CFPropertyListFormat> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFPropertyListFormat>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream =
      _CFPropertyListCreateFromStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFPropertyListFormat>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<CFPropertyListFormat> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<CFPropertyListFormat>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData =
      _CFPropertyListCreateWithDataPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<CFPropertyListFormat>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<CFPropertyListFormat> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFPropertyListFormat>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream =
      _CFPropertyListCreateWithStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFPropertyListFormat>, ffi.Pointer<CFErrorRef>)>();

  int CFPropertyListWrite(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite(
      propertyList,
      stream,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFPropertyListRef,
              CFWriteStreamRef,
              CFPropertyListFormat,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite = _CFPropertyListWritePtr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData(
      allocator,
      propertyList,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              CFPropertyListFormat,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData =
      _CFPropertyListCreateDataPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFSetCallBacks> _kCFTypeSetCallBacks =
      _lookup<CFSetCallBacks>('kCFTypeSetCallBacks');

  CFSetCallBacks get kCFTypeSetCallBacks => _kCFTypeSetCallBacks.ref;

  late final ffi.Pointer<CFSetCallBacks> _kCFCopyStringSetCallBacks =
      _lookup<CFSetCallBacks>('kCFCopyStringSetCallBacks');

  CFSetCallBacks get kCFCopyStringSetCallBacks =>
      _kCFCopyStringSetCallBacks.ref;

  int CFSetGetTypeID() {
    return _CFSetGetTypeID();
  }

  late final _CFSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID = _CFSetGetTypeIDPtr.asFunction<int Function()>();

  CFSetRef CFSetCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate = _CFSetCreatePtr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy = _CFSetCreateCopyPtr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable = _CFSetCreateMutablePtr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy = _CFSetCreateMutableCopyPtr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount =
      _CFSetGetCountPtr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue = _CFSetGetCountOfValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetContainsValue');
  late final _CFSetContainsValue = _CFSetContainsValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue = _CFSetGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent = _CFSetGetValueIfPresentPtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues = _CFSetGetValuesPtr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction = _CFSetApplyFunctionPtr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue(
      theSet,
      value,
    );
  }

  late final _CFSetAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue = _CFSetAddValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue = _CFSetReplaceValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue(
      theSet,
      value,
    );
  }

  late final _CFSetSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue = _CFSetSetValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue = _CFSetRemoveValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues(
      theSet,
    );
  }

  late final _CFSetRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues =
      _CFSetRemoveAllValuesPtr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID() {
    return _CFTreeGetTypeID();
  }

  late final _CFTreeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID =
      _CFTreeGetTypeIDPtr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate(
      allocator,
      context,
    );
  }

  late final _CFTreeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate = _CFTreeCreatePtr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent(
      tree,
    );
  }

  late final _CFTreeGetParentPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent =
      _CFTreeGetParentPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling(
      tree,
    );
  }

  late final _CFTreeGetNextSiblingPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling =
      _CFTreeGetNextSiblingPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild(
      tree,
    );
  }

  late final _CFTreeGetFirstChildPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild =
      _CFTreeGetFirstChildPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext(
      tree,
      context,
    );
  }

  late final _CFTreeGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext = _CFTreeGetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount(
      tree,
    );
  }

  late final _CFTreeGetChildCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount =
      _CFTreeGetChildCountPtr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndexPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex = _CFTreeGetChildAtIndexPtr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren = _CFTreeGetChildrenPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren =
      _CFTreeApplyFunctionToChildrenPtr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot(
      tree,
    );
  }

  late final _CFTreeFindRootPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot =
      _CFTreeFindRootPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext(
      tree,
      context,
    );
  }

  late final _CFTreeSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext = _CFTreeSetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild =
      _CFTreePrependChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild =
      _CFTreeAppendChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling =
      _CFTreeInsertSiblingPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove(
      tree,
    );
  }

  late final _CFTreeRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove =
      _CFTreeRemovePtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren =
      _CFTreeRemoveAllChildrenPtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren = _CFTreeSortChildrenPtr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResourcePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource =
      _CFURLCreateDataAndPropertiesFromResourcePtr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource =
      _CFURLWriteDataAndPropertiesToResourcePtr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResourcePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource = _CFURLDestroyResourcePtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResourcePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource =
      _CFURLCreatePropertyFromResourcePtr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLFileExists =
      _lookup<CFStringRef>('kCFURLFileExists');

  CFStringRef get kCFURLFileExists => _kCFURLFileExists.value;

  set kCFURLFileExists(CFStringRef value) => _kCFURLFileExists.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileDirectoryContents =
      _lookup<CFStringRef>('kCFURLFileDirectoryContents');

  CFStringRef get kCFURLFileDirectoryContents =>
      _kCFURLFileDirectoryContents.value;

  set kCFURLFileDirectoryContents(CFStringRef value) =>
      _kCFURLFileDirectoryContents.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLength =
      _lookup<CFStringRef>('kCFURLFileLength');

  CFStringRef get kCFURLFileLength => _kCFURLFileLength.value;

  set kCFURLFileLength(CFStringRef value) => _kCFURLFileLength.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLastModificationTime =
      _lookup<CFStringRef>('kCFURLFileLastModificationTime');

  CFStringRef get kCFURLFileLastModificationTime =>
      _kCFURLFileLastModificationTime.value;

  set kCFURLFileLastModificationTime(CFStringRef value) =>
      _kCFURLFileLastModificationTime.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFilePOSIXMode =
      _lookup<CFStringRef>('kCFURLFilePOSIXMode');

  CFStringRef get kCFURLFilePOSIXMode => _kCFURLFilePOSIXMode.value;

  set kCFURLFilePOSIXMode(CFStringRef value) =>
      _kCFURLFilePOSIXMode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileOwnerID =
      _lookup<CFStringRef>('kCFURLFileOwnerID');

  CFStringRef get kCFURLFileOwnerID => _kCFURLFileOwnerID.value;

  set kCFURLFileOwnerID(CFStringRef value) => _kCFURLFileOwnerID.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusCode =
      _lookup<CFStringRef>('kCFURLHTTPStatusCode');

  CFStringRef get kCFURLHTTPStatusCode => _kCFURLHTTPStatusCode.value;

  set kCFURLHTTPStatusCode(CFStringRef value) =>
      _kCFURLHTTPStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusLine =
      _lookup<CFStringRef>('kCFURLHTTPStatusLine');

  CFStringRef get kCFURLHTTPStatusLine => _kCFURLHTTPStatusLine.value;

  set kCFURLHTTPStatusLine(CFStringRef value) =>
      _kCFURLHTTPStatusLine.value = value;

  int CFUUIDGetTypeID() {
    return _CFUUIDGetTypeID();
  }

  late final _CFUUIDGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID =
      _CFUUIDGetTypeIDPtr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate(
      alloc,
    );
  }

  late final _CFUUIDCreatePtr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate =
      _CFUUIDCreatePtr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes = _CFUUIDCreateWithBytesPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromStringPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString = _CFUUIDCreateFromStringPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString = _CFUUIDCreateStringPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes =
      _CFUUIDGetConstantUUIDWithBytesPtr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytesPtr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes =
      _CFUUIDGetUUIDBytesPtr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytesPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes = _CFUUIDCreateFromUUIDBytesPtr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL() {
    return _CFCopyHomeDirectoryURL();
  }

  late final _CFCopyHomeDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL =
      _CFCopyHomeDirectoryURLPtr.asFunction<CFURLRef Function()>();

  late final ffi.Pointer<CFStringRef> _kCFBundleInfoDictionaryVersionKey =
      _lookup<CFStringRef>('kCFBundleInfoDictionaryVersionKey');

  CFStringRef get kCFBundleInfoDictionaryVersionKey =>
      _kCFBundleInfoDictionaryVersionKey.value;

  set kCFBundleInfoDictionaryVersionKey(CFStringRef value) =>
      _kCFBundleInfoDictionaryVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleExecutableKey =
      _lookup<CFStringRef>('kCFBundleExecutableKey');

  CFStringRef get kCFBundleExecutableKey => _kCFBundleExecutableKey.value;

  set kCFBundleExecutableKey(CFStringRef value) =>
      _kCFBundleExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleIdentifierKey =
      _lookup<CFStringRef>('kCFBundleIdentifierKey');

  CFStringRef get kCFBundleIdentifierKey => _kCFBundleIdentifierKey.value;

  set kCFBundleIdentifierKey(CFStringRef value) =>
      _kCFBundleIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleVersionKey =
      _lookup<CFStringRef>('kCFBundleVersionKey');

  CFStringRef get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  set kCFBundleVersionKey(CFStringRef value) =>
      _kCFBundleVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleDevelopmentRegionKey =
      _lookup<CFStringRef>('kCFBundleDevelopmentRegionKey');

  CFStringRef get kCFBundleDevelopmentRegionKey =>
      _kCFBundleDevelopmentRegionKey.value;

  set kCFBundleDevelopmentRegionKey(CFStringRef value) =>
      _kCFBundleDevelopmentRegionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleNameKey =
      _lookup<CFStringRef>('kCFBundleNameKey');

  CFStringRef get kCFBundleNameKey => _kCFBundleNameKey.value;

  set kCFBundleNameKey(CFStringRef value) => _kCFBundleNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleLocalizationsKey =
      _lookup<CFStringRef>('kCFBundleLocalizationsKey');

  CFStringRef get kCFBundleLocalizationsKey => _kCFBundleLocalizationsKey.value;

  set kCFBundleLocalizationsKey(CFStringRef value) =>
      _kCFBundleLocalizationsKey.value = value;

  CFBundleRef CFBundleGetMainBundle() {
    return _CFBundleGetMainBundle();
  }

  late final _CFBundleGetMainBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle =
      _CFBundleGetMainBundlePtr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifierPtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier =
      _CFBundleGetBundleWithIdentifierPtr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles() {
    return _CFBundleGetAllBundles();
  }

  late final _CFBundleGetAllBundlesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles =
      _CFBundleGetAllBundlesPtr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID() {
    return _CFBundleGetTypeID();
  }

  late final _CFBundleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID =
      _CFBundleGetTypeIDPtr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreatePtr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate = _CFBundleCreatePtr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory =
      _CFBundleCreateBundlesFromDirectoryPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL =
      _CFBundleCopyBundleURLPtr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKeyPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey =
      _CFBundleGetValueForInfoDictionaryKeyPtr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary = _CFBundleGetInfoDictionaryPtr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary =
      _CFBundleGetLocalInfoDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo = _CFBundleGetPackageInfoPtr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier(
      bundle,
    );
  }

  late final _CFBundleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier =
      _CFBundleGetIdentifierPtr.asFunction<CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber =
      _CFBundleGetVersionNumberPtr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion = _CFBundleGetDevelopmentRegionPtr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL =
      _CFBundleCopySupportFilesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL =
      _CFBundleCopyResourcesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL =
      _CFBundleCopyPrivateFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL =
      _CFBundleCopySharedFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL = _CFBundleCopySharedSupportURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL = _CFBundleCopyBuiltInPlugInsURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectoryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory =
      _CFBundleCopyInfoDictionaryInDirectoryPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory =
      _CFBundleGetPackageInfoInDirectoryPtr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL = _CFBundleCopyResourceURLPtr.asFunction<
      CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType =
      _CFBundleCopyResourceURLsOfTypePtr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString =
      _CFBundleCopyLocalizedStringPtr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory =
      _CFBundleCopyResourceURLInDirectoryPtr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory =
      _CFBundleCopyResourceURLsOfTypeInDirectoryPtr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizationsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations =
      _CFBundleCopyBundleLocalizationsPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArrayPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray =
      _CFBundleCopyPreferredLocalizationsFromArrayPtr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferencesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences =
      _CFBundleCopyLocalizationsForPreferencesPtr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization =
      _CFBundleCopyResourceURLForLocalizationPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization =
      _CFBundleCopyResourceURLsOfTypeForLocalizationPtr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURLPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL =
      _CFBundleCopyInfoDictionaryForURLPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL =
      _CFBundleCopyLocalizationsForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL =
      _CFBundleCopyExecutableArchitecturesForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL = _CFBundleCopyExecutableURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures =
      _CFBundleCopyExecutableArchitecturesPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable = _CFBundlePreflightExecutablePtr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnErrorPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError =
      _CFBundleLoadExecutableAndReturnErrorPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable(
      bundle,
    );
  }

  late final _CFBundleLoadExecutablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable =
      _CFBundleLoadExecutablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded =
      _CFBundleIsExecutableLoadedPtr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable =
      _CFBundleUnloadExecutablePtr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName =
      _CFBundleGetFunctionPointerForNamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames =
      _CFBundleGetFunctionPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName = _CFBundleGetDataPointerForNamePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames =
      _CFBundleGetDataPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL =
      _CFBundleCopyAuxiliaryExecutableURLPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable =
      _CFBundleIsExecutableLoadablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL =
      _CFBundleIsExecutableLoadableForURLPtr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable =
      _CFBundleIsArchitectureLoadablePtr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn(
      bundle,
    );
  }

  late final _CFBundleGetPlugInPtr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn =
      _CFBundleGetPlugInPtr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMapPtr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap =
      _CFBundleOpenBundleResourceMapPtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFilesPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles =
      _CFBundleOpenBundleResourceFilesPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap =
      _CFBundleCloseBundleResourceMapPtr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID() {
    return _CFMessagePortGetTypeID();
  }

  late final _CFMessagePortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID =
      _CFMessagePortGetTypeIDPtr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocalPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal =
      _CFMessagePortCreateLocalPtr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemotePtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote = _CFMessagePortCreateRemotePtr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote(
      ms,
    );
  }

  late final _CFMessagePortIsRemotePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote =
      _CFMessagePortIsRemotePtr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName(
      ms,
    );
  }

  late final _CFMessagePortGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName = _CFMessagePortGetNamePtr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetNamePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName = _CFMessagePortSetNamePtr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext = _CFMessagePortGetContextPtr.asFunction<
      void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate(
      ms,
    );
  }

  late final _CFMessagePortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate =
      _CFMessagePortInvalidatePtr.asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid(
      ms,
    );
  }

  late final _CFMessagePortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid =
      _CFMessagePortIsValidPtr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack =
      _CFMessagePortGetInvalidationCallBackPtr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack =
      _CFMessagePortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequestPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest =
      _CFMessagePortSendRequestPtr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource =
      _CFMessagePortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue(
    CFMessagePortRef ms,
    dispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue(
      ms,
      queue,
    );
  }

  late final _CFMessagePortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue = _CFMessagePortSetDispatchQueuePtr
      .asFunction<void Function(CFMessagePortRef, dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegistrationKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegistrationKey');

  CFStringRef get kCFPlugInDynamicRegistrationKey =>
      _kCFPlugInDynamicRegistrationKey.value;

  set kCFPlugInDynamicRegistrationKey(CFStringRef value) =>
      _kCFPlugInDynamicRegistrationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegisterFunctionKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegisterFunctionKey');

  CFStringRef get kCFPlugInDynamicRegisterFunctionKey =>
      _kCFPlugInDynamicRegisterFunctionKey.value;

  set kCFPlugInDynamicRegisterFunctionKey(CFStringRef value) =>
      _kCFPlugInDynamicRegisterFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInUnloadFunctionKey =
      _lookup<CFStringRef>('kCFPlugInUnloadFunctionKey');

  CFStringRef get kCFPlugInUnloadFunctionKey =>
      _kCFPlugInUnloadFunctionKey.value;

  set kCFPlugInUnloadFunctionKey(CFStringRef value) =>
      _kCFPlugInUnloadFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInFactoriesKey =
      _lookup<CFStringRef>('kCFPlugInFactoriesKey');

  CFStringRef get kCFPlugInFactoriesKey => _kCFPlugInFactoriesKey.value;

  set kCFPlugInFactoriesKey(CFStringRef value) =>
      _kCFPlugInFactoriesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInTypesKey =
      _lookup<CFStringRef>('kCFPlugInTypesKey');

  CFStringRef get kCFPlugInTypesKey => _kCFPlugInTypesKey.value;

  set kCFPlugInTypesKey(CFStringRef value) => _kCFPlugInTypesKey.value = value;

  int CFPlugInGetTypeID() {
    return _CFPlugInGetTypeID();
  }

  late final _CFPlugInGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID =
      _CFPlugInGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreatePtr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate = _CFPlugInCreatePtr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle(
      plugIn,
    );
  }

  late final _CFPlugInGetBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle =
      _CFPlugInGetBundlePtr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand =
      _CFPlugInSetLoadOnDemandPtr.asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand =
      _CFPlugInIsLoadOnDemandPtr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypePtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType =
      _CFPlugInFindFactoriesForPlugInTypePtr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn =
      _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate = _CFPlugInInstanceCreatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction =
      _CFPlugInRegisterFactoryFunctionPtr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByNamePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName =
      _CFPlugInRegisterFactoryFunctionByNamePtr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactoryPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory =
      _CFPlugInUnregisterFactoryPtr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType = _CFPlugInRegisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType = _CFPlugInUnregisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory =
      _CFPlugInAddInstanceForFactoryPtr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory =
      _CFPlugInRemoveInstanceForFactoryPtr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTablePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable =
      _CFPlugInInstanceGetInterfaceFunctionTablePtr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName =
      _CFPlugInInstanceGetFactoryNamePtr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFPlugInInstanceRef)>>('CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData =
      _CFPlugInInstanceGetInstanceDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID() {
    return _CFPlugInInstanceGetTypeID();
  }

  late final _CFPlugInInstanceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID =
      _CFPlugInInstanceGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSizePtr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize =
      _CFPlugInInstanceCreateWithInstanceDataSizePtr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID() {
    return _CFMachPortGetTypeID();
  }

  late final _CFMachPortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID =
      _CFMachPortGetTypeIDPtr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreatePtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate = _CFMachPortCreatePtr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPortPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort =
      _CFMachPortCreateWithPortPtr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort(
      port,
    );
  }

  late final _CFMachPortGetPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort =
      _CFMachPortGetPortPtr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext(
      port,
      context,
    );
  }

  late final _CFMachPortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext = _CFMachPortGetContextPtr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate(
      port,
    );
  }

  late final _CFMachPortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate =
      _CFMachPortInvalidatePtr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid(
      port,
    );
  }

  late final _CFMachPortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid =
      _CFMachPortIsValidPtr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack =
      _CFMachPortGetInvalidationCallBackPtr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack =
      _CFMachPortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource =
      _CFMachPortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID() {
    return _CFAttributedStringGetTypeID();
  }

  late final _CFAttributedStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID =
      _CFAttributedStringGetTypeIDPtr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate =
      _CFAttributedStringCreatePtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring =
      _CFAttributedStringCreateWithSubstringPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy =
      _CFAttributedStringCreateCopyPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString(
      aStr,
    );
  }

  late final _CFAttributedStringGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString = _CFAttributedStringGetStringPtr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength(
      aStr,
    );
  }

  late final _CFAttributedStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength = _CFAttributedStringGetLengthPtr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes =
      _CFAttributedStringGetAttributesPtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute =
      _CFAttributedStringGetAttributePtr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange =
      _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange =
      _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy =
      _CFAttributedStringCreateMutableCopyPtr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable =
      _CFAttributedStringCreateMutablePtr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString =
      _CFAttributedStringReplaceStringPtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableStringPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString =
      _CFAttributedStringGetMutableStringPtr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes =
      _CFAttributedStringSetAttributesPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute =
      _CFAttributedStringSetAttributePtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute =
      _CFAttributedStringRemoveAttributePtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString =
      _CFAttributedStringReplaceAttributedStringPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing =
      _CFAttributedStringBeginEditingPtr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing = _CFAttributedStringEndEditingPtr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  int CFURLEnumeratorGetTypeID() {
    return _CFURLEnumeratorGetTypeID();
  }

  late final _CFURLEnumeratorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID =
      _CFURLEnumeratorGetTypeIDPtr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL(
      alloc,
      directoryURL,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef,
              CFURLRef,
              CFURLEnumeratorOptions,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL =
      _CFURLEnumeratorCreateForDirectoryURLPtr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes(
    CFAllocatorRef alloc,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes(
      alloc,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumesPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLEnumeratorOptions,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes =
      _CFURLEnumeratorCreateForMountedVolumesPtr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFURLEnumeratorGetNextURL(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLEnumeratorGetNextURL(
      enumerator,
      url,
      error,
    );
  }

  late final _CFURLEnumeratorGetNextURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorResult Function(
              CFURLEnumeratorRef,
              ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL =
      _CFURLEnumeratorGetNextURLPtr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents =
      _CFURLEnumeratorSkipDescendentsPtr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevelPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel =
      _CFURLEnumeratorGetDescendentLevelPtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChangePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange =
      _CFURLEnumeratorGetSourceDidChangePtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  acl_t acl_dup(
    acl_t acl,
  ) {
    return _acl_dup(
      acl,
    );
  }

  late final _acl_dupPtr =
      _lookup<ffi.NativeFunction<acl_t Function(acl_t)>>('acl_dup');
  late final _acl_dup = _acl_dupPtr.asFunction<acl_t Function(acl_t)>();

  int acl_free(
    ffi.Pointer<ffi.Void> obj_p,
  ) {
    return _acl_free(
      obj_p,
    );
  }

  late final _acl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'acl_free');
  late final _acl_free =
      _acl_freePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_init(
    int count,
  ) {
    return _acl_init(
      count,
    );
  }

  late final _acl_initPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int)>>('acl_init');
  late final _acl_init = _acl_initPtr.asFunction<acl_t Function(int)>();

  int acl_copy_entry(
    acl_entry_t dest_d,
    acl_entry_t src_d,
  ) {
    return _acl_copy_entry(
      dest_d,
      src_d,
    );
  }

  late final _acl_copy_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, acl_entry_t)>>(
          'acl_copy_entry');
  late final _acl_copy_entry =
      _acl_copy_entryPtr.asFunction<int Function(acl_entry_t, acl_entry_t)>();

  int acl_create_entry(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_create_entry(
      acl_p,
      entry_p,
    );
  }

  late final _acl_create_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<acl_t>,
              ffi.Pointer<acl_entry_t>)>>('acl_create_entry');
  late final _acl_create_entry = _acl_create_entryPtr
      .asFunction<int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>)>();

  int acl_create_entry_np(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
    int entry_index,
  ) {
    return _acl_create_entry_np(
      acl_p,
      entry_p,
      entry_index,
    );
  }

  late final _acl_create_entry_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>,
              ffi.Int)>>('acl_create_entry_np');
  late final _acl_create_entry_np = _acl_create_entry_npPtr.asFunction<
      int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>, int)>();

  int acl_delete_entry(
    acl_t acl,
    acl_entry_t entry_d,
  ) {
    return _acl_delete_entry(
      acl,
      entry_d,
    );
  }

  late final _acl_delete_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_t, acl_entry_t)>>(
          'acl_delete_entry');
  late final _acl_delete_entry =
      _acl_delete_entryPtr.asFunction<int Function(acl_t, acl_entry_t)>();

  int acl_get_entry(
    acl_t acl,
    int entry_id,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_get_entry(
      acl,
      entry_id,
      entry_p,
    );
  }

  late final _acl_get_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_t, ffi.Int, ffi.Pointer<acl_entry_t>)>>('acl_get_entry');
  late final _acl_get_entry = _acl_get_entryPtr
      .asFunction<int Function(acl_t, int, ffi.Pointer<acl_entry_t>)>();

  int acl_valid(
    acl_t acl,
  ) {
    return _acl_valid(
      acl,
    );
  }

  late final _acl_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_t)>>('acl_valid');
  late final _acl_valid = _acl_validPtr.asFunction<int Function(acl_t)>();

  int acl_valid_fd_np(
    int fd,
    int type,
    acl_t acl,
  ) {
    return _acl_valid_fd_np(
      fd,
      type,
      acl,
    );
  }

  late final _acl_valid_fd_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int32, acl_t)>>(
          'acl_valid_fd_np');
  late final _acl_valid_fd_np =
      _acl_valid_fd_npPtr.asFunction<int Function(int, int, acl_t)>();

  int acl_valid_file_np(
    ffi.Pointer<ffi.Char> path,
    int type,
    acl_t acl,
  ) {
    return _acl_valid_file_np(
      path,
      type,
      acl,
    );
  }

  late final _acl_valid_file_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int32, acl_t)>>('acl_valid_file_np');
  late final _acl_valid_file_np = _acl_valid_file_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_valid_link_np(
    ffi.Pointer<ffi.Char> path,
    int type,
    acl_t acl,
  ) {
    return _acl_valid_link_np(
      path,
      type,
      acl,
    );
  }

  late final _acl_valid_link_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int32, acl_t)>>('acl_valid_link_np');
  late final _acl_valid_link_np = _acl_valid_link_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_add_perm(
    acl_permset_t permset_d,
    int perm,
  ) {
    return _acl_add_perm(
      permset_d,
      perm,
    );
  }

  late final _acl_add_permPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.Int32)>>(
          'acl_add_perm');
  late final _acl_add_perm =
      _acl_add_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_calc_mask(
    ffi.Pointer<acl_t> acl_p,
  ) {
    return _acl_calc_mask(
      acl_p,
    );
  }

  late final _acl_calc_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<acl_t>)>>(
          'acl_calc_mask');
  late final _acl_calc_mask =
      _acl_calc_maskPtr.asFunction<int Function(ffi.Pointer<acl_t>)>();

  int acl_clear_perms(
    acl_permset_t permset_d,
  ) {
    return _acl_clear_perms(
      permset_d,
    );
  }

  late final _acl_clear_permsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_permset_t)>>(
          'acl_clear_perms');
  late final _acl_clear_perms =
      _acl_clear_permsPtr.asFunction<int Function(acl_permset_t)>();

  int acl_delete_perm(
    acl_permset_t permset_d,
    int perm,
  ) {
    return _acl_delete_perm(
      permset_d,
      perm,
    );
  }

  late final _acl_delete_permPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.Int32)>>(
          'acl_delete_perm');
  late final _acl_delete_perm =
      _acl_delete_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_perm_np(
    acl_permset_t permset_d,
    int perm,
  ) {
    return _acl_get_perm_np(
      permset_d,
      perm,
    );
  }

  late final _acl_get_perm_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.Int32)>>(
          'acl_get_perm_np');
  late final _acl_get_perm_np =
      _acl_get_perm_npPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_permset(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_t> permset_p,
  ) {
    return _acl_get_permset(
      entry_d,
      permset_p,
    );
  }

  late final _acl_get_permsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<acl_permset_t>)>>('acl_get_permset');
  late final _acl_get_permset = _acl_get_permsetPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_t>)>();

  int acl_set_permset(
    acl_entry_t entry_d,
    acl_permset_t permset_d,
  ) {
    return _acl_set_permset(
      entry_d,
      permset_d,
    );
  }

  late final _acl_set_permsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, acl_permset_t)>>(
          'acl_set_permset');
  late final _acl_set_permset = _acl_set_permsetPtr
      .asFunction<int Function(acl_entry_t, acl_permset_t)>();

  int acl_maximal_permset_mask_np(
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_maximal_permset_mask_np(
      mask_p,
    );
  }

  late final _acl_maximal_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<acl_permset_mask_t>)>>('acl_maximal_permset_mask_np');
  late final _acl_maximal_permset_mask_np = _acl_maximal_permset_mask_npPtr
      .asFunction<int Function(ffi.Pointer<acl_permset_mask_t>)>();

  int acl_get_permset_mask_np(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_get_permset_mask_np(
      entry_d,
      mask_p,
    );
  }

  late final _acl_get_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(acl_entry_t,
              ffi.Pointer<acl_permset_mask_t>)>>('acl_get_permset_mask_np');
  late final _acl_get_permset_mask_np = _acl_get_permset_mask_npPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_mask_t>)>();

  int acl_set_permset_mask_np(
    acl_entry_t entry_d,
    int mask,
  ) {
    return _acl_set_permset_mask_np(
      entry_d,
      mask,
    );
  }

  late final _acl_set_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, acl_permset_mask_t)>>('acl_set_permset_mask_np');
  late final _acl_set_permset_mask_np =
      _acl_set_permset_mask_npPtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_add_flag_np(
    acl_flagset_t flagset_d,
    int flag,
  ) {
    return _acl_add_flag_np(
      flagset_d,
      flag,
    );
  }

  late final _acl_add_flag_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.Int32)>>(
          'acl_add_flag_np');
  late final _acl_add_flag_np =
      _acl_add_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_clear_flags_np(
    acl_flagset_t flagset_d,
  ) {
    return _acl_clear_flags_np(
      flagset_d,
    );
  }

  late final _acl_clear_flags_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_flagset_t)>>(
          'acl_clear_flags_np');
  late final _acl_clear_flags_np =
      _acl_clear_flags_npPtr.asFunction<int Function(acl_flagset_t)>();

  int acl_delete_flag_np(
    acl_flagset_t flagset_d,
    int flag,
  ) {
    return _acl_delete_flag_np(
      flagset_d,
      flag,
    );
  }

  late final _acl_delete_flag_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.Int32)>>(
          'acl_delete_flag_np');
  late final _acl_delete_flag_np =
      _acl_delete_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flag_np(
    acl_flagset_t flagset_d,
    int flag,
  ) {
    return _acl_get_flag_np(
      flagset_d,
      flag,
    );
  }

  late final _acl_get_flag_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.Int32)>>(
          'acl_get_flag_np');
  late final _acl_get_flag_np =
      _acl_get_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    ffi.Pointer<acl_flagset_t> flagset_p,
  ) {
    return _acl_get_flagset_np(
      obj_p,
      flagset_p,
    );
  }

  late final _acl_get_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<acl_flagset_t>)>>('acl_get_flagset_np');
  late final _acl_get_flagset_np = _acl_get_flagset_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<acl_flagset_t>)>();

  int acl_set_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    acl_flagset_t flagset_d,
  ) {
    return _acl_set_flagset_np(
      obj_p,
      flagset_d,
    );
  }

  late final _acl_set_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, acl_flagset_t)>>('acl_set_flagset_np');
  late final _acl_set_flagset_np = _acl_set_flagset_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_flagset_t)>();

  ffi.Pointer<ffi.Void> acl_get_qualifier(
    acl_entry_t entry_d,
  ) {
    return _acl_get_qualifier(
      entry_d,
    );
  }

  late final _acl_get_qualifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>>(
          'acl_get_qualifier');
  late final _acl_get_qualifier = _acl_get_qualifierPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>();

  int acl_get_tag_type(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.Int32> tag_type_p,
  ) {
    return _acl_get_tag_type(
      entry_d,
      tag_type_p,
    );
  }

  late final _acl_get_tag_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.Int32>)>>('acl_get_tag_type');
  late final _acl_get_tag_type = _acl_get_tag_typePtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.Int32>)>();

  int acl_set_qualifier(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.Void> tag_qualifier_p,
  ) {
    return _acl_set_qualifier(
      entry_d,
      tag_qualifier_p,
    );
  }

  late final _acl_set_qualifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.Void>)>>('acl_set_qualifier');
  late final _acl_set_qualifier = _acl_set_qualifierPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.Void>)>();

  int acl_set_tag_type(
    acl_entry_t entry_d,
    int tag_type,
  ) {
    return _acl_set_tag_type(
      entry_d,
      tag_type,
    );
  }

  late final _acl_set_tag_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, ffi.Int32)>>(
          'acl_set_tag_type');
  late final _acl_set_tag_type =
      _acl_set_tag_typePtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_delete_def_file(
    ffi.Pointer<ffi.Char> path_p,
  ) {
    return _acl_delete_def_file(
      path_p,
    );
  }

  late final _acl_delete_def_filePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acl_delete_def_file');
  late final _acl_delete_def_file =
      _acl_delete_def_filePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  acl_t acl_get_fd(
    int fd,
  ) {
    return _acl_get_fd(
      fd,
    );
  }

  late final _acl_get_fdPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int)>>('acl_get_fd');
  late final _acl_get_fd = _acl_get_fdPtr.asFunction<acl_t Function(int)>();

  acl_t acl_get_fd_np(
    int fd,
    int type,
  ) {
    return _acl_get_fd_np(
      fd,
      type,
    );
  }

  late final _acl_get_fd_npPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int, ffi.Int32)>>(
          'acl_get_fd_np');
  late final _acl_get_fd_np =
      _acl_get_fd_npPtr.asFunction<acl_t Function(int, int)>();

  acl_t acl_get_file(
    ffi.Pointer<ffi.Char> path_p,
    int type,
  ) {
    return _acl_get_file(
      path_p,
      type,
    );
  }

  late final _acl_get_filePtr = _lookup<
          ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Char>, ffi.Int32)>>(
      'acl_get_file');
  late final _acl_get_file =
      _acl_get_filePtr.asFunction<acl_t Function(ffi.Pointer<ffi.Char>, int)>();

  acl_t acl_get_link_np(
    ffi.Pointer<ffi.Char> path_p,
    int type,
  ) {
    return _acl_get_link_np(
      path_p,
      type,
    );
  }

  late final _acl_get_link_npPtr = _lookup<
          ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Char>, ffi.Int32)>>(
      'acl_get_link_np');
  late final _acl_get_link_np = _acl_get_link_npPtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Char>, int)>();

  int acl_set_fd(
    int fd,
    acl_t acl,
  ) {
    return _acl_set_fd(
      fd,
      acl,
    );
  }

  late final _acl_set_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, acl_t)>>(
          'acl_set_fd');
  late final _acl_set_fd =
      _acl_set_fdPtr.asFunction<int Function(int, acl_t)>();

  int acl_set_fd_np(
    int fd,
    acl_t acl,
    int acl_type,
  ) {
    return _acl_set_fd_np(
      fd,
      acl,
      acl_type,
    );
  }

  late final _acl_set_fd_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, acl_t, ffi.Int32)>>(
          'acl_set_fd_np');
  late final _acl_set_fd_np =
      _acl_set_fd_npPtr.asFunction<int Function(int, acl_t, int)>();

  int acl_set_file(
    ffi.Pointer<ffi.Char> path_p,
    int type,
    acl_t acl,
  ) {
    return _acl_set_file(
      path_p,
      type,
      acl,
    );
  }

  late final _acl_set_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int32, acl_t)>>('acl_set_file');
  late final _acl_set_file = _acl_set_filePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_set_link_np(
    ffi.Pointer<ffi.Char> path_p,
    int type,
    acl_t acl,
  ) {
    return _acl_set_link_np(
      path_p,
      type,
      acl,
    );
  }

  late final _acl_set_link_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int32, acl_t)>>('acl_set_link_np');
  late final _acl_set_link_np = _acl_set_link_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_copy_ext(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_extPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext');
  late final _acl_copy_ext = _acl_copy_extPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  int acl_copy_ext_native(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext_native(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_ext_nativePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext_native');
  late final _acl_copy_ext_native = _acl_copy_ext_nativePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  acl_t acl_copy_int(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int(
      buf_p,
    );
  }

  late final _acl_copy_intPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int');
  late final _acl_copy_int =
      _acl_copy_intPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_copy_int_native(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int_native(
      buf_p,
    );
  }

  late final _acl_copy_int_nativePtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int_native');
  late final _acl_copy_int_native = _acl_copy_int_nativePtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_from_text(
    ffi.Pointer<ffi.Char> buf_p,
  ) {
    return _acl_from_text(
      buf_p,
    );
  }

  late final _acl_from_textPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Char>)>>(
          'acl_from_text');
  late final _acl_from_text =
      _acl_from_textPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Char>)>();

  int acl_size(
    acl_t acl,
  ) {
    return _acl_size(
      acl,
    );
  }

  late final _acl_sizePtr =
      _lookup<ffi.NativeFunction<ssize_t Function(acl_t)>>('acl_size');
  late final _acl_size = _acl_sizePtr.asFunction<int Function(acl_t)>();

  ffi.Pointer<ffi.Char> acl_to_text(
    acl_t acl,
    ffi.Pointer<ssize_t> len_p,
  ) {
    return _acl_to_text(
      acl,
      len_p,
    );
  }

  late final _acl_to_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              acl_t, ffi.Pointer<ssize_t>)>>('acl_to_text');
  late final _acl_to_text = _acl_to_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(acl_t, ffi.Pointer<ssize_t>)>();

  int CFFileSecurityGetTypeID() {
    return _CFFileSecurityGetTypeID();
  }

  late final _CFFileSecurityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID =
      _CFFileSecurityGetTypeIDPtr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate(
      allocator,
    );
  }

  late final _CFFileSecurityCreatePtr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate = _CFFileSecurityCreatePtr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy =
      _CFFileSecurityCreateCopyPtr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID = _CFFileSecurityCopyOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID = _CFFileSecuritySetOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID = _CFFileSecurityCopyGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID = _CFFileSecuritySetGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlListPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList =
      _CFFileSecurityCopyAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlListPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList =
      _CFFileSecuritySetAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t> owner,
  ) {
    return _CFFileSecurityGetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner = _CFFileSecurityGetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t>)>();

  int CFFileSecuritySetOwner(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwnerPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner = _CFFileSecuritySetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroupPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup = _CFFileSecurityGetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroupPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup = _CFFileSecuritySetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t> mode,
  ) {
    return _CFFileSecurityGetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetModePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode = _CFFileSecurityGetModePtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t>)>();

  int CFFileSecuritySetMode(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetModePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode = _CFFileSecuritySetModePtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityClearProperties(
    CFFileSecurityRef fileSec,
    int clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties(
      fileSec,
      clearPropertyMask,
    );
  }

  late final _CFFileSecurityClearPropertiesPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              CFFileSecurityClearOptions)>>('CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties = _CFFileSecurityClearPropertiesPtr
      .asFunction<int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(
          CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  int CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    int index,
  ) {
    return _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    );
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerTokenType Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    );
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerTokenType Function(
              CFStringTokenizerRef)>>('CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID() {
    return _CFFileDescriptorGetTypeID();
  }

  late final _CFFileDescriptorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID =
      _CFFileDescriptorGetTypeIDPtr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate = _CFFileDescriptorCreatePtr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptorPtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor =
      _CFFileDescriptorGetNativeDescriptorPtr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext =
      _CFFileDescriptorGetContextPtr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks =
      _CFFileDescriptorEnableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks =
      _CFFileDescriptorDisableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate(
      f,
    );
  }

  late final _CFFileDescriptorInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate = _CFFileDescriptorInvalidatePtr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid(
      f,
    );
  }

  late final _CFFileDescriptorIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid = _CFFileDescriptorIsValidPtr.asFunction<
      int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource =
      _CFFileDescriptorCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID() {
    return _CFUserNotificationGetTypeID();
  }

  late final _CFUserNotificationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID =
      _CFUserNotificationGetTypeIDPtr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreatePtr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate =
      _CFUserNotificationCreatePtr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponsePtr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse =
      _CFUserNotificationReceiveResponsePtr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue =
      _CFUserNotificationGetResponseValuePtr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionaryPtr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary =
      _CFUserNotificationGetResponseDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdatePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate =
      _CFUserNotificationUpdatePtr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel(
      userNotification,
    );
  }

  late final _CFUserNotificationCancelPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel = _CFUserNotificationCancelPtr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource =
      _CFUserNotificationCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNoticePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice =
      _CFUserNotificationDisplayNoticePtr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlertPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert =
      _CFUserNotificationDisplayAlertPtr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationIconURLKey =
      _lookup<CFStringRef>('kCFUserNotificationIconURLKey');

  CFStringRef get kCFUserNotificationIconURLKey =>
      _kCFUserNotificationIconURLKey.value;

  set kCFUserNotificationIconURLKey(CFStringRef value) =>
      _kCFUserNotificationIconURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationSoundURLKey =
      _lookup<CFStringRef>('kCFUserNotificationSoundURLKey');

  CFStringRef get kCFUserNotificationSoundURLKey =>
      _kCFUserNotificationSoundURLKey.value;

  set kCFUserNotificationSoundURLKey(CFStringRef value) =>
      _kCFUserNotificationSoundURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationLocalizationURLKey =
      _lookup<CFStringRef>('kCFUserNotificationLocalizationURLKey');

  CFStringRef get kCFUserNotificationLocalizationURLKey =>
      _kCFUserNotificationLocalizationURLKey.value;

  set kCFUserNotificationLocalizationURLKey(CFStringRef value) =>
      _kCFUserNotificationLocalizationURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertHeaderKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertHeaderKey');

  CFStringRef get kCFUserNotificationAlertHeaderKey =>
      _kCFUserNotificationAlertHeaderKey.value;

  set kCFUserNotificationAlertHeaderKey(CFStringRef value) =>
      _kCFUserNotificationAlertHeaderKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertMessageKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertMessageKey');

  CFStringRef get kCFUserNotificationAlertMessageKey =>
      _kCFUserNotificationAlertMessageKey.value;

  set kCFUserNotificationAlertMessageKey(CFStringRef value) =>
      _kCFUserNotificationAlertMessageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationDefaultButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationDefaultButtonTitleKey');

  CFStringRef get kCFUserNotificationDefaultButtonTitleKey =>
      _kCFUserNotificationDefaultButtonTitleKey.value;

  set kCFUserNotificationDefaultButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationDefaultButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationAlternateButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationAlternateButtonTitleKey');

  CFStringRef get kCFUserNotificationAlternateButtonTitleKey =>
      _kCFUserNotificationAlternateButtonTitleKey.value;

  set kCFUserNotificationAlternateButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationAlternateButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationOtherButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationOtherButtonTitleKey');

  CFStringRef get kCFUserNotificationOtherButtonTitleKey =>
      _kCFUserNotificationOtherButtonTitleKey.value;

  set kCFUserNotificationOtherButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationOtherButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationProgressIndicatorValueKey =
      _lookup<CFStringRef>('kCFUserNotificationProgressIndicatorValueKey');

  CFStringRef get kCFUserNotificationProgressIndicatorValueKey =>
      _kCFUserNotificationProgressIndicatorValueKey.value;

  set kCFUserNotificationProgressIndicatorValueKey(CFStringRef value) =>
      _kCFUserNotificationProgressIndicatorValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpTitlesKey');

  CFStringRef get kCFUserNotificationPopUpTitlesKey =>
      _kCFUserNotificationPopUpTitlesKey.value;

  set kCFUserNotificationPopUpTitlesKey(CFStringRef value) =>
      _kCFUserNotificationPopUpTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldTitlesKey');

  CFStringRef get kCFUserNotificationTextFieldTitlesKey =>
      _kCFUserNotificationTextFieldTitlesKey.value;

  set kCFUserNotificationTextFieldTitlesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationCheckBoxTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationCheckBoxTitlesKey');

  CFStringRef get kCFUserNotificationCheckBoxTitlesKey =>
      _kCFUserNotificationCheckBoxTitlesKey.value;

  set kCFUserNotificationCheckBoxTitlesKey(CFStringRef value) =>
      _kCFUserNotificationCheckBoxTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldValuesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldValuesKey');

  CFStringRef get kCFUserNotificationTextFieldValuesKey =>
      _kCFUserNotificationTextFieldValuesKey.value;

  set kCFUserNotificationTextFieldValuesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldValuesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpSelectionKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpSelectionKey');

  CFStringRef get kCFUserNotificationPopUpSelectionKey =>
      _kCFUserNotificationPopUpSelectionKey.value;

  set kCFUserNotificationPopUpSelectionKey(CFStringRef value) =>
      _kCFUserNotificationPopUpSelectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertTopMostKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertTopMostKey');

  CFStringRef get kCFUserNotificationAlertTopMostKey =>
      _kCFUserNotificationAlertTopMostKey.value;

  set kCFUserNotificationAlertTopMostKey(CFStringRef value) =>
      _kCFUserNotificationAlertTopMostKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationKeyboardTypesKey =
      _lookup<CFStringRef>('kCFUserNotificationKeyboardTypesKey');

  CFStringRef get kCFUserNotificationKeyboardTypesKey =>
      _kCFUserNotificationKeyboardTypesKey.value;

  set kCFUserNotificationKeyboardTypesKey(CFStringRef value) =>
      _kCFUserNotificationKeyboardTypesKey.value = value;

  int CFXMLNodeGetTypeID() {
    return _CFXMLNodeGetTypeID();
  }

  late final _CFXMLNodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID =
      _CFXMLNodeGetTypeIDPtr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate(
    CFAllocatorRef alloc,
    int xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    int version,
  ) {
    return _CFXMLNodeCreate(
      alloc,
      xmlType,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeTypeCode, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate = _CFXMLNodeCreatePtr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy = _CFXMLNodeCreateCopyPtr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  int CFXMLNodeGetTypeCode(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetTypeCode(
      node,
    );
  }

  late final _CFXMLNodeGetTypeCodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeTypeCode Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode =
      _CFXMLNodeGetTypeCodePtr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString(
      node,
    );
  }

  late final _CFXMLNodeGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString =
      _CFXMLNodeGetStringPtr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr = _CFXMLNodeGetInfoPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion(
      node,
    );
  }

  late final _CFXMLNodeGetVersionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion =
      _CFXMLNodeGetVersionPtr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNodePtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode = _CFXMLTreeCreateWithNodePtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode =
      _CFXMLTreeGetNodePtr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID() {
    return _CFXMLParserGetTypeID();
  }

  late final _CFXMLParserGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID =
      _CFXMLParserGetTypeIDPtr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate = _CFXMLParserCreatePtr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURLPtr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL =
      _CFXMLParserCreateWithDataFromURLPtr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext = _CFXMLParserGetContextPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks = _CFXMLParserGetCallBacksPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL = _CFXMLParserGetSourceURLPtr.asFunction<
      CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation(
      parser,
    );
  }

  late final _CFXMLParserGetLocationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation =
      _CFXMLParserGetLocationPtr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumberPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber =
      _CFXMLParserGetLineNumberPtr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument(
      parser,
    );
  }

  late final _CFXMLParserGetDocumentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument = _CFXMLParserGetDocumentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  int CFXMLParserGetStatusCode(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetStatusCode(
      parser,
    );
  }

  late final _CFXMLParserGetStatusCodePtr = _lookup<
          ffi.NativeFunction<CFXMLParserStatusCode Function(CFXMLParserRef)>>(
      'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode =
      _CFXMLParserGetStatusCodePtr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription =
      _CFXMLParserCopyErrorDescriptionPtr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort(
    CFXMLParserRef parser,
    int errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort(
      parser,
      errorCode,
      errorDescription,
    );
  }

  late final _CFXMLParserAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef, CFXMLParserStatusCode,
              CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort = _CFXMLParserAbortPtr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse(
      parser,
    );
  }

  late final _CFXMLParserParsePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse =
      _CFXMLParserParsePtr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData = _CFXMLTreeCreateFromDataPtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithErrorPtr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError =
      _CFXMLTreeCreateFromDataWithErrorPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURLPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL =
      _CFXMLTreeCreateWithDataFromURLPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLDataPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData = _CFXMLTreeCreateXMLDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities =
      _CFXMLCreateStringByEscapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities =
      _CFXMLCreateStringByUnescapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorDescription =
      _lookup<CFStringRef>('kCFXMLTreeErrorDescription');

  CFStringRef get kCFXMLTreeErrorDescription =>
      _kCFXMLTreeErrorDescription.value;

  set kCFXMLTreeErrorDescription(CFStringRef value) =>
      _kCFXMLTreeErrorDescription.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLineNumber =
      _lookup<CFStringRef>('kCFXMLTreeErrorLineNumber');

  CFStringRef get kCFXMLTreeErrorLineNumber => _kCFXMLTreeErrorLineNumber.value;

  set kCFXMLTreeErrorLineNumber(CFStringRef value) =>
      _kCFXMLTreeErrorLineNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLocation =
      _lookup<CFStringRef>('kCFXMLTreeErrorLocation');

  CFStringRef get kCFXMLTreeErrorLocation => _kCFXMLTreeErrorLocation.value;

  set kCFXMLTreeErrorLocation(CFStringRef value) =>
      _kCFXMLTreeErrorLocation.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorStatusCode =
      _lookup<CFStringRef>('kCFXMLTreeErrorStatusCode');

  CFStringRef get kCFXMLTreeErrorStatusCode => _kCFXMLTreeErrorStatusCode.value;

  set kCFXMLTreeErrorStatusCode(CFStringRef value) =>
      _kCFXMLTreeErrorStatusCode.value = value;

  int mtl_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _mtl_init(
      hashcat_ctx,
    );
  }

  late final _mtl_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'mtl_init');
  late final _mtl_init =
      _mtl_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void mtl_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _mtl_close(
      hashcat_ctx,
    );
  }

  late final _mtl_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'mtl_close');
  late final _mtl_close =
      _mtl_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hc_mtlRuntimeGetVersionString(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Char> runtimeVersion_str,
    ffi.Pointer<ffi.Size> size,
  ) {
    return _hc_mtlRuntimeGetVersionString(
      hashcat_ctx,
      runtimeVersion_str,
      size,
    );
  }

  late final _hc_mtlRuntimeGetVersionStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('hc_mtlRuntimeGetVersionString');
  late final _hc_mtlRuntimeGetVersionString =
      _hc_mtlRuntimeGetVersionStringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>();

  int hc_mtlDeviceGetCount(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _hc_mtlDeviceGetCount(
      hashcat_ctx,
      count,
    );
  }

  late final _hc_mtlDeviceGetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hc_mtlDeviceGetCount');
  late final _hc_mtlDeviceGetCount = _hc_mtlDeviceGetCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hc_mtlDeviceGet(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<id> metal_device,
    int ordinal,
  ) {
    return _hc_mtlDeviceGet(
      hashcat_ctx,
      metal_device,
      ordinal,
    );
  }

  late final _hc_mtlDeviceGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<id>,
              ffi.Int)>>('hc_mtlDeviceGet');
  late final _hc_mtlDeviceGet = _hc_mtlDeviceGetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<id>, int)>();

  int hc_mtlDeviceGetName(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Char> name,
    int len,
    id metal_device,
  ) {
    return _hc_mtlDeviceGetName(
      hashcat_ctx,
      name,
      len,
      metal_device,
    );
  }

  late final _hc_mtlDeviceGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Size, id)>>('hc_mtlDeviceGetName');
  late final _hc_mtlDeviceGetName = _hc_mtlDeviceGetNamePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int, id)>();

  int hc_mtlDeviceGetAttribute(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> pi,
    int attrib,
    id metal_device,
  ) {
    return _hc_mtlDeviceGetAttribute(
      hashcat_ctx,
      pi,
      attrib,
      metal_device,
    );
  }

  late final _hc_mtlDeviceGetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Int32, id)>>('hc_mtlDeviceGetAttribute');
  late final _hc_mtlDeviceGetAttribute =
      _hc_mtlDeviceGetAttributePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, int, id)>();

  int hc_mtlDeviceTotalMem(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> bytes,
    id metal_device,
  ) {
    return _hc_mtlDeviceTotalMem(
      hashcat_ctx,
      bytes,
      metal_device,
    );
  }

  late final _hc_mtlDeviceTotalMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              id)>>('hc_mtlDeviceTotalMem');
  late final _hc_mtlDeviceTotalMem = _hc_mtlDeviceTotalMemPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>, id)>();

  int hc_mtlDeviceMaxMemAlloc(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> bytes,
    id metal_device,
  ) {
    return _hc_mtlDeviceMaxMemAlloc(
      hashcat_ctx,
      bytes,
      metal_device,
    );
  }

  late final _hc_mtlDeviceMaxMemAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              id)>>('hc_mtlDeviceMaxMemAlloc');
  late final _hc_mtlDeviceMaxMemAlloc = _hc_mtlDeviceMaxMemAllocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>, id)>();

  int hc_mtlMemGetInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Size> mem_free,
    ffi.Pointer<ffi.Size> mem_total,
  ) {
    return _hc_mtlMemGetInfo(
      hashcat_ctx,
      mem_free,
      mem_total,
    );
  }

  late final _hc_mtlMemGetInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('hc_mtlMemGetInfo');
  late final _hc_mtlMemGetInfo = _hc_mtlMemGetInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  int hc_mtlCreateCommandQueue(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_device,
    ffi.Pointer<id> command_queue,
  ) {
    return _hc_mtlCreateCommandQueue(
      hashcat_ctx,
      metal_device,
      command_queue,
    );
  }

  late final _hc_mtlCreateCommandQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id,
              ffi.Pointer<id>)>>('hc_mtlCreateCommandQueue');
  late final _hc_mtlCreateCommandQueue = _hc_mtlCreateCommandQueuePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, id, ffi.Pointer<id>)>();

  int hc_mtlCreateBuffer(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_device,
    int size,
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<id> metal_buffer,
  ) {
    return _hc_mtlCreateBuffer(
      hashcat_ctx,
      metal_device,
      size,
      ptr,
      metal_buffer,
    );
  }

  late final _hc_mtlCreateBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<id>)>>('hc_mtlCreateBuffer');
  late final _hc_mtlCreateBuffer = _hc_mtlCreateBufferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, id, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<id>)>();

  int hc_mtlCreateKernel(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_device,
    id metal_library,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<id> metal_function,
    ffi.Pointer<id> metal_pipeline,
  ) {
    return _hc_mtlCreateKernel(
      hashcat_ctx,
      metal_device,
      metal_library,
      func_name,
      metal_function,
      metal_pipeline,
    );
  }

  late final _hc_mtlCreateKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Pointer<ffi.Char>,
              ffi.Pointer<id>, ffi.Pointer<id>)>>('hc_mtlCreateKernel');
  late final _hc_mtlCreateKernel = _hc_mtlCreateKernelPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Pointer<ffi.Char>,
          ffi.Pointer<id>, ffi.Pointer<id>)>();

  int hc_mtlGetMaxTotalThreadsPerThreadgroup(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_pipeline,
    ffi.Pointer<ffi.UnsignedInt> maxTotalThreadsPerThreadgroup,
  ) {
    return _hc_mtlGetMaxTotalThreadsPerThreadgroup(
      hashcat_ctx,
      metal_pipeline,
      maxTotalThreadsPerThreadgroup,
    );
  }

  late final _hc_mtlGetMaxTotalThreadsPerThreadgroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.UnsignedInt>)>>(
      'hc_mtlGetMaxTotalThreadsPerThreadgroup');
  late final _hc_mtlGetMaxTotalThreadsPerThreadgroup =
      _hc_mtlGetMaxTotalThreadsPerThreadgroupPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.UnsignedInt>)>();

  int hc_mtlGetThreadExecutionWidth(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_pipeline,
    ffi.Pointer<ffi.UnsignedInt> threadExecutionWidth,
  ) {
    return _hc_mtlGetThreadExecutionWidth(
      hashcat_ctx,
      metal_pipeline,
      threadExecutionWidth,
    );
  }

  late final _hc_mtlGetThreadExecutionWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id,
              ffi.Pointer<ffi.UnsignedInt>)>>('hc_mtlGetThreadExecutionWidth');
  late final _hc_mtlGetThreadExecutionWidth =
      _hc_mtlGetThreadExecutionWidthPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.UnsignedInt>)>();

  int hc_mtlMemcpyDtoD(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id command_queue,
    id buf_dst,
    int buf_dst_off,
    id buf_src,
    int buf_src_off,
    int buf_size,
  ) {
    return _hc_mtlMemcpyDtoD(
      hashcat_ctx,
      command_queue,
      buf_dst,
      buf_dst_off,
      buf_src,
      buf_src_off,
      buf_size,
    );
  }

  late final _hc_mtlMemcpyDtoDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Size, id,
              ffi.Size, ffi.Size)>>('hc_mtlMemcpyDtoD');
  late final _hc_mtlMemcpyDtoD = _hc_mtlMemcpyDtoDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, id, id, int, id, int, int)>();

  int hc_mtlMemcpyHtoD(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id command_queue,
    id buf_dst,
    int buf_dst_off,
    ffi.Pointer<ffi.Void> buf_src,
    int buf_size,
  ) {
    return _hc_mtlMemcpyHtoD(
      hashcat_ctx,
      command_queue,
      buf_dst,
      buf_dst_off,
      buf_src,
      buf_size,
    );
  }

  late final _hc_mtlMemcpyHtoDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('hc_mtlMemcpyHtoD');
  late final _hc_mtlMemcpyHtoD = _hc_mtlMemcpyHtoDPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, id, id, int, ffi.Pointer<ffi.Void>, int)>();

  int hc_mtlMemcpyDtoH(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id command_queue,
    ffi.Pointer<ffi.Void> buf_dst,
    id buf_src,
    int buf_src_off,
    int buf_size,
  ) {
    return _hc_mtlMemcpyDtoH(
      hashcat_ctx,
      command_queue,
      buf_dst,
      buf_src,
      buf_src_off,
      buf_size,
    );
  }

  late final _hc_mtlMemcpyDtoHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.Void>, id,
              ffi.Size, ffi.Size)>>('hc_mtlMemcpyDtoH');
  late final _hc_mtlMemcpyDtoH = _hc_mtlMemcpyDtoHPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.Void>, id, int, int)>();

  int hc_mtlReleaseMemObject(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_buffer,
  ) {
    return _hc_mtlReleaseMemObject(
      hashcat_ctx,
      metal_buffer,
    );
  }

  late final _hc_mtlReleaseMemObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, id)>>(
          'hc_mtlReleaseMemObject');
  late final _hc_mtlReleaseMemObject = _hc_mtlReleaseMemObjectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, id)>();

  int hc_mtlReleaseFunction(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_function,
  ) {
    return _hc_mtlReleaseFunction(
      hashcat_ctx,
      metal_function,
    );
  }

  late final _hc_mtlReleaseFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, id)>>(
          'hc_mtlReleaseFunction');
  late final _hc_mtlReleaseFunction = _hc_mtlReleaseFunctionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, id)>();

  int hc_mtlReleaseLibrary(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_library,
  ) {
    return _hc_mtlReleaseLibrary(
      hashcat_ctx,
      metal_library,
    );
  }

  late final _hc_mtlReleaseLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, id)>>(
          'hc_mtlReleaseLibrary');
  late final _hc_mtlReleaseLibrary = _hc_mtlReleaseLibraryPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, id)>();

  int hc_mtlReleaseCommandQueue(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id command_queue,
  ) {
    return _hc_mtlReleaseCommandQueue(
      hashcat_ctx,
      command_queue,
    );
  }

  late final _hc_mtlReleaseCommandQueuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, id)>>(
          'hc_mtlReleaseCommandQueue');
  late final _hc_mtlReleaseCommandQueue = _hc_mtlReleaseCommandQueuePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, id)>();

  int hc_mtlReleaseDevice(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_device,
  ) {
    return _hc_mtlReleaseDevice(
      hashcat_ctx,
      metal_device,
    );
  }

  late final _hc_mtlReleaseDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, id)>>(
          'hc_mtlReleaseDevice');
  late final _hc_mtlReleaseDevice = _hc_mtlReleaseDevicePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, id)>();

  int hc_mtlCreateLibraryWithSource(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_device,
    ffi.Pointer<ffi.Char> kernel_sources,
    ffi.Pointer<ffi.Char> build_options_buf,
    ffi.Pointer<ffi.Char> include_path,
    ffi.Pointer<id> metal_library,
  ) {
    return _hc_mtlCreateLibraryWithSource(
      hashcat_ctx,
      metal_device,
      kernel_sources,
      build_options_buf,
      include_path,
      metal_library,
    );
  }

  late final _hc_mtlCreateLibraryWithSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              id,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<id>)>>('hc_mtlCreateLibraryWithSource');
  late final _hc_mtlCreateLibraryWithSource =
      _hc_mtlCreateLibraryWithSourcePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<id>)>();

  int hc_mtlCreateLibraryWithFile(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_device,
    ffi.Pointer<ffi.Char> cached_file,
    ffi.Pointer<id> metal_library,
  ) {
    return _hc_mtlCreateLibraryWithFile(
      hashcat_ctx,
      metal_device,
      cached_file,
      metal_library,
    );
  }

  late final _hc_mtlCreateLibraryWithFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.Char>,
              ffi.Pointer<id>)>>('hc_mtlCreateLibraryWithFile');
  late final _hc_mtlCreateLibraryWithFile =
      _hc_mtlCreateLibraryWithFilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, id, ffi.Pointer<ffi.Char>,
              ffi.Pointer<id>)>();

  int hc_mtlEncodeComputeCommand_pre(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_pipeline,
    id metal_command_queue,
    ffi.Pointer<id> metal_command_buffer,
    ffi.Pointer<id> metal_command_encoder,
  ) {
    return _hc_mtlEncodeComputeCommand_pre(
      hashcat_ctx,
      metal_pipeline,
      metal_command_queue,
      metal_command_buffer,
      metal_command_encoder,
    );
  }

  late final _hc_mtlEncodeComputeCommand_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Pointer<id>,
              ffi.Pointer<id>)>>('hc_mtlEncodeComputeCommand_pre');
  late final _hc_mtlEncodeComputeCommand_pre =
      _hc_mtlEncodeComputeCommand_prePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Pointer<id>,
              ffi.Pointer<id>)>();

  int hc_mtlSetCommandEncoderArg(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_command_encoder,
    int off,
    int idx,
    id buf,
    ffi.Pointer<ffi.Void> host_data,
    int host_data_size,
  ) {
    return _hc_mtlSetCommandEncoderArg(
      hashcat_ctx,
      metal_command_encoder,
      off,
      idx,
      buf,
      host_data,
      host_data_size,
    );
  }

  late final _hc_mtlSetCommandEncoderArgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, ffi.Size, ffi.Size, id,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('hc_mtlSetCommandEncoderArg');
  late final _hc_mtlSetCommandEncoderArg =
      _hc_mtlSetCommandEncoderArgPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, id, int, int, id,
              ffi.Pointer<ffi.Void>, int)>();

  int hc_mtlEncodeComputeCommand(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    id metal_command_encoder,
    id metal_command_buffer,
    int global_work_size,
    int local_work_size,
    ffi.Pointer<ffi.Double> ms,
  ) {
    return _hc_mtlEncodeComputeCommand(
      hashcat_ctx,
      metal_command_encoder,
      metal_command_buffer,
      global_work_size,
      local_work_size,
      ms,
    );
  }

  late final _hc_mtlEncodeComputeCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, id, id, ffi.Size, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('hc_mtlEncodeComputeCommand');
  late final _hc_mtlEncodeComputeCommand =
      _hc_mtlEncodeComputeCommandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, id, id, int, int,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<ffi.Void> ADL_Main_Memory_Alloc(
    int iSize,
  ) {
    return _ADL_Main_Memory_Alloc(
      iSize,
    );
  }

  late final _ADL_Main_Memory_AllocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'ADL_Main_Memory_Alloc');
  late final _ADL_Main_Memory_Alloc = _ADL_Main_Memory_AllocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  int adl_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _adl_init(
      hashcat_ctx,
    );
  }

  late final _adl_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'adl_init');
  late final _adl_init =
      _adl_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void adl_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _adl_close(
      hashcat_ctx,
    );
  }

  late final _adl_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'adl_close');
  late final _adl_close =
      _adl_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hm_ADL_Main_Control_Destroy(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hm_ADL_Main_Control_Destroy(
      hashcat_ctx,
    );
  }

  late final _hm_ADL_Main_Control_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hm_ADL_Main_Control_Destroy');
  late final _hm_ADL_Main_Control_Destroy = _hm_ADL_Main_Control_DestroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hm_ADL_Main_Control_Create(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ADL_MAIN_MALLOC_CALLBACK callback,
    int iEnumConnectedAdapters,
  ) {
    return _hm_ADL_Main_Control_Create(
      hashcat_ctx,
      callback,
      iEnumConnectedAdapters,
    );
  }

  late final _hm_ADL_Main_Control_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ADL_MAIN_MALLOC_CALLBACK,
              ffi.Int)>>('hm_ADL_Main_Control_Create');
  late final _hm_ADL_Main_Control_Create =
      _hm_ADL_Main_Control_CreatePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ADL_MAIN_MALLOC_CALLBACK, int)>();

  int hm_ADL_Adapter_NumberOfAdapters_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> lpNumAdapters,
  ) {
    return _hm_ADL_Adapter_NumberOfAdapters_Get(
      hashcat_ctx,
      lpNumAdapters,
    );
  }

  late final _hm_ADL_Adapter_NumberOfAdapters_GetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hm_ADL_Adapter_NumberOfAdapters_Get');
  late final _hm_ADL_Adapter_NumberOfAdapters_Get =
      _hm_ADL_Adapter_NumberOfAdapters_GetPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int hm_ADL_Adapter_AdapterInfo_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    LPAdapterInfo lpInfo,
    int iInputSize,
  ) {
    return _hm_ADL_Adapter_AdapterInfo_Get(
      hashcat_ctx,
      lpInfo,
      iInputSize,
    );
  }

  late final _hm_ADL_Adapter_AdapterInfo_GetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, LPAdapterInfo,
              ffi.Int)>>('hm_ADL_Adapter_AdapterInfo_Get');
  late final _hm_ADL_Adapter_AdapterInfo_Get =
      _hm_ADL_Adapter_AdapterInfo_GetPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, LPAdapterInfo, int)>();

  int hm_ADL_Overdrive5_Temperature_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    int iThermalControllerIndex,
    ffi.Pointer<ADLTemperature> lpTemperature,
  ) {
    return _hm_ADL_Overdrive5_Temperature_Get(
      hashcat_ctx,
      iAdapterIndex,
      iThermalControllerIndex,
      lpTemperature,
    );
  }

  late final _hm_ADL_Overdrive5_Temperature_GetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
                  ffi.Pointer<ADLTemperature>)>>(
      'hm_ADL_Overdrive5_Temperature_Get');
  late final _hm_ADL_Overdrive5_Temperature_Get =
      _hm_ADL_Overdrive5_Temperature_GetPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ADLTemperature>)>();

  int hm_ADL_Overdrive6_Temperature_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    ffi.Pointer<ffi.Int> iTemperature,
  ) {
    return _hm_ADL_Overdrive6_Temperature_Get(
      hashcat_ctx,
      iAdapterIndex,
      iTemperature,
    );
  }

  late final _hm_ADL_Overdrive6_Temperature_GetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('hm_ADL_Overdrive6_Temperature_Get');
  late final _hm_ADL_Overdrive6_Temperature_Get =
      _hm_ADL_Overdrive6_Temperature_GetPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  int hm_ADL_Overdrive_CurrentActivity_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    ffi.Pointer<ADLPMActivity> lpActivity,
  ) {
    return _hm_ADL_Overdrive_CurrentActivity_Get(
      hashcat_ctx,
      iAdapterIndex,
      lpActivity,
    );
  }

  late final _hm_ADL_Overdrive_CurrentActivity_GetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ADLPMActivity>)>>(
      'hm_ADL_Overdrive_CurrentActivity_Get');
  late final _hm_ADL_Overdrive_CurrentActivity_Get =
      _hm_ADL_Overdrive_CurrentActivity_GetPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ADLPMActivity>)>();

  int hm_ADL_Overdrive5_FanSpeed_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    int iThermalControllerIndex,
    ffi.Pointer<ADLFanSpeedValue> lpFanSpeedValue,
  ) {
    return _hm_ADL_Overdrive5_FanSpeed_Get(
      hashcat_ctx,
      iAdapterIndex,
      iThermalControllerIndex,
      lpFanSpeedValue,
    );
  }

  late final _hm_ADL_Overdrive5_FanSpeed_GetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
                  ffi.Pointer<ADLFanSpeedValue>)>>(
      'hm_ADL_Overdrive5_FanSpeed_Get');
  late final _hm_ADL_Overdrive5_FanSpeed_Get =
      _hm_ADL_Overdrive5_FanSpeed_GetPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, int,
              ffi.Pointer<ADLFanSpeedValue>)>();

  int hm_ADL_Overdrive6_FanSpeed_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    ffi.Pointer<ADLOD6FanSpeedInfo> lpFanSpeedInfo,
  ) {
    return _hm_ADL_Overdrive6_FanSpeed_Get(
      hashcat_ctx,
      iAdapterIndex,
      lpFanSpeedInfo,
    );
  }

  late final _hm_ADL_Overdrive6_FanSpeed_GetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                  ffi.Pointer<ADLOD6FanSpeedInfo>)>>(
      'hm_ADL_Overdrive6_FanSpeed_Get');
  late final _hm_ADL_Overdrive6_FanSpeed_Get =
      _hm_ADL_Overdrive6_FanSpeed_GetPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ADLOD6FanSpeedInfo>)>();

  int hm_ADL_Overdrive_Caps(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    ffi.Pointer<ffi.Int> od_supported,
    ffi.Pointer<ffi.Int> od_enabled,
    ffi.Pointer<ffi.Int> od_version,
  ) {
    return _hm_ADL_Overdrive_Caps(
      hashcat_ctx,
      iAdapterIndex,
      od_supported,
      od_enabled,
      od_version,
    );
  }

  late final _hm_ADL_Overdrive_CapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('hm_ADL_Overdrive_Caps');
  late final _hm_ADL_Overdrive_Caps = _hm_ADL_Overdrive_CapsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int hm_ADL2_Overdrive_Caps(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    ffi.Pointer<ffi.Int> od_supported,
    ffi.Pointer<ffi.Int> od_enabled,
    ffi.Pointer<ffi.Int> od_version,
  ) {
    return _hm_ADL2_Overdrive_Caps(
      hashcat_ctx,
      iAdapterIndex,
      od_supported,
      od_enabled,
      od_version,
    );
  }

  late final _hm_ADL2_Overdrive_CapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('hm_ADL2_Overdrive_Caps');
  late final _hm_ADL2_Overdrive_Caps = _hm_ADL2_Overdrive_CapsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int hm_ADL2_New_QueryPMLogData_Get(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int iAdapterIndex,
    ffi.Pointer<ADLPMLogDataOutput> lpDataOutput,
  ) {
    return _hm_ADL2_New_QueryPMLogData_Get(
      hashcat_ctx,
      iAdapterIndex,
      lpDataOutput,
    );
  }

  late final _hm_ADL2_New_QueryPMLogData_GetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                  ffi.Pointer<ADLPMLogDataOutput>)>>(
      'hm_ADL2_New_QueryPMLogData_Get');
  late final _hm_ADL2_New_QueryPMLogData_Get =
      _hm_ADL2_New_QueryPMLogData_GetPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ADLPMLogDataOutput>)>();

  int NvAPI_QueryInterface(
    int offset,
  ) {
    return _NvAPI_QueryInterface(
      offset,
    );
  }

  late final _NvAPI_QueryInterfacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.UnsignedInt)>>(
          'NvAPI_QueryInterface');
  late final _NvAPI_QueryInterface =
      _NvAPI_QueryInterfacePtr.asFunction<int Function(int)>();

  int NvAPI_Initialize() {
    return _NvAPI_Initialize();
  }

  late final _NvAPI_InitializePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('NvAPI_Initialize');
  late final _NvAPI_Initialize =
      _NvAPI_InitializePtr.asFunction<int Function()>();

  int NvAPI_Unload() {
    return _NvAPI_Unload();
  }

  late final _NvAPI_UnloadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('NvAPI_Unload');
  late final _NvAPI_Unload = _NvAPI_UnloadPtr.asFunction<int Function()>();

  int NvAPI_GetErrorMessage(
    int nr,
    ffi.Pointer<ffi.Char> szDesc,
  ) {
    return _NvAPI_GetErrorMessage(
      nr,
      szDesc,
    );
  }

  late final _NvAPI_GetErrorMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('NvAPI_GetErrorMessage');
  late final _NvAPI_GetErrorMessage = _NvAPI_GetErrorMessagePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  int NvAPI_EnumPhysicalGPUs(
    ffi.Pointer<NvPhysicalGpuHandle> nvGPUHandle,
    ffi.Pointer<NvU32> pGpuCount,
  ) {
    return _NvAPI_EnumPhysicalGPUs(
      nvGPUHandle,
      pGpuCount,
    );
  }

  late final _NvAPI_EnumPhysicalGPUsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<NvPhysicalGpuHandle>,
              ffi.Pointer<NvU32>)>>('NvAPI_EnumPhysicalGPUs');
  late final _NvAPI_EnumPhysicalGPUs = _NvAPI_EnumPhysicalGPUsPtr.asFunction<
      int Function(ffi.Pointer<NvPhysicalGpuHandle>, ffi.Pointer<NvU32>)>();

  int NvAPI_GPU_GetPerfPoliciesInfo(
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1> perfPolicies_info,
  ) {
    return _NvAPI_GPU_GetPerfPoliciesInfo(
      hPhysicalGpu,
      perfPolicies_info,
    );
  }

  late final _NvAPI_GPU_GetPerfPoliciesInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(NvPhysicalGpuHandle,
                  ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1>)>>(
      'NvAPI_GPU_GetPerfPoliciesInfo');
  late final _NvAPI_GPU_GetPerfPoliciesInfo =
      _NvAPI_GPU_GetPerfPoliciesInfoPtr.asFunction<
          int Function(NvPhysicalGpuHandle,
              ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1>)>();

  int NvAPI_GPU_GetPerfPoliciesStatus(
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1> perfPolicies_status,
  ) {
    return _NvAPI_GPU_GetPerfPoliciesStatus(
      hPhysicalGpu,
      perfPolicies_status,
    );
  }

  late final _NvAPI_GPU_GetPerfPoliciesStatusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(NvPhysicalGpuHandle,
                  ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1>)>>(
      'NvAPI_GPU_GetPerfPoliciesStatus');
  late final _NvAPI_GPU_GetPerfPoliciesStatus =
      _NvAPI_GPU_GetPerfPoliciesStatusPtr.asFunction<
          int Function(NvPhysicalGpuHandle,
              ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1>)>();

  int NvAPI_GPU_GetBusId(
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NvU32> pBusId,
  ) {
    return _NvAPI_GPU_GetBusId(
      hPhysicalGpu,
      pBusId,
    );
  }

  late final _NvAPI_GPU_GetBusIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              NvPhysicalGpuHandle, ffi.Pointer<NvU32>)>>('NvAPI_GPU_GetBusId');
  late final _NvAPI_GPU_GetBusId = _NvAPI_GPU_GetBusIdPtr.asFunction<
      int Function(NvPhysicalGpuHandle, ffi.Pointer<NvU32>)>();

  int NvAPI_GPU_GetBusSlotId(
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NvU32> pBusSlotId,
  ) {
    return _NvAPI_GPU_GetBusSlotId(
      hPhysicalGpu,
      pBusSlotId,
    );
  }

  late final _NvAPI_GPU_GetBusSlotIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(NvPhysicalGpuHandle,
              ffi.Pointer<NvU32>)>>('NvAPI_GPU_GetBusSlotId');
  late final _NvAPI_GPU_GetBusSlotId = _NvAPI_GPU_GetBusSlotIdPtr.asFunction<
      int Function(NvPhysicalGpuHandle, ffi.Pointer<NvU32>)>();

  int nvapi_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _nvapi_init(
      hashcat_ctx,
    );
  }

  late final _nvapi_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'nvapi_init');
  late final _nvapi_init =
      _nvapi_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void nvapi_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _nvapi_close(
      hashcat_ctx,
    );
  }

  late final _nvapi_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nvapi_close');
  late final _nvapi_close =
      _nvapi_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void hm_NvAPI_GetErrorMessage(
    ffi.Pointer<NVAPI_PTR> nvapi,
    int NvAPI_rc,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _hm_NvAPI_GetErrorMessage(
      nvapi,
      NvAPI_rc,
      string,
    );
  }

  late final _hm_NvAPI_GetErrorMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NVAPI_PTR>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('hm_NvAPI_GetErrorMessage');
  late final _hm_NvAPI_GetErrorMessage =
      _hm_NvAPI_GetErrorMessagePtr.asFunction<
          void Function(ffi.Pointer<NVAPI_PTR>, int, ffi.Pointer<ffi.Char>)>();

  int hm_NvAPI_Initialize(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hm_NvAPI_Initialize(
      hashcat_ctx,
    );
  }

  late final _hm_NvAPI_InitializePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hm_NvAPI_Initialize');
  late final _hm_NvAPI_Initialize =
      _hm_NvAPI_InitializePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hm_NvAPI_Unload(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hm_NvAPI_Unload(
      hashcat_ctx,
    );
  }

  late final _hm_NvAPI_UnloadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hm_NvAPI_Unload');
  late final _hm_NvAPI_Unload =
      _hm_NvAPI_UnloadPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hm_NvAPI_EnumPhysicalGPUs(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<NvPhysicalGpuHandle> nvGPUHandle,
    ffi.Pointer<NvU32> pGpuCount,
  ) {
    return _hm_NvAPI_EnumPhysicalGPUs(
      hashcat_ctx,
      nvGPUHandle,
      pGpuCount,
    );
  }

  late final _hm_NvAPI_EnumPhysicalGPUsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<NvPhysicalGpuHandle>,
              ffi.Pointer<NvU32>)>>('hm_NvAPI_EnumPhysicalGPUs');
  late final _hm_NvAPI_EnumPhysicalGPUs =
      _hm_NvAPI_EnumPhysicalGPUsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<NvPhysicalGpuHandle>,
              ffi.Pointer<NvU32>)>();

  int hm_NvAPI_GPU_GetPerfPoliciesInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1> perfPolicies_info,
  ) {
    return _hm_NvAPI_GPU_GetPerfPoliciesInfo(
      hashcat_ctx,
      hPhysicalGpu,
      perfPolicies_info,
    );
  }

  late final _hm_NvAPI_GPU_GetPerfPoliciesInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
                  ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1>)>>(
      'hm_NvAPI_GPU_GetPerfPoliciesInfo');
  late final _hm_NvAPI_GPU_GetPerfPoliciesInfo =
      _hm_NvAPI_GPU_GetPerfPoliciesInfoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
              ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1>)>();

  int hm_NvAPI_GPU_GetPerfPoliciesStatus(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1> perfPolicies_status,
  ) {
    return _hm_NvAPI_GPU_GetPerfPoliciesStatus(
      hashcat_ctx,
      hPhysicalGpu,
      perfPolicies_status,
    );
  }

  late final _hm_NvAPI_GPU_GetPerfPoliciesStatusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
                  ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1>)>>(
      'hm_NvAPI_GPU_GetPerfPoliciesStatus');
  late final _hm_NvAPI_GPU_GetPerfPoliciesStatus =
      _hm_NvAPI_GPU_GetPerfPoliciesStatusPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
              ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1>)>();

  int hm_NvAPI_GPU_GetBusId(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NvU32> pBusId,
  ) {
    return _hm_NvAPI_GPU_GetBusId(
      hashcat_ctx,
      hPhysicalGpu,
      pBusId,
    );
  }

  late final _hm_NvAPI_GPU_GetBusIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
              ffi.Pointer<NvU32>)>>('hm_NvAPI_GPU_GetBusId');
  late final _hm_NvAPI_GPU_GetBusId = _hm_NvAPI_GPU_GetBusIdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle, ffi.Pointer<NvU32>)>();

  int hm_NvAPI_GPU_GetBusSlotId(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    NvPhysicalGpuHandle hPhysicalGpu,
    ffi.Pointer<NvU32> pBusSlotId,
  ) {
    return _hm_NvAPI_GPU_GetBusSlotId(
      hashcat_ctx,
      hPhysicalGpu,
      pBusSlotId,
    );
  }

  late final _hm_NvAPI_GPU_GetBusSlotIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
              ffi.Pointer<NvU32>)>>('hm_NvAPI_GPU_GetBusSlotId');
  late final _hm_NvAPI_GPU_GetBusSlotId =
      _hm_NvAPI_GPU_GetBusSlotIdPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, NvPhysicalGpuHandle,
              ffi.Pointer<NvU32>)>();

  int nvml_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _nvml_init(
      hashcat_ctx,
    );
  }

  late final _nvml_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'nvml_init');
  late final _nvml_init =
      _nvml_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void nvml_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _nvml_close(
      hashcat_ctx,
    );
  }

  late final _nvml_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nvml_close');
  late final _nvml_close =
      _nvml_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> hm_NVML_nvmlErrorString(
    ffi.Pointer<NVML_PTR> nvml,
    int nvml_rc,
  ) {
    return _hm_NVML_nvmlErrorString(
      nvml,
      nvml_rc,
    );
  }

  late final _hm_NVML_nvmlErrorStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<NVML_PTR>, ffi.Int32)>>('hm_NVML_nvmlErrorString');
  late final _hm_NVML_nvmlErrorString = _hm_NVML_nvmlErrorStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<NVML_PTR>, int)>();

  int hm_NVML_nvmlInit(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hm_NVML_nvmlInit(
      hashcat_ctx,
    );
  }

  late final _hm_NVML_nvmlInitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hm_NVML_nvmlInit');
  late final _hm_NVML_nvmlInit =
      _hm_NVML_nvmlInitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hm_NVML_nvmlShutdown(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hm_NVML_nvmlShutdown(
      hashcat_ctx,
    );
  }

  late final _hm_NVML_nvmlShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hm_NVML_nvmlShutdown');
  late final _hm_NVML_nvmlShutdown = _hm_NVML_nvmlShutdownPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hm_NVML_nvmlDeviceGetCount(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.UnsignedInt> deviceCount,
  ) {
    return _hm_NVML_nvmlDeviceGetCount(
      hashcat_ctx,
      deviceCount,
    );
  }

  late final _hm_NVML_nvmlDeviceGetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>)>>('hm_NVML_nvmlDeviceGetCount');
  late final _hm_NVML_nvmlDeviceGetCount =
      _hm_NVML_nvmlDeviceGetCountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UnsignedInt>)>();

  int hm_NVML_nvmlDeviceGetHandleByIndex(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int device_index,
    ffi.Pointer<nvmlDevice_t> device,
  ) {
    return _hm_NVML_nvmlDeviceGetHandleByIndex(
      hashcat_ctx,
      device_index,
      device,
    );
  }

  late final _hm_NVML_nvmlDeviceGetHandleByIndexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                  ffi.Pointer<nvmlDevice_t>)>>(
      'hm_NVML_nvmlDeviceGetHandleByIndex');
  late final _hm_NVML_nvmlDeviceGetHandleByIndex =
      _hm_NVML_nvmlDeviceGetHandleByIndexPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<nvmlDevice_t>)>();

  int hm_NVML_nvmlDeviceGetTemperature(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    int sensorType,
    ffi.Pointer<ffi.UnsignedInt> temp,
  ) {
    return _hm_NVML_nvmlDeviceGetTemperature(
      hashcat_ctx,
      device,
      sensorType,
      temp,
    );
  }

  late final _hm_NVML_nvmlDeviceGetTemperaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t, ffi.Int32,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'hm_NVML_nvmlDeviceGetTemperature');
  late final _hm_NVML_nvmlDeviceGetTemperature =
      _hm_NVML_nvmlDeviceGetTemperaturePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t, int,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int hm_NVML_nvmlDeviceGetFanSpeed(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    ffi.Pointer<ffi.UnsignedInt> speed,
  ) {
    return _hm_NVML_nvmlDeviceGetFanSpeed(
      hashcat_ctx,
      device,
      speed,
    );
  }

  late final _hm_NVML_nvmlDeviceGetFanSpeedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
              ffi.Pointer<ffi.UnsignedInt>)>>('hm_NVML_nvmlDeviceGetFanSpeed');
  late final _hm_NVML_nvmlDeviceGetFanSpeed =
      _hm_NVML_nvmlDeviceGetFanSpeedPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int hm_NVML_nvmlDeviceGetUtilizationRates(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    ffi.Pointer<nvmlUtilization_t> utilization,
  ) {
    return _hm_NVML_nvmlDeviceGetUtilizationRates(
      hashcat_ctx,
      device,
      utilization,
    );
  }

  late final _hm_NVML_nvmlDeviceGetUtilizationRatesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
                  ffi.Pointer<nvmlUtilization_t>)>>(
      'hm_NVML_nvmlDeviceGetUtilizationRates');
  late final _hm_NVML_nvmlDeviceGetUtilizationRates =
      _hm_NVML_nvmlDeviceGetUtilizationRatesPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
              ffi.Pointer<nvmlUtilization_t>)>();

  int hm_NVML_nvmlDeviceGetClockInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    int type,
    ffi.Pointer<ffi.UnsignedInt> clockfreq,
  ) {
    return _hm_NVML_nvmlDeviceGetClockInfo(
      hashcat_ctx,
      device,
      type,
      clockfreq,
    );
  }

  late final _hm_NVML_nvmlDeviceGetClockInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t, ffi.Int32,
              ffi.Pointer<ffi.UnsignedInt>)>>('hm_NVML_nvmlDeviceGetClockInfo');
  late final _hm_NVML_nvmlDeviceGetClockInfo =
      _hm_NVML_nvmlDeviceGetClockInfoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t, int,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int hm_NVML_nvmlDeviceGetTemperatureThreshold(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    int thresholdType,
    ffi.Pointer<ffi.UnsignedInt> temp,
  ) {
    return _hm_NVML_nvmlDeviceGetTemperatureThreshold(
      hashcat_ctx,
      device,
      thresholdType,
      temp,
    );
  }

  late final _hm_NVML_nvmlDeviceGetTemperatureThresholdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t, ffi.Int32,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'hm_NVML_nvmlDeviceGetTemperatureThreshold');
  late final _hm_NVML_nvmlDeviceGetTemperatureThreshold =
      _hm_NVML_nvmlDeviceGetTemperatureThresholdPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t, int,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int hm_NVML_nvmlDeviceGetCurrPcieLinkWidth(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    ffi.Pointer<ffi.UnsignedInt> currLinkWidth,
  ) {
    return _hm_NVML_nvmlDeviceGetCurrPcieLinkWidth(
      hashcat_ctx,
      device,
      currLinkWidth,
    );
  }

  late final _hm_NVML_nvmlDeviceGetCurrPcieLinkWidthPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'hm_NVML_nvmlDeviceGetCurrPcieLinkWidth');
  late final _hm_NVML_nvmlDeviceGetCurrPcieLinkWidth =
      _hm_NVML_nvmlDeviceGetCurrPcieLinkWidthPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int hm_NVML_nvmlDeviceGetPciInfo(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    nvmlDevice_t device,
    ffi.Pointer<nvmlPciInfo_t> pci,
  ) {
    return _hm_NVML_nvmlDeviceGetPciInfo(
      hashcat_ctx,
      device,
      pci,
    );
  }

  late final _hm_NVML_nvmlDeviceGetPciInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
              ffi.Pointer<nvmlPciInfo_t>)>>('hm_NVML_nvmlDeviceGetPciInfo');
  late final _hm_NVML_nvmlDeviceGetPciInfo =
      _hm_NVML_nvmlDeviceGetPciInfoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, nvmlDevice_t,
              ffi.Pointer<nvmlPciInfo_t>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _SYS_BUS_PCI_DEVICES =
      _lookup<ffi.Pointer<ffi.Char>>('SYS_BUS_PCI_DEVICES');

  ffi.Pointer<ffi.Char> get SYS_BUS_PCI_DEVICES => _SYS_BUS_PCI_DEVICES.value;

  set SYS_BUS_PCI_DEVICES(ffi.Pointer<ffi.Char> value) =>
      _SYS_BUS_PCI_DEVICES.value = value;

  bool sysfs_amdgpu_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _sysfs_amdgpu_init(
      hashcat_ctx,
    );
  }

  late final _sysfs_amdgpu_initPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'sysfs_amdgpu_init');
  late final _sysfs_amdgpu_init =
      _sysfs_amdgpu_initPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  void sysfs_amdgpu_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _sysfs_amdgpu_close(
      hashcat_ctx,
    );
  }

  late final _sysfs_amdgpu_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sysfs_amdgpu_close');
  late final _sysfs_amdgpu_close =
      _sysfs_amdgpu_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> hm_SYSFS_AMDGPU_get_syspath_device(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
  ) {
    return _hm_SYSFS_AMDGPU_get_syspath_device(
      hashcat_ctx,
      backend_device_idx,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_syspath_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('hm_SYSFS_AMDGPU_get_syspath_device');
  late final _hm_SYSFS_AMDGPU_get_syspath_device =
      _hm_SYSFS_AMDGPU_get_syspath_devicePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> hm_SYSFS_AMDGPU_get_syspath_hwmon(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
  ) {
    return _hm_SYSFS_AMDGPU_get_syspath_hwmon(
      hashcat_ctx,
      backend_device_idx,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_syspath_hwmonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('hm_SYSFS_AMDGPU_get_syspath_hwmon');
  late final _hm_SYSFS_AMDGPU_get_syspath_hwmon =
      _hm_SYSFS_AMDGPU_get_syspath_hwmonPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, int)>();

  int hm_SYSFS_AMDGPU_get_fan_speed_current(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_AMDGPU_get_fan_speed_current(
      hashcat_ctx,
      backend_device_idx,
      val,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_fan_speed_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_AMDGPU_get_fan_speed_current');
  late final _hm_SYSFS_AMDGPU_get_fan_speed_current =
      _hm_SYSFS_AMDGPU_get_fan_speed_currentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  int hm_SYSFS_AMDGPU_get_temperature_current(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_AMDGPU_get_temperature_current(
      hashcat_ctx,
      backend_device_idx,
      val,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_temperature_currentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'hm_SYSFS_AMDGPU_get_temperature_current');
  late final _hm_SYSFS_AMDGPU_get_temperature_current =
      _hm_SYSFS_AMDGPU_get_temperature_currentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  int hm_SYSFS_AMDGPU_get_pp_dpm_sclk(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_AMDGPU_get_pp_dpm_sclk(
      hashcat_ctx,
      backend_device_idx,
      val,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_pp_dpm_sclkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_AMDGPU_get_pp_dpm_sclk');
  late final _hm_SYSFS_AMDGPU_get_pp_dpm_sclk =
      _hm_SYSFS_AMDGPU_get_pp_dpm_sclkPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  int hm_SYSFS_AMDGPU_get_pp_dpm_mclk(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_AMDGPU_get_pp_dpm_mclk(
      hashcat_ctx,
      backend_device_idx,
      val,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_pp_dpm_mclkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_AMDGPU_get_pp_dpm_mclk');
  late final _hm_SYSFS_AMDGPU_get_pp_dpm_mclk =
      _hm_SYSFS_AMDGPU_get_pp_dpm_mclkPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  int hm_SYSFS_AMDGPU_get_pp_dpm_pcie(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_AMDGPU_get_pp_dpm_pcie(
      hashcat_ctx,
      backend_device_idx,
      val,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_pp_dpm_pciePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_AMDGPU_get_pp_dpm_pcie');
  late final _hm_SYSFS_AMDGPU_get_pp_dpm_pcie =
      _hm_SYSFS_AMDGPU_get_pp_dpm_pciePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  int hm_SYSFS_AMDGPU_get_gpu_busy_percent(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    int backend_device_idx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_AMDGPU_get_gpu_busy_percent(
      hashcat_ctx,
      backend_device_idx,
      val,
    );
  }

  late final _hm_SYSFS_AMDGPU_get_gpu_busy_percentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_AMDGPU_get_gpu_busy_percent');
  late final _hm_SYSFS_AMDGPU_get_gpu_busy_percent =
      _hm_SYSFS_AMDGPU_get_gpu_busy_percentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _SYSFS_HWMON =
      _lookup<ffi.Pointer<ffi.Char>>('SYSFS_HWMON');

  ffi.Pointer<ffi.Char> get SYSFS_HWMON => _SYSFS_HWMON.value;

  set SYSFS_HWMON(ffi.Pointer<ffi.Char> value) => _SYSFS_HWMON.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _SENSOR_CORETEMP =
      _lookup<ffi.Pointer<ffi.Char>>('SENSOR_CORETEMP');

  ffi.Pointer<ffi.Char> get SENSOR_CORETEMP => _SENSOR_CORETEMP.value;

  set SENSOR_CORETEMP(ffi.Pointer<ffi.Char> value) =>
      _SENSOR_CORETEMP.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _SENSOR_K10TEMP =
      _lookup<ffi.Pointer<ffi.Char>>('SENSOR_K10TEMP');

  ffi.Pointer<ffi.Char> get SENSOR_K10TEMP => _SENSOR_K10TEMP.value;

  set SENSOR_K10TEMP(ffi.Pointer<ffi.Char> value) =>
      _SENSOR_K10TEMP.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _SENSOR_K8TEMP =
      _lookup<ffi.Pointer<ffi.Char>>('SENSOR_K8TEMP');

  ffi.Pointer<ffi.Char> get SENSOR_K8TEMP => _SENSOR_K8TEMP.value;

  set SENSOR_K8TEMP(ffi.Pointer<ffi.Char> value) =>
      _SENSOR_K8TEMP.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _SENSOR_ACPITZ =
      _lookup<ffi.Pointer<ffi.Char>>('SENSOR_ACPITZ');

  ffi.Pointer<ffi.Char> get SENSOR_ACPITZ => _SENSOR_ACPITZ.value;

  set SENSOR_ACPITZ(ffi.Pointer<ffi.Char> value) =>
      _SENSOR_ACPITZ.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _PROC_STAT =
      _lookup<ffi.Pointer<ffi.Char>>('PROC_STAT');

  ffi.Pointer<ffi.Char> get PROC_STAT => _PROC_STAT.value;

  set PROC_STAT(ffi.Pointer<ffi.Char> value) => _PROC_STAT.value = value;

  bool sysfs_cpu_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _sysfs_cpu_init(
      hashcat_ctx,
    );
  }

  late final _sysfs_cpu_initPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'sysfs_cpu_init');
  late final _sysfs_cpu_init =
      _sysfs_cpu_initPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  void sysfs_cpu_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _sysfs_cpu_close(
      hashcat_ctx,
    );
  }

  late final _sysfs_cpu_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sysfs_cpu_close');
  late final _sysfs_cpu_close =
      _sysfs_cpu_closePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> hm_SYSFS_CPU_get_syspath_hwmon() {
    return _hm_SYSFS_CPU_get_syspath_hwmon();
  }

  late final _hm_SYSFS_CPU_get_syspath_hwmonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'hm_SYSFS_CPU_get_syspath_hwmon');
  late final _hm_SYSFS_CPU_get_syspath_hwmon =
      _hm_SYSFS_CPU_get_syspath_hwmonPtr
          .asFunction<ffi.Pointer<ffi.Char> Function()>();

  int hm_SYSFS_CPU_get_temperature_current(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_CPU_get_temperature_current(
      hashcat_ctx,
      val,
    );
  }

  late final _hm_SYSFS_CPU_get_temperature_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_CPU_get_temperature_current');
  late final _hm_SYSFS_CPU_get_temperature_current =
      _hm_SYSFS_CPU_get_temperature_currentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  bool read_proc_stat(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<proc_stat_t> proc_stat,
  ) {
    return _read_proc_stat(
      hashcat_ctx,
      proc_stat,
    );
  }

  late final _read_proc_statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<proc_stat_t>)>>('read_proc_stat');
  late final _read_proc_stat = _read_proc_statPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<proc_stat_t>)>();

  int hm_SYSFS_CPU_get_utilization_current(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _hm_SYSFS_CPU_get_utilization_current(
      hashcat_ctx,
      val,
    );
  }

  late final _hm_SYSFS_CPU_get_utilization_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hm_SYSFS_CPU_get_utilization_current');
  late final _hm_SYSFS_CPU_get_utilization_current =
      _hm_SYSFS_CPU_get_utilization_currentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int vm_stats(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<ffi.UnsignedInt> count,
  ) {
    return _vm_stats(
      info,
      count,
    );
  }

  late final _vm_statsPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>)>>('vm_stats');
  late final _vm_stats = _vm_statsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UnsignedInt>)>();

  late final ffi.Pointer<vm_size_t> _vm_page_size =
      _lookup<vm_size_t>('vm_page_size');

  int get vm_page_size => _vm_page_size.value;

  set vm_page_size(int value) => _vm_page_size.value = value;

  late final ffi.Pointer<vm_size_t> _vm_page_mask =
      _lookup<vm_size_t>('vm_page_mask');

  int get vm_page_mask => _vm_page_mask.value;

  set vm_page_mask(int value) => _vm_page_mask.value = value;

  late final ffi.Pointer<ffi.Int> _vm_page_shift =
      _lookup<ffi.Int>('vm_page_shift');

  int get vm_page_shift => _vm_page_shift.value;

  set vm_page_shift(int value) => _vm_page_shift.value = value;

  late final ffi.Pointer<vm_size_t> _vm_kernel_page_size =
      _lookup<vm_size_t>('vm_kernel_page_size');

  int get vm_kernel_page_size => _vm_kernel_page_size.value;

  set vm_kernel_page_size(int value) => _vm_kernel_page_size.value = value;

  late final ffi.Pointer<vm_size_t> _vm_kernel_page_mask =
      _lookup<vm_size_t>('vm_kernel_page_mask');

  int get vm_kernel_page_mask => _vm_kernel_page_mask.value;

  set vm_kernel_page_mask(int value) => _vm_kernel_page_mask.value = value;

  late final ffi.Pointer<ffi.Int> _vm_kernel_page_shift =
      _lookup<ffi.Int>('vm_kernel_page_shift');

  int get vm_kernel_page_shift => _vm_kernel_page_shift.value;

  set vm_kernel_page_shift(int value) => _vm_kernel_page_shift.value = value;

  int mach_host_self() {
    return _mach_host_self();
  }

  late final _mach_host_selfPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function()>>('mach_host_self');
  late final _mach_host_self = _mach_host_selfPtr.asFunction<int Function()>();

  int mach_thread_self() {
    return _mach_thread_self();
  }

  late final _mach_thread_selfPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function()>>('mach_thread_self');
  late final _mach_thread_self =
      _mach_thread_selfPtr.asFunction<int Function()>();

  int mach_task_is_self(
    int task,
  ) {
    return _mach_task_is_self(
      task,
    );
  }

  late final _mach_task_is_selfPtr =
      _lookup<ffi.NativeFunction<boolean_t Function(task_name_t)>>(
          'mach_task_is_self');
  late final _mach_task_is_self =
      _mach_task_is_selfPtr.asFunction<int Function(int)>();

  int host_page_size(
    int arg0,
    ffi.Pointer<vm_size_t> arg1,
  ) {
    return _host_page_size(
      arg0,
      arg1,
    );
  }

  late final _host_page_sizePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              host_t, ffi.Pointer<vm_size_t>)>>('host_page_size');
  late final _host_page_size = _host_page_sizePtr
      .asFunction<int Function(int, ffi.Pointer<vm_size_t>)>();

  late final ffi.Pointer<mach_port_t> _mach_task_self_ =
      _lookup<mach_port_t>('mach_task_self_');

  int get mach_task_self_ => _mach_task_self_.value;

  set mach_task_self_(int value) => _mach_task_self_.value = value;

  int clock_sleep_trap(
    int clock_name,
    int sleep_type,
    int sleep_sec,
    int sleep_nsec,
    ffi.Pointer<mach_timespec_t> wakeup_time,
  ) {
    return _clock_sleep_trap(
      clock_name,
      sleep_type,
      sleep_sec,
      sleep_nsec,
      wakeup_time,
    );
  }

  late final _clock_sleep_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, sleep_type_t, ffi.Int,
              ffi.Int, ffi.Pointer<mach_timespec_t>)>>('clock_sleep_trap');
  late final _clock_sleep_trap = _clock_sleep_trapPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<mach_timespec_t>)>();

  int _kernelrpc_mach_vm_allocate_trap(
    int target,
    ffi.Pointer<mach_vm_offset_t> addr,
    int size,
    int flags,
  ) {
    return __kernelrpc_mach_vm_allocate_trap(
      target,
      addr,
      size,
      flags,
    );
  }

  late final __kernelrpc_mach_vm_allocate_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              ffi.Pointer<mach_vm_offset_t>,
              mach_vm_size_t,
              ffi.Int)>>('_kernelrpc_mach_vm_allocate_trap');
  late final __kernelrpc_mach_vm_allocate_trap =
      __kernelrpc_mach_vm_allocate_trapPtr.asFunction<
          int Function(int, ffi.Pointer<mach_vm_offset_t>, int, int)>();

  int _kernelrpc_mach_vm_deallocate_trap(
    int target,
    int address,
    int size,
  ) {
    return __kernelrpc_mach_vm_deallocate_trap(
      target,
      address,
      size,
    );
  }

  late final __kernelrpc_mach_vm_deallocate_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, mach_vm_address_t,
              mach_vm_size_t)>>('_kernelrpc_mach_vm_deallocate_trap');
  late final __kernelrpc_mach_vm_deallocate_trap =
      __kernelrpc_mach_vm_deallocate_trapPtr
          .asFunction<int Function(int, int, int)>();

  int task_dyld_process_info_notify_get(
    mach_port_name_array_t names_addr,
    ffi.Pointer<natural_t> names_count_addr,
  ) {
    return _task_dyld_process_info_notify_get(
      names_addr,
      names_count_addr,
    );
  }

  late final _task_dyld_process_info_notify_getPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_array_t,
              ffi.Pointer<natural_t>)>>('task_dyld_process_info_notify_get');
  late final _task_dyld_process_info_notify_get =
      _task_dyld_process_info_notify_getPtr.asFunction<
          int Function(mach_port_name_array_t, ffi.Pointer<natural_t>)>();

  int _kernelrpc_mach_vm_protect_trap(
    int target,
    int address,
    int size,
    int set_maximum,
    int new_protection,
  ) {
    return __kernelrpc_mach_vm_protect_trap(
      target,
      address,
      size,
      set_maximum,
      new_protection,
    );
  }

  late final __kernelrpc_mach_vm_protect_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              mach_vm_address_t,
              mach_vm_size_t,
              boolean_t,
              vm_prot_t)>>('_kernelrpc_mach_vm_protect_trap');
  late final __kernelrpc_mach_vm_protect_trap =
      __kernelrpc_mach_vm_protect_trapPtr
          .asFunction<int Function(int, int, int, int, int)>();

  int _kernelrpc_mach_vm_map_trap(
    int target,
    ffi.Pointer<mach_vm_offset_t> address,
    int size,
    int mask,
    int flags,
    int cur_protection,
  ) {
    return __kernelrpc_mach_vm_map_trap(
      target,
      address,
      size,
      mask,
      flags,
      cur_protection,
    );
  }

  late final __kernelrpc_mach_vm_map_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              ffi.Pointer<mach_vm_offset_t>,
              mach_vm_size_t,
              mach_vm_offset_t,
              ffi.Int,
              vm_prot_t)>>('_kernelrpc_mach_vm_map_trap');
  late final __kernelrpc_mach_vm_map_trap =
      __kernelrpc_mach_vm_map_trapPtr.asFunction<
          int Function(
              int, ffi.Pointer<mach_vm_offset_t>, int, int, int, int)>();

  int _kernelrpc_mach_vm_purgable_control_trap(
    int target,
    int address,
    int control,
    ffi.Pointer<ffi.Int> state,
  ) {
    return __kernelrpc_mach_vm_purgable_control_trap(
      target,
      address,
      control,
      state,
    );
  }

  late final __kernelrpc_mach_vm_purgable_control_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(mach_port_name_t, mach_vm_offset_t,
                  vm_purgable_t, ffi.Pointer<ffi.Int>)>>(
      '_kernelrpc_mach_vm_purgable_control_trap');
  late final __kernelrpc_mach_vm_purgable_control_trap =
      __kernelrpc_mach_vm_purgable_control_trapPtr
          .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int _kernelrpc_mach_port_allocate_trap(
    int target,
    int right,
    ffi.Pointer<mach_port_name_t> name,
  ) {
    return __kernelrpc_mach_port_allocate_trap(
      target,
      right,
      name,
    );
  }

  late final __kernelrpc_mach_port_allocate_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(mach_port_name_t, mach_port_right_t,
                  ffi.Pointer<mach_port_name_t>)>>(
      '_kernelrpc_mach_port_allocate_trap');
  late final __kernelrpc_mach_port_allocate_trap =
      __kernelrpc_mach_port_allocate_trapPtr
          .asFunction<int Function(int, int, ffi.Pointer<mach_port_name_t>)>();

  int _kernelrpc_mach_port_deallocate_trap(
    int target,
    int name,
  ) {
    return __kernelrpc_mach_port_deallocate_trap(
      target,
      name,
    );
  }

  late final __kernelrpc_mach_port_deallocate_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t,
              mach_port_name_t)>>('_kernelrpc_mach_port_deallocate_trap');
  late final __kernelrpc_mach_port_deallocate_trap =
      __kernelrpc_mach_port_deallocate_trapPtr
          .asFunction<int Function(int, int)>();

  int _kernelrpc_mach_port_mod_refs_trap(
    int target,
    int name,
    int right,
    int delta,
  ) {
    return __kernelrpc_mach_port_mod_refs_trap(
      target,
      name,
      right,
      delta,
    );
  }

  late final __kernelrpc_mach_port_mod_refs_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              mach_port_name_t,
              mach_port_right_t,
              mach_port_delta_t)>>('_kernelrpc_mach_port_mod_refs_trap');
  late final __kernelrpc_mach_port_mod_refs_trap =
      __kernelrpc_mach_port_mod_refs_trapPtr
          .asFunction<int Function(int, int, int, int)>();

  int _kernelrpc_mach_port_move_member_trap(
    int target,
    int member,
    int after,
  ) {
    return __kernelrpc_mach_port_move_member_trap(
      target,
      member,
      after,
    );
  }

  late final __kernelrpc_mach_port_move_member_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, mach_port_name_t,
              mach_port_name_t)>>('_kernelrpc_mach_port_move_member_trap');
  late final __kernelrpc_mach_port_move_member_trap =
      __kernelrpc_mach_port_move_member_trapPtr
          .asFunction<int Function(int, int, int)>();

  int _kernelrpc_mach_port_insert_right_trap(
    int target,
    int name,
    int poly,
    int polyPoly,
  ) {
    return __kernelrpc_mach_port_insert_right_trap(
      target,
      name,
      poly,
      polyPoly,
    );
  }

  late final __kernelrpc_mach_port_insert_right_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              mach_port_name_t,
              mach_port_name_t,
              mach_msg_type_name_t)>>('_kernelrpc_mach_port_insert_right_trap');
  late final __kernelrpc_mach_port_insert_right_trap =
      __kernelrpc_mach_port_insert_right_trapPtr
          .asFunction<int Function(int, int, int, int)>();

  int _kernelrpc_mach_port_get_attributes_trap(
    int target,
    int name,
    int flavor,
    mach_port_info_t port_info_out,
    ffi.Pointer<mach_msg_type_number_t> port_info_outCnt,
  ) {
    return __kernelrpc_mach_port_get_attributes_trap(
      target,
      name,
      flavor,
      port_info_out,
      port_info_outCnt,
    );
  }

  late final __kernelrpc_mach_port_get_attributes_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(
                  mach_port_name_t,
                  mach_port_name_t,
                  mach_port_flavor_t,
                  mach_port_info_t,
                  ffi.Pointer<mach_msg_type_number_t>)>>(
      '_kernelrpc_mach_port_get_attributes_trap');
  late final __kernelrpc_mach_port_get_attributes_trap =
      __kernelrpc_mach_port_get_attributes_trapPtr.asFunction<
          int Function(int, int, int, mach_port_info_t,
              ffi.Pointer<mach_msg_type_number_t>)>();

  int _kernelrpc_mach_port_insert_member_trap(
    int target,
    int name,
    int pset,
  ) {
    return __kernelrpc_mach_port_insert_member_trap(
      target,
      name,
      pset,
    );
  }

  late final __kernelrpc_mach_port_insert_member_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, mach_port_name_t,
              mach_port_name_t)>>('_kernelrpc_mach_port_insert_member_trap');
  late final __kernelrpc_mach_port_insert_member_trap =
      __kernelrpc_mach_port_insert_member_trapPtr
          .asFunction<int Function(int, int, int)>();

  int _kernelrpc_mach_port_extract_member_trap(
    int target,
    int name,
    int pset,
  ) {
    return __kernelrpc_mach_port_extract_member_trap(
      target,
      name,
      pset,
    );
  }

  late final __kernelrpc_mach_port_extract_member_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, mach_port_name_t,
              mach_port_name_t)>>('_kernelrpc_mach_port_extract_member_trap');
  late final __kernelrpc_mach_port_extract_member_trap =
      __kernelrpc_mach_port_extract_member_trapPtr
          .asFunction<int Function(int, int, int)>();

  int _kernelrpc_mach_port_construct_trap(
    int target,
    ffi.Pointer<mach_port_options_t> options,
    int context,
    ffi.Pointer<mach_port_name_t> name,
  ) {
    return __kernelrpc_mach_port_construct_trap(
      target,
      options,
      context,
      name,
    );
  }

  late final __kernelrpc_mach_port_construct_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(
                  mach_port_name_t,
                  ffi.Pointer<mach_port_options_t>,
                  ffi.Uint64,
                  ffi.Pointer<mach_port_name_t>)>>(
      '_kernelrpc_mach_port_construct_trap');
  late final __kernelrpc_mach_port_construct_trap =
      __kernelrpc_mach_port_construct_trapPtr.asFunction<
          int Function(int, ffi.Pointer<mach_port_options_t>, int,
              ffi.Pointer<mach_port_name_t>)>();

  int _kernelrpc_mach_port_destruct_trap(
    int target,
    int name,
    int srdelta,
    int guard,
  ) {
    return __kernelrpc_mach_port_destruct_trap(
      target,
      name,
      srdelta,
      guard,
    );
  }

  late final __kernelrpc_mach_port_destruct_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              mach_port_name_t,
              mach_port_delta_t,
              ffi.Uint64)>>('_kernelrpc_mach_port_destruct_trap');
  late final __kernelrpc_mach_port_destruct_trap =
      __kernelrpc_mach_port_destruct_trapPtr
          .asFunction<int Function(int, int, int, int)>();

  int _kernelrpc_mach_port_guard_trap(
    int target,
    int name,
    int guard,
    int strict,
  ) {
    return __kernelrpc_mach_port_guard_trap(
      target,
      name,
      guard,
      strict,
    );
  }

  late final __kernelrpc_mach_port_guard_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, mach_port_name_t, ffi.Uint64,
              boolean_t)>>('_kernelrpc_mach_port_guard_trap');
  late final __kernelrpc_mach_port_guard_trap =
      __kernelrpc_mach_port_guard_trapPtr
          .asFunction<int Function(int, int, int, int)>();

  int _kernelrpc_mach_port_unguard_trap(
    int target,
    int name,
    int guard,
  ) {
    return __kernelrpc_mach_port_unguard_trap(
      target,
      name,
      guard,
    );
  }

  late final __kernelrpc_mach_port_unguard_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, mach_port_name_t,
              ffi.Uint64)>>('_kernelrpc_mach_port_unguard_trap');
  late final __kernelrpc_mach_port_unguard_trap =
      __kernelrpc_mach_port_unguard_trapPtr
          .asFunction<int Function(int, int, int)>();

  int mach_generate_activity_id(
    int target,
    int count,
    ffi.Pointer<ffi.Uint64> activity_id,
  ) {
    return _mach_generate_activity_id(
      target,
      count,
      activity_id,
    );
  }

  late final _mach_generate_activity_idPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, ffi.Int,
              ffi.Pointer<ffi.Uint64>)>>('mach_generate_activity_id');
  late final _mach_generate_activity_id = _mach_generate_activity_idPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Uint64>)>();

  int macx_swapon(
    int filename,
    int flags,
    int size,
    int priority,
  ) {
    return _macx_swapon(
      filename,
      flags,
      size,
      priority,
    );
  }

  late final _macx_swaponPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              ffi.Uint64, ffi.Int, ffi.Int, ffi.Int)>>('macx_swapon');
  late final _macx_swapon =
      _macx_swaponPtr.asFunction<int Function(int, int, int, int)>();

  int macx_swapoff(
    int filename,
    int flags,
  ) {
    return _macx_swapoff(
      filename,
      flags,
    );
  }

  late final _macx_swapoffPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(ffi.Uint64, ffi.Int)>>(
          'macx_swapoff');
  late final _macx_swapoff =
      _macx_swapoffPtr.asFunction<int Function(int, int)>();

  int macx_triggers(
    int hi_water,
    int low_water,
    int flags,
    int alert_port,
  ) {
    return _macx_triggers(
      hi_water,
      low_water,
      flags,
      alert_port,
    );
  }

  late final _macx_triggersPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              ffi.Int, ffi.Int, ffi.Int, mach_port_t)>>('macx_triggers');
  late final _macx_triggers =
      _macx_triggersPtr.asFunction<int Function(int, int, int, int)>();

  int macx_backing_store_suspend(
    int suspend,
  ) {
    return _macx_backing_store_suspend(
      suspend,
    );
  }

  late final _macx_backing_store_suspendPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(boolean_t)>>(
          'macx_backing_store_suspend');
  late final _macx_backing_store_suspend =
      _macx_backing_store_suspendPtr.asFunction<int Function(int)>();

  int macx_backing_store_recovery(
    int pid,
  ) {
    return _macx_backing_store_recovery(
      pid,
    );
  }

  late final _macx_backing_store_recoveryPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(ffi.Int)>>(
          'macx_backing_store_recovery');
  late final _macx_backing_store_recovery =
      _macx_backing_store_recoveryPtr.asFunction<int Function(int)>();

  int swtch_pri(
    int pri,
  ) {
    return _swtch_pri(
      pri,
    );
  }

  late final _swtch_priPtr =
      _lookup<ffi.NativeFunction<boolean_t Function(ffi.Int)>>('swtch_pri');
  late final _swtch_pri = _swtch_priPtr.asFunction<int Function(int)>();

  int swtch() {
    return _swtch();
  }

  late final _swtchPtr =
      _lookup<ffi.NativeFunction<boolean_t Function()>>('swtch');
  late final _swtch = _swtchPtr.asFunction<int Function()>();

  int thread_switch(
    int thread_name,
    int option,
    int option_time,
  ) {
    return _thread_switch(
      thread_name,
      option,
      option_time,
    );
  }

  late final _thread_switchPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t, ffi.Int, mach_msg_timeout_t)>>('thread_switch');
  late final _thread_switch =
      _thread_switchPtr.asFunction<int Function(int, int, int)>();

  int task_self_trap() {
    return _task_self_trap();
  }

  late final _task_self_trapPtr =
      _lookup<ffi.NativeFunction<mach_port_name_t Function()>>(
          'task_self_trap');
  late final _task_self_trap = _task_self_trapPtr.asFunction<int Function()>();

  int host_create_mach_voucher_trap(
    int host,
    mach_voucher_attr_raw_recipe_array_t recipes,
    int recipes_size,
    ffi.Pointer<mach_port_name_t> voucher,
  ) {
    return _host_create_mach_voucher_trap(
      host,
      recipes,
      recipes_size,
      voucher,
    );
  }

  late final _host_create_mach_voucher_trapPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t,
              mach_voucher_attr_raw_recipe_array_t,
              ffi.Int,
              ffi.Pointer<mach_port_name_t>)>>('host_create_mach_voucher_trap');
  late final _host_create_mach_voucher_trap =
      _host_create_mach_voucher_trapPtr.asFunction<
          int Function(int, mach_voucher_attr_raw_recipe_array_t, int,
              ffi.Pointer<mach_port_name_t>)>();

  int mach_voucher_extract_attr_recipe_trap(
    int voucher_name,
    int key,
    mach_voucher_attr_raw_recipe_t recipe,
    ffi.Pointer<mach_msg_type_number_t> recipe_size,
  ) {
    return _mach_voucher_extract_attr_recipe_trap(
      voucher_name,
      key,
      recipe,
      recipe_size,
    );
  }

  late final _mach_voucher_extract_attr_recipe_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(
                  mach_port_name_t,
                  mach_voucher_attr_key_t,
                  mach_voucher_attr_raw_recipe_t,
                  ffi.Pointer<mach_msg_type_number_t>)>>(
      'mach_voucher_extract_attr_recipe_trap');
  late final _mach_voucher_extract_attr_recipe_trap =
      _mach_voucher_extract_attr_recipe_trapPtr.asFunction<
          int Function(int, int, mach_voucher_attr_raw_recipe_t,
              ffi.Pointer<mach_msg_type_number_t>)>();

  int _kernelrpc_mach_port_type_trap(
    int task,
    int name,
    ffi.Pointer<mach_port_type_t> ptype,
  ) {
    return __kernelrpc_mach_port_type_trap(
      task,
      name,
      ptype,
    );
  }

  late final __kernelrpc_mach_port_type_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(ipc_space_t, mach_port_name_t,
                  ffi.Pointer<mach_port_type_t>)>>(
      '_kernelrpc_mach_port_type_trap');
  late final __kernelrpc_mach_port_type_trap =
      __kernelrpc_mach_port_type_trapPtr
          .asFunction<int Function(int, int, ffi.Pointer<mach_port_type_t>)>();

  int _kernelrpc_mach_port_request_notification_trap(
    int task,
    int name,
    int msgid,
    int sync1,
    int notify,
    int notifyPoly,
    ffi.Pointer<mach_port_name_t> previous,
  ) {
    return __kernelrpc_mach_port_request_notification_trap(
      task,
      name,
      msgid,
      sync1,
      notify,
      notifyPoly,
      previous,
    );
  }

  late final __kernelrpc_mach_port_request_notification_trapPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(
                  ipc_space_t,
                  mach_port_name_t,
                  mach_msg_id_t,
                  mach_port_mscount_t,
                  mach_port_name_t,
                  mach_msg_type_name_t,
                  ffi.Pointer<mach_port_name_t>)>>(
      '_kernelrpc_mach_port_request_notification_trap');
  late final __kernelrpc_mach_port_request_notification_trap =
      __kernelrpc_mach_port_request_notification_trapPtr.asFunction<
          int Function(
              int, int, int, int, int, int, ffi.Pointer<mach_port_name_t>)>();

  int task_for_pid(
    int target_tport,
    int pid,
    ffi.Pointer<mach_port_name_t> t,
  ) {
    return _task_for_pid(
      target_tport,
      pid,
      t,
    );
  }

  late final _task_for_pidPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, ffi.Int,
              ffi.Pointer<mach_port_name_t>)>>('task_for_pid');
  late final _task_for_pid = _task_for_pidPtr
      .asFunction<int Function(int, int, ffi.Pointer<mach_port_name_t>)>();

  int task_name_for_pid(
    int target_tport,
    int pid,
    ffi.Pointer<mach_port_name_t> tn,
  ) {
    return _task_name_for_pid(
      target_tport,
      pid,
      tn,
    );
  }

  late final _task_name_for_pidPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, ffi.Int,
              ffi.Pointer<mach_port_name_t>)>>('task_name_for_pid');
  late final _task_name_for_pid = _task_name_for_pidPtr
      .asFunction<int Function(int, int, ffi.Pointer<mach_port_name_t>)>();

  int pid_for_task(
    int t,
    ffi.Pointer<ffi.Int> x,
  ) {
    return _pid_for_task(
      t,
      x,
    );
  }

  late final _pid_for_taskPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_name_t, ffi.Pointer<ffi.Int>)>>('pid_for_task');
  late final _pid_for_task =
      _pid_for_taskPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int debug_control_port_for_pid(
    int target_tport,
    int pid,
    ffi.Pointer<mach_port_name_t> t,
  ) {
    return _debug_control_port_for_pid(
      target_tport,
      pid,
      t,
    );
  }

  late final _debug_control_port_for_pidPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_name_t, ffi.Int,
              ffi.Pointer<mach_port_name_t>)>>('debug_control_port_for_pid');
  late final _debug_control_port_for_pid = _debug_control_port_for_pidPtr
      .asFunction<int Function(int, int, ffi.Pointer<mach_port_name_t>)>();

  late final ffi.Pointer<mach_port_t> _bootstrap_port =
      _lookup<mach_port_t>('bootstrap_port');

  int get bootstrap_port => _bootstrap_port.value;

  set bootstrap_port(int value) => _bootstrap_port.value = value;

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>>
      _vprintf_stderr_func = _lookup<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Char>, va_list)>>>('vprintf_stderr_func');

  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>
      get vprintf_stderr_func => _vprintf_stderr_func.value;

  set vprintf_stderr_func(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>
              value) =>
      _vprintf_stderr_func.value = value;

  late final ffi.Pointer<mach_port_t> _kIOMainPortDefault =
      _lookup<mach_port_t>('kIOMainPortDefault');

  int get kIOMainPortDefault => _kIOMainPortDefault.value;

  set kIOMainPortDefault(int value) => _kIOMainPortDefault.value = value;

  int IOMainPort(
    int bootstrapPort,
    ffi.Pointer<mach_port_t> mainPort,
  ) {
    return _IOMainPort(
      bootstrapPort,
      mainPort,
    );
  }

  late final _IOMainPortPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t, ffi.Pointer<mach_port_t>)>>('IOMainPort');
  late final _IOMainPort =
      _IOMainPortPtr.asFunction<int Function(int, ffi.Pointer<mach_port_t>)>();

  late final ffi.Pointer<mach_port_t> _kIOMasterPortDefault =
      _lookup<mach_port_t>('kIOMasterPortDefault');

  int get kIOMasterPortDefault => _kIOMasterPortDefault.value;

  set kIOMasterPortDefault(int value) => _kIOMasterPortDefault.value = value;

  int IOMasterPort(
    int bootstrapPort,
    ffi.Pointer<mach_port_t> mainPort,
  ) {
    return _IOMasterPort(
      bootstrapPort,
      mainPort,
    );
  }

  late final _IOMasterPortPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t, ffi.Pointer<mach_port_t>)>>('IOMasterPort');
  late final _IOMasterPort = _IOMasterPortPtr.asFunction<
      int Function(int, ffi.Pointer<mach_port_t>)>();

  IONotificationPortRef IONotificationPortCreate(
    int mainPort,
  ) {
    return _IONotificationPortCreate(
      mainPort,
    );
  }

  late final _IONotificationPortCreatePtr =
      _lookup<ffi.NativeFunction<IONotificationPortRef Function(mach_port_t)>>(
          'IONotificationPortCreate');
  late final _IONotificationPortCreate = _IONotificationPortCreatePtr
      .asFunction<IONotificationPortRef Function(int)>();

  void IONotificationPortDestroy(
    IONotificationPortRef notify,
  ) {
    return _IONotificationPortDestroy(
      notify,
    );
  }

  late final _IONotificationPortDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IONotificationPortRef)>>(
          'IONotificationPortDestroy');
  late final _IONotificationPortDestroy = _IONotificationPortDestroyPtr
      .asFunction<void Function(IONotificationPortRef)>();

  CFRunLoopSourceRef IONotificationPortGetRunLoopSource(
    IONotificationPortRef notify,
  ) {
    return _IONotificationPortGetRunLoopSource(
      notify,
    );
  }

  late final _IONotificationPortGetRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              IONotificationPortRef)>>('IONotificationPortGetRunLoopSource');
  late final _IONotificationPortGetRunLoopSource =
      _IONotificationPortGetRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(IONotificationPortRef)>();

  int IONotificationPortGetMachPort(
    IONotificationPortRef notify,
  ) {
    return _IONotificationPortGetMachPort(
      notify,
    );
  }

  late final _IONotificationPortGetMachPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(IONotificationPortRef)>>(
          'IONotificationPortGetMachPort');
  late final _IONotificationPortGetMachPort = _IONotificationPortGetMachPortPtr
      .asFunction<int Function(IONotificationPortRef)>();

  int IONotificationPortSetImportanceReceiver(
    IONotificationPortRef notify,
  ) {
    return _IONotificationPortSetImportanceReceiver(
      notify,
    );
  }

  late final _IONotificationPortSetImportanceReceiverPtr = _lookup<
          ffi.NativeFunction<kern_return_t Function(IONotificationPortRef)>>(
      'IONotificationPortSetImportanceReceiver');
  late final _IONotificationPortSetImportanceReceiver =
      _IONotificationPortSetImportanceReceiverPtr.asFunction<
          int Function(IONotificationPortRef)>();

  void IONotificationPortSetDispatchQueue(
    IONotificationPortRef notify,
    dispatch_queue_t queue,
  ) {
    return _IONotificationPortSetDispatchQueue(
      notify,
      queue,
    );
  }

  late final _IONotificationPortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(IONotificationPortRef,
              dispatch_queue_t)>>('IONotificationPortSetDispatchQueue');
  late final _IONotificationPortSetDispatchQueue =
      _IONotificationPortSetDispatchQueuePtr.asFunction<
          void Function(IONotificationPortRef, dispatch_queue_t)>();

  void IODispatchCalloutFromMessage(
    ffi.Pointer<ffi.Void> unused,
    ffi.Pointer<mach_msg_header_t> msg,
    ffi.Pointer<ffi.Void> reference,
  ) {
    return _IODispatchCalloutFromMessage(
      unused,
      msg,
      reference,
    );
  }

  late final _IODispatchCalloutFromMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<mach_msg_header_t>,
              ffi.Pointer<ffi.Void>)>>('IODispatchCalloutFromMessage');
  late final _IODispatchCalloutFromMessage =
      _IODispatchCalloutFromMessagePtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<mach_msg_header_t>,
              ffi.Pointer<ffi.Void>)>();

  int IOCreateReceivePort(
    int msgType,
    ffi.Pointer<mach_port_t> recvPort,
  ) {
    return _IOCreateReceivePort(
      msgType,
      recvPort,
    );
  }

  late final _IOCreateReceivePortPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              ffi.Uint32, ffi.Pointer<mach_port_t>)>>('IOCreateReceivePort');
  late final _IOCreateReceivePort = _IOCreateReceivePortPtr.asFunction<
      int Function(int, ffi.Pointer<mach_port_t>)>();

  int IOObjectRelease(
    int object,
  ) {
    return _IOObjectRelease(
      object,
    );
  }

  late final _IOObjectReleasePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_object_t)>>(
          'IOObjectRelease');
  late final _IOObjectRelease =
      _IOObjectReleasePtr.asFunction<int Function(int)>();

  int IOObjectRetain(
    int object,
  ) {
    return _IOObjectRetain(
      object,
    );
  }

  late final _IOObjectRetainPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_object_t)>>(
          'IOObjectRetain');
  late final _IOObjectRetain =
      _IOObjectRetainPtr.asFunction<int Function(int)>();

  int IOObjectGetClass(
    int object,
    ffi.Pointer<ffi.Char> className,
  ) {
    return _IOObjectGetClass(
      object,
      className,
    );
  }

  late final _IOObjectGetClassPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_object_t, ffi.Pointer<ffi.Char>)>>('IOObjectGetClass');
  late final _IOObjectGetClass = _IOObjectGetClassPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  CFStringRef IOObjectCopyClass(
    int object,
  ) {
    return _IOObjectCopyClass(
      object,
    );
  }

  late final _IOObjectCopyClassPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(io_object_t)>>(
          'IOObjectCopyClass');
  late final _IOObjectCopyClass =
      _IOObjectCopyClassPtr.asFunction<CFStringRef Function(int)>();

  CFStringRef IOObjectCopySuperclassForClass(
    CFStringRef classname,
  ) {
    return _IOObjectCopySuperclassForClass(
      classname,
    );
  }

  late final _IOObjectCopySuperclassForClassPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef)>>(
          'IOObjectCopySuperclassForClass');
  late final _IOObjectCopySuperclassForClass =
      _IOObjectCopySuperclassForClassPtr.asFunction<
          CFStringRef Function(CFStringRef)>();

  CFStringRef IOObjectCopyBundleIdentifierForClass(
    CFStringRef classname,
  ) {
    return _IOObjectCopyBundleIdentifierForClass(
      classname,
    );
  }

  late final _IOObjectCopyBundleIdentifierForClassPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef)>>(
          'IOObjectCopyBundleIdentifierForClass');
  late final _IOObjectCopyBundleIdentifierForClass =
      _IOObjectCopyBundleIdentifierForClassPtr.asFunction<
          CFStringRef Function(CFStringRef)>();

  int IOObjectConformsTo(
    int object,
    ffi.Pointer<ffi.Char> className,
  ) {
    return _IOObjectConformsTo(
      object,
      className,
    );
  }

  late final _IOObjectConformsToPtr = _lookup<
      ffi.NativeFunction<
          boolean_t Function(
              io_object_t, ffi.Pointer<ffi.Char>)>>('IOObjectConformsTo');
  late final _IOObjectConformsTo = _IOObjectConformsToPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  int IOObjectIsEqualTo(
    int object,
    int anObject,
  ) {
    return _IOObjectIsEqualTo(
      object,
      anObject,
    );
  }

  late final _IOObjectIsEqualToPtr =
      _lookup<ffi.NativeFunction<boolean_t Function(io_object_t, io_object_t)>>(
          'IOObjectIsEqualTo');
  late final _IOObjectIsEqualTo =
      _IOObjectIsEqualToPtr.asFunction<int Function(int, int)>();

  int IOObjectGetKernelRetainCount(
    int object,
  ) {
    return _IOObjectGetKernelRetainCount(
      object,
    );
  }

  late final _IOObjectGetKernelRetainCountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(io_object_t)>>(
          'IOObjectGetKernelRetainCount');
  late final _IOObjectGetKernelRetainCount =
      _IOObjectGetKernelRetainCountPtr.asFunction<int Function(int)>();

  int IOObjectGetUserRetainCount(
    int object,
  ) {
    return _IOObjectGetUserRetainCount(
      object,
    );
  }

  late final _IOObjectGetUserRetainCountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(io_object_t)>>(
          'IOObjectGetUserRetainCount');
  late final _IOObjectGetUserRetainCount =
      _IOObjectGetUserRetainCountPtr.asFunction<int Function(int)>();

  int IOObjectGetRetainCount(
    int object,
  ) {
    return _IOObjectGetRetainCount(
      object,
    );
  }

  late final _IOObjectGetRetainCountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(io_object_t)>>(
          'IOObjectGetRetainCount');
  late final _IOObjectGetRetainCount =
      _IOObjectGetRetainCountPtr.asFunction<int Function(int)>();

  int IOIteratorNext(
    int iterator,
  ) {
    return _IOIteratorNext(
      iterator,
    );
  }

  late final _IOIteratorNextPtr =
      _lookup<ffi.NativeFunction<io_object_t Function(io_iterator_t)>>(
          'IOIteratorNext');
  late final _IOIteratorNext =
      _IOIteratorNextPtr.asFunction<int Function(int)>();

  void IOIteratorReset(
    int iterator,
  ) {
    return _IOIteratorReset(
      iterator,
    );
  }

  late final _IOIteratorResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(io_iterator_t)>>(
          'IOIteratorReset');
  late final _IOIteratorReset =
      _IOIteratorResetPtr.asFunction<void Function(int)>();

  int IOIteratorIsValid(
    int iterator,
  ) {
    return _IOIteratorIsValid(
      iterator,
    );
  }

  late final _IOIteratorIsValidPtr =
      _lookup<ffi.NativeFunction<boolean_t Function(io_iterator_t)>>(
          'IOIteratorIsValid');
  late final _IOIteratorIsValid =
      _IOIteratorIsValidPtr.asFunction<int Function(int)>();

  int IOServiceGetMatchingService(
    int mainPort,
    CFDictionaryRef matching,
  ) {
    return _IOServiceGetMatchingService(
      mainPort,
      matching,
    );
  }

  late final _IOServiceGetMatchingServicePtr = _lookup<
      ffi.NativeFunction<
          io_service_t Function(
              mach_port_t, CFDictionaryRef)>>('IOServiceGetMatchingService');
  late final _IOServiceGetMatchingService = _IOServiceGetMatchingServicePtr
      .asFunction<int Function(int, CFDictionaryRef)>();

  int IOServiceGetMatchingServices(
    int mainPort,
    CFDictionaryRef matching,
    ffi.Pointer<io_iterator_t> existing,
  ) {
    return _IOServiceGetMatchingServices(
      mainPort,
      matching,
      existing,
    );
  }

  late final _IOServiceGetMatchingServicesPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_t, CFDictionaryRef,
              ffi.Pointer<io_iterator_t>)>>('IOServiceGetMatchingServices');
  late final _IOServiceGetMatchingServices =
      _IOServiceGetMatchingServicesPtr.asFunction<
          int Function(int, CFDictionaryRef, ffi.Pointer<io_iterator_t>)>();

  int IOServiceAddNotification(
    int mainPort,
    ffi.Pointer<ffi.Char> notificationType,
    CFDictionaryRef matching,
    int wakePort,
    int reference,
    ffi.Pointer<io_iterator_t> notification,
  ) {
    return _IOServiceAddNotification(
      mainPort,
      notificationType,
      matching,
      wakePort,
      reference,
      notification,
    );
  }

  late final _IOServiceAddNotificationPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Pointer<ffi.Char>,
              CFDictionaryRef,
              mach_port_t,
              uintptr_t,
              ffi.Pointer<io_iterator_t>)>>('IOServiceAddNotification');
  late final _IOServiceAddNotification =
      _IOServiceAddNotificationPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, CFDictionaryRef, int, int,
              ffi.Pointer<io_iterator_t>)>();

  int IOServiceAddMatchingNotification(
    IONotificationPortRef notifyPort,
    ffi.Pointer<ffi.Char> notificationType,
    CFDictionaryRef matching,
    IOServiceMatchingCallback callback,
    ffi.Pointer<ffi.Void> refCon,
    ffi.Pointer<io_iterator_t> notification,
  ) {
    return _IOServiceAddMatchingNotification(
      notifyPort,
      notificationType,
      matching,
      callback,
      refCon,
      notification,
    );
  }

  late final _IOServiceAddMatchingNotificationPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              IONotificationPortRef,
              ffi.Pointer<ffi.Char>,
              CFDictionaryRef,
              IOServiceMatchingCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<io_iterator_t>)>>('IOServiceAddMatchingNotification');
  late final _IOServiceAddMatchingNotification =
      _IOServiceAddMatchingNotificationPtr.asFunction<
          int Function(
              IONotificationPortRef,
              ffi.Pointer<ffi.Char>,
              CFDictionaryRef,
              IOServiceMatchingCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<io_iterator_t>)>();

  int IOServiceAddInterestNotification(
    IONotificationPortRef notifyPort,
    int service,
    ffi.Pointer<ffi.Char> interestType,
    IOServiceInterestCallback callback,
    ffi.Pointer<ffi.Void> refCon,
    ffi.Pointer<io_object_t> notification,
  ) {
    return _IOServiceAddInterestNotification(
      notifyPort,
      service,
      interestType,
      callback,
      refCon,
      notification,
    );
  }

  late final _IOServiceAddInterestNotificationPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              IONotificationPortRef,
              io_service_t,
              ffi.Pointer<ffi.Char>,
              IOServiceInterestCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<io_object_t>)>>('IOServiceAddInterestNotification');
  late final _IOServiceAddInterestNotification =
      _IOServiceAddInterestNotificationPtr.asFunction<
          int Function(
              IONotificationPortRef,
              int,
              ffi.Pointer<ffi.Char>,
              IOServiceInterestCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<io_object_t>)>();

  int IOServiceMatchPropertyTable(
    int service,
    CFDictionaryRef matching,
    ffi.Pointer<boolean_t> matches,
  ) {
    return _IOServiceMatchPropertyTable(
      service,
      matching,
      matches,
    );
  }

  late final _IOServiceMatchPropertyTablePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_service_t, CFDictionaryRef,
              ffi.Pointer<boolean_t>)>>('IOServiceMatchPropertyTable');
  late final _IOServiceMatchPropertyTable = _IOServiceMatchPropertyTablePtr
      .asFunction<int Function(int, CFDictionaryRef, ffi.Pointer<boolean_t>)>();

  int IOServiceGetBusyState(
    int service,
    ffi.Pointer<ffi.Uint32> busyState,
  ) {
    return _IOServiceGetBusyState(
      service,
      busyState,
    );
  }

  late final _IOServiceGetBusyStatePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_service_t, ffi.Pointer<ffi.Uint32>)>>('IOServiceGetBusyState');
  late final _IOServiceGetBusyState = _IOServiceGetBusyStatePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Uint32>)>();

  int IOServiceWaitQuiet(
    int service,
    ffi.Pointer<mach_timespec_t> waitTime,
  ) {
    return _IOServiceWaitQuiet(
      service,
      waitTime,
    );
  }

  late final _IOServiceWaitQuietPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_service_t,
              ffi.Pointer<mach_timespec_t>)>>('IOServiceWaitQuiet');
  late final _IOServiceWaitQuiet = _IOServiceWaitQuietPtr.asFunction<
      int Function(int, ffi.Pointer<mach_timespec_t>)>();

  int IOKitGetBusyState(
    int mainPort,
    ffi.Pointer<ffi.Uint32> busyState,
  ) {
    return _IOKitGetBusyState(
      mainPort,
      busyState,
    );
  }

  late final _IOKitGetBusyStatePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t, ffi.Pointer<ffi.Uint32>)>>('IOKitGetBusyState');
  late final _IOKitGetBusyState = _IOKitGetBusyStatePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Uint32>)>();

  int IOKitWaitQuiet(
    int mainPort,
    ffi.Pointer<mach_timespec_t> waitTime,
  ) {
    return _IOKitWaitQuiet(
      mainPort,
      waitTime,
    );
  }

  late final _IOKitWaitQuietPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t, ffi.Pointer<mach_timespec_t>)>>('IOKitWaitQuiet');
  late final _IOKitWaitQuiet = _IOKitWaitQuietPtr.asFunction<
      int Function(int, ffi.Pointer<mach_timespec_t>)>();

  int IOServiceOpen(
    int service,
    int owningTask,
    int type,
    ffi.Pointer<io_connect_t> connect,
  ) {
    return _IOServiceOpen(
      service,
      owningTask,
      type,
      connect,
    );
  }

  late final _IOServiceOpenPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_service_t, task_port_t, ffi.Uint32,
              ffi.Pointer<io_connect_t>)>>('IOServiceOpen');
  late final _IOServiceOpen = _IOServiceOpenPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<io_connect_t>)>();

  int IOServiceRequestProbe(
    int service,
    int options,
  ) {
    return _IOServiceRequestProbe(
      service,
      options,
    );
  }

  late final _IOServiceRequestProbePtr = _lookup<
          ffi.NativeFunction<kern_return_t Function(io_service_t, ffi.Uint32)>>(
      'IOServiceRequestProbe');
  late final _IOServiceRequestProbe =
      _IOServiceRequestProbePtr.asFunction<int Function(int, int)>();

  int IOServiceAuthorize(
    int service,
    int options,
  ) {
    return _IOServiceAuthorize(
      service,
      options,
    );
  }

  late final _IOServiceAuthorizePtr = _lookup<
          ffi.NativeFunction<kern_return_t Function(io_service_t, ffi.Uint32)>>(
      'IOServiceAuthorize');
  late final _IOServiceAuthorize =
      _IOServiceAuthorizePtr.asFunction<int Function(int, int)>();

  int IOServiceOpenAsFileDescriptor(
    int service,
    int oflag,
  ) {
    return _IOServiceOpenAsFileDescriptor(
      service,
      oflag,
    );
  }

  late final _IOServiceOpenAsFileDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(io_service_t, ffi.Int)>>(
          'IOServiceOpenAsFileDescriptor');
  late final _IOServiceOpenAsFileDescriptor =
      _IOServiceOpenAsFileDescriptorPtr.asFunction<int Function(int, int)>();

  int IOServiceClose(
    int connect,
  ) {
    return _IOServiceClose(
      connect,
    );
  }

  late final _IOServiceClosePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_connect_t)>>(
          'IOServiceClose');
  late final _IOServiceClose =
      _IOServiceClosePtr.asFunction<int Function(int)>();

  int IOConnectAddRef(
    int connect,
  ) {
    return _IOConnectAddRef(
      connect,
    );
  }

  late final _IOConnectAddRefPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_connect_t)>>(
          'IOConnectAddRef');
  late final _IOConnectAddRef =
      _IOConnectAddRefPtr.asFunction<int Function(int)>();

  int IOConnectRelease(
    int connect,
  ) {
    return _IOConnectRelease(
      connect,
    );
  }

  late final _IOConnectReleasePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_connect_t)>>(
          'IOConnectRelease');
  late final _IOConnectRelease =
      _IOConnectReleasePtr.asFunction<int Function(int)>();

  int IOConnectGetService(
    int connect,
    ffi.Pointer<io_service_t> service,
  ) {
    return _IOConnectGetService(
      connect,
      service,
    );
  }

  late final _IOConnectGetServicePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_connect_t, ffi.Pointer<io_service_t>)>>('IOConnectGetService');
  late final _IOConnectGetService = _IOConnectGetServicePtr.asFunction<
      int Function(int, ffi.Pointer<io_service_t>)>();

  int IOConnectSetNotificationPort(
    int connect,
    int type,
    int port,
    int reference,
  ) {
    return _IOConnectSetNotificationPort(
      connect,
      type,
      port,
      reference,
    );
  }

  late final _IOConnectSetNotificationPortPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, mach_port_t,
              uintptr_t)>>('IOConnectSetNotificationPort');
  late final _IOConnectSetNotificationPort = _IOConnectSetNotificationPortPtr
      .asFunction<int Function(int, int, int, int)>();

  int IOConnectMapMemory(
    int connect,
    int memoryType,
    int intoTask,
    ffi.Pointer<mach_vm_address_t> atAddress,
    ffi.Pointer<mach_vm_size_t> ofSize,
    int options,
  ) {
    return _IOConnectMapMemory(
      connect,
      memoryType,
      intoTask,
      atAddress,
      ofSize,
      options,
    );
  }

  late final _IOConnectMapMemoryPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_connect_t,
              ffi.Uint32,
              task_port_t,
              ffi.Pointer<mach_vm_address_t>,
              ffi.Pointer<mach_vm_size_t>,
              IOOptionBits)>>('IOConnectMapMemory');
  late final _IOConnectMapMemory = _IOConnectMapMemoryPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<mach_vm_address_t>,
          ffi.Pointer<mach_vm_size_t>, int)>();

  int IOConnectMapMemory64(
    int connect,
    int memoryType,
    int intoTask,
    ffi.Pointer<mach_vm_address_t> atAddress,
    ffi.Pointer<mach_vm_size_t> ofSize,
    int options,
  ) {
    return _IOConnectMapMemory64(
      connect,
      memoryType,
      intoTask,
      atAddress,
      ofSize,
      options,
    );
  }

  late final _IOConnectMapMemory64Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_connect_t,
              ffi.Uint32,
              task_port_t,
              ffi.Pointer<mach_vm_address_t>,
              ffi.Pointer<mach_vm_size_t>,
              IOOptionBits)>>('IOConnectMapMemory64');
  late final _IOConnectMapMemory64 = _IOConnectMapMemory64Ptr.asFunction<
      int Function(int, int, int, ffi.Pointer<mach_vm_address_t>,
          ffi.Pointer<mach_vm_size_t>, int)>();

  int IOConnectUnmapMemory(
    int connect,
    int memoryType,
    int fromTask,
    int atAddress,
  ) {
    return _IOConnectUnmapMemory(
      connect,
      memoryType,
      fromTask,
      atAddress,
    );
  }

  late final _IOConnectUnmapMemoryPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, task_port_t,
              mach_vm_address_t)>>('IOConnectUnmapMemory');
  late final _IOConnectUnmapMemory =
      _IOConnectUnmapMemoryPtr.asFunction<int Function(int, int, int, int)>();

  int IOConnectUnmapMemory64(
    int connect,
    int memoryType,
    int fromTask,
    int atAddress,
  ) {
    return _IOConnectUnmapMemory64(
      connect,
      memoryType,
      fromTask,
      atAddress,
    );
  }

  late final _IOConnectUnmapMemory64Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, task_port_t,
              mach_vm_address_t)>>('IOConnectUnmapMemory64');
  late final _IOConnectUnmapMemory64 =
      _IOConnectUnmapMemory64Ptr.asFunction<int Function(int, int, int, int)>();

  int IOConnectSetCFProperties(
    int connect,
    CFTypeRef properties,
  ) {
    return _IOConnectSetCFProperties(
      connect,
      properties,
    );
  }

  late final _IOConnectSetCFPropertiesPtr = _lookup<
          ffi.NativeFunction<kern_return_t Function(io_connect_t, CFTypeRef)>>(
      'IOConnectSetCFProperties');
  late final _IOConnectSetCFProperties =
      _IOConnectSetCFPropertiesPtr.asFunction<int Function(int, CFTypeRef)>();

  int IOConnectSetCFProperty(
    int connect,
    CFStringRef propertyName,
    CFTypeRef property,
  ) {
    return _IOConnectSetCFProperty(
      connect,
      propertyName,
      property,
    );
  }

  late final _IOConnectSetCFPropertyPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_connect_t, CFStringRef, CFTypeRef)>>('IOConnectSetCFProperty');
  late final _IOConnectSetCFProperty = _IOConnectSetCFPropertyPtr.asFunction<
      int Function(int, CFStringRef, CFTypeRef)>();

  int IOConnectCallMethod(
    int connection,
    int selector,
    ffi.Pointer<ffi.Uint64> input,
    int inputCnt,
    ffi.Pointer<ffi.Void> inputStruct,
    int inputStructCnt,
    ffi.Pointer<ffi.Uint64> output,
    ffi.Pointer<ffi.Uint32> outputCnt,
    ffi.Pointer<ffi.Void> outputStruct,
    ffi.Pointer<ffi.Size> outputStructCnt,
  ) {
    return _IOConnectCallMethod(
      connection,
      selector,
      input,
      inputCnt,
      inputStruct,
      inputStructCnt,
      output,
      outputCnt,
      outputStruct,
      outputStructCnt,
    );
  }

  late final _IOConnectCallMethodPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('IOConnectCallMethod');
  late final _IOConnectCallMethod = _IOConnectCallMethodPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Uint64>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int IOConnectCallAsyncMethod(
    int connection,
    int selector,
    int wake_port,
    ffi.Pointer<ffi.Uint64> reference,
    int referenceCnt,
    ffi.Pointer<ffi.Uint64> input,
    int inputCnt,
    ffi.Pointer<ffi.Void> inputStruct,
    int inputStructCnt,
    ffi.Pointer<ffi.Uint64> output,
    ffi.Pointer<ffi.Uint32> outputCnt,
    ffi.Pointer<ffi.Void> outputStruct,
    ffi.Pointer<ffi.Size> outputStructCnt,
  ) {
    return _IOConnectCallAsyncMethod(
      connection,
      selector,
      wake_port,
      reference,
      referenceCnt,
      input,
      inputCnt,
      inputStruct,
      inputStructCnt,
      output,
      outputCnt,
      outputStruct,
      outputStructCnt,
    );
  }

  late final _IOConnectCallAsyncMethodPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              mach_port_t,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('IOConnectCallAsyncMethod');
  late final _IOConnectCallAsyncMethod =
      _IOConnectCallAsyncMethodPtr.asFunction<
          int Function(
              int,
              int,
              int,
              ffi.Pointer<ffi.Uint64>,
              int,
              ffi.Pointer<ffi.Uint64>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();

  int IOConnectCallStructMethod(
    int connection,
    int selector,
    ffi.Pointer<ffi.Void> inputStruct,
    int inputStructCnt,
    ffi.Pointer<ffi.Void> outputStruct,
    ffi.Pointer<ffi.Size> outputStructCnt,
  ) {
    return _IOConnectCallStructMethod(
      connection,
      selector,
      inputStruct,
      inputStructCnt,
      outputStruct,
      outputStructCnt,
    );
  }

  late final _IOConnectCallStructMethodPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('IOConnectCallStructMethod');
  late final _IOConnectCallStructMethod =
      _IOConnectCallStructMethodPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int IOConnectCallAsyncStructMethod(
    int connection,
    int selector,
    int wake_port,
    ffi.Pointer<ffi.Uint64> reference,
    int referenceCnt,
    ffi.Pointer<ffi.Void> inputStruct,
    int inputStructCnt,
    ffi.Pointer<ffi.Void> outputStruct,
    ffi.Pointer<ffi.Size> outputStructCnt,
  ) {
    return _IOConnectCallAsyncStructMethod(
      connection,
      selector,
      wake_port,
      reference,
      referenceCnt,
      inputStruct,
      inputStructCnt,
      outputStruct,
      outputStructCnt,
    );
  }

  late final _IOConnectCallAsyncStructMethodPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              mach_port_t,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('IOConnectCallAsyncStructMethod');
  late final _IOConnectCallAsyncStructMethod =
      _IOConnectCallAsyncStructMethodPtr.asFunction<
          int Function(
              int,
              int,
              int,
              ffi.Pointer<ffi.Uint64>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();

  int IOConnectCallScalarMethod(
    int connection,
    int selector,
    ffi.Pointer<ffi.Uint64> input,
    int inputCnt,
    ffi.Pointer<ffi.Uint64> output,
    ffi.Pointer<ffi.Uint32> outputCnt,
  ) {
    return _IOConnectCallScalarMethod(
      connection,
      selector,
      input,
      inputCnt,
      output,
      outputCnt,
    );
  }

  late final _IOConnectCallScalarMethodPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint32>)>>('IOConnectCallScalarMethod');
  late final _IOConnectCallScalarMethod =
      _IOConnectCallScalarMethodPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Uint64>, int,
              ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint32>)>();

  int IOConnectCallAsyncScalarMethod(
    int connection,
    int selector,
    int wake_port,
    ffi.Pointer<ffi.Uint64> reference,
    int referenceCnt,
    ffi.Pointer<ffi.Uint64> input,
    int inputCnt,
    ffi.Pointer<ffi.Uint64> output,
    ffi.Pointer<ffi.Uint32> outputCnt,
  ) {
    return _IOConnectCallAsyncScalarMethod(
      connection,
      selector,
      wake_port,
      reference,
      referenceCnt,
      input,
      inputCnt,
      output,
      outputCnt,
    );
  }

  late final _IOConnectCallAsyncScalarMethodPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              mach_port_t,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint32>)>>('IOConnectCallAsyncScalarMethod');
  late final _IOConnectCallAsyncScalarMethod =
      _IOConnectCallAsyncScalarMethodPtr.asFunction<
          int Function(
              int,
              int,
              int,
              ffi.Pointer<ffi.Uint64>,
              int,
              ffi.Pointer<ffi.Uint64>,
              int,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint32>)>();

  int IOConnectTrap0(
    int connect,
    int index,
  ) {
    return _IOConnectTrap0(
      connect,
      index,
    );
  }

  late final _IOConnectTrap0Ptr = _lookup<
          ffi.NativeFunction<kern_return_t Function(io_connect_t, ffi.Uint32)>>(
      'IOConnectTrap0');
  late final _IOConnectTrap0 =
      _IOConnectTrap0Ptr.asFunction<int Function(int, int)>();

  int IOConnectTrap1(
    int connect,
    int index,
    int p1,
  ) {
    return _IOConnectTrap1(
      connect,
      index,
      p1,
    );
  }

  late final _IOConnectTrap1Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_connect_t, ffi.Uint32, uintptr_t)>>('IOConnectTrap1');
  late final _IOConnectTrap1 =
      _IOConnectTrap1Ptr.asFunction<int Function(int, int, int)>();

  int IOConnectTrap2(
    int connect,
    int index,
    int p1,
    int p2,
  ) {
    return _IOConnectTrap2(
      connect,
      index,
      p1,
      p2,
    );
  }

  late final _IOConnectTrap2Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, uintptr_t,
              uintptr_t)>>('IOConnectTrap2');
  late final _IOConnectTrap2 =
      _IOConnectTrap2Ptr.asFunction<int Function(int, int, int, int)>();

  int IOConnectTrap3(
    int connect,
    int index,
    int p1,
    int p2,
    int p3,
  ) {
    return _IOConnectTrap3(
      connect,
      index,
      p1,
      p2,
      p3,
    );
  }

  late final _IOConnectTrap3Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, uintptr_t, uintptr_t,
              uintptr_t)>>('IOConnectTrap3');
  late final _IOConnectTrap3 =
      _IOConnectTrap3Ptr.asFunction<int Function(int, int, int, int, int)>();

  int IOConnectTrap4(
    int connect,
    int index,
    int p1,
    int p2,
    int p3,
    int p4,
  ) {
    return _IOConnectTrap4(
      connect,
      index,
      p1,
      p2,
      p3,
      p4,
    );
  }

  late final _IOConnectTrap4Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, uintptr_t, uintptr_t,
              uintptr_t, uintptr_t)>>('IOConnectTrap4');
  late final _IOConnectTrap4 = _IOConnectTrap4Ptr.asFunction<
      int Function(int, int, int, int, int, int)>();

  int IOConnectTrap5(
    int connect,
    int index,
    int p1,
    int p2,
    int p3,
    int p4,
    int p5,
  ) {
    return _IOConnectTrap5(
      connect,
      index,
      p1,
      p2,
      p3,
      p4,
      p5,
    );
  }

  late final _IOConnectTrap5Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, uintptr_t, uintptr_t,
              uintptr_t, uintptr_t, uintptr_t)>>('IOConnectTrap5');
  late final _IOConnectTrap5 = _IOConnectTrap5Ptr.asFunction<
      int Function(int, int, int, int, int, int, int)>();

  int IOConnectTrap6(
    int connect,
    int index,
    int p1,
    int p2,
    int p3,
    int p4,
    int p5,
    int p6,
  ) {
    return _IOConnectTrap6(
      connect,
      index,
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
    );
  }

  late final _IOConnectTrap6Ptr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_connect_t, ffi.Uint32, uintptr_t, uintptr_t,
              uintptr_t, uintptr_t, uintptr_t, uintptr_t)>>('IOConnectTrap6');
  late final _IOConnectTrap6 = _IOConnectTrap6Ptr.asFunction<
      int Function(int, int, int, int, int, int, int, int)>();

  int IOConnectAddClient(
    int connect,
    int client,
  ) {
    return _IOConnectAddClient(
      connect,
      client,
    );
  }

  late final _IOConnectAddClientPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_connect_t, io_connect_t)>>('IOConnectAddClient');
  late final _IOConnectAddClient =
      _IOConnectAddClientPtr.asFunction<int Function(int, int)>();

  int IORegistryGetRootEntry(
    int mainPort,
  ) {
    return _IORegistryGetRootEntry(
      mainPort,
    );
  }

  late final _IORegistryGetRootEntryPtr =
      _lookup<ffi.NativeFunction<io_registry_entry_t Function(mach_port_t)>>(
          'IORegistryGetRootEntry');
  late final _IORegistryGetRootEntry =
      _IORegistryGetRootEntryPtr.asFunction<int Function(int)>();

  int IORegistryEntryFromPath(
    int mainPort,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _IORegistryEntryFromPath(
      mainPort,
      path,
    );
  }

  late final _IORegistryEntryFromPathPtr = _lookup<
      ffi.NativeFunction<
          io_registry_entry_t Function(
              mach_port_t, ffi.Pointer<ffi.Char>)>>('IORegistryEntryFromPath');
  late final _IORegistryEntryFromPath = _IORegistryEntryFromPathPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  int IORegistryEntryCopyFromPath(
    int mainPort,
    CFStringRef path,
  ) {
    return _IORegistryEntryCopyFromPath(
      mainPort,
      path,
    );
  }

  late final _IORegistryEntryCopyFromPathPtr = _lookup<
      ffi.NativeFunction<
          io_registry_entry_t Function(
              mach_port_t, CFStringRef)>>('IORegistryEntryCopyFromPath');
  late final _IORegistryEntryCopyFromPath = _IORegistryEntryCopyFromPathPtr
      .asFunction<int Function(int, CFStringRef)>();

  int IORegistryCreateIterator(
    int mainPort,
    ffi.Pointer<ffi.Char> plane,
    int options,
    ffi.Pointer<io_iterator_t> iterator,
  ) {
    return _IORegistryCreateIterator(
      mainPort,
      plane,
      options,
      iterator,
    );
  }

  late final _IORegistryCreateIteratorPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Pointer<ffi.Char>,
              IOOptionBits,
              ffi.Pointer<io_iterator_t>)>>('IORegistryCreateIterator');
  late final _IORegistryCreateIterator =
      _IORegistryCreateIteratorPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<io_iterator_t>)>();

  int IORegistryEntryCreateIterator(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    int options,
    ffi.Pointer<io_iterator_t> iterator,
  ) {
    return _IORegistryEntryCreateIterator(
      entry,
      plane,
      options,
      iterator,
    );
  }

  late final _IORegistryEntryCreateIteratorPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_registry_entry_t,
              ffi.Pointer<ffi.Char>,
              IOOptionBits,
              ffi.Pointer<io_iterator_t>)>>('IORegistryEntryCreateIterator');
  late final _IORegistryEntryCreateIterator =
      _IORegistryEntryCreateIteratorPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<io_iterator_t>)>();

  int IORegistryIteratorEnterEntry(
    int iterator,
  ) {
    return _IORegistryIteratorEnterEntry(
      iterator,
    );
  }

  late final _IORegistryIteratorEnterEntryPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_iterator_t)>>(
          'IORegistryIteratorEnterEntry');
  late final _IORegistryIteratorEnterEntry =
      _IORegistryIteratorEnterEntryPtr.asFunction<int Function(int)>();

  int IORegistryIteratorExitEntry(
    int iterator,
  ) {
    return _IORegistryIteratorExitEntry(
      iterator,
    );
  }

  late final _IORegistryIteratorExitEntryPtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_iterator_t)>>(
          'IORegistryIteratorExitEntry');
  late final _IORegistryIteratorExitEntry =
      _IORegistryIteratorExitEntryPtr.asFunction<int Function(int)>();

  int IORegistryEntryGetName(
    int entry,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _IORegistryEntryGetName(
      entry,
      name,
    );
  }

  late final _IORegistryEntryGetNamePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t,
              ffi.Pointer<ffi.Char>)>>('IORegistryEntryGetName');
  late final _IORegistryEntryGetName = _IORegistryEntryGetNamePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  int IORegistryEntryGetNameInPlane(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _IORegistryEntryGetNameInPlane(
      entry,
      plane,
      name,
    );
  }

  late final _IORegistryEntryGetNameInPlanePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IORegistryEntryGetNameInPlane');
  late final _IORegistryEntryGetNameInPlane =
      _IORegistryEntryGetNameInPlanePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int IORegistryEntryGetLocationInPlane(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<ffi.Char> location,
  ) {
    return _IORegistryEntryGetLocationInPlane(
      entry,
      plane,
      location,
    );
  }

  late final _IORegistryEntryGetLocationInPlanePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IORegistryEntryGetLocationInPlane');
  late final _IORegistryEntryGetLocationInPlane =
      _IORegistryEntryGetLocationInPlanePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int IORegistryEntryGetPath(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _IORegistryEntryGetPath(
      entry,
      plane,
      path,
    );
  }

  late final _IORegistryEntryGetPathPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IORegistryEntryGetPath');
  late final _IORegistryEntryGetPath = _IORegistryEntryGetPathPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CFStringRef IORegistryEntryCopyPath(
    int entry,
    ffi.Pointer<ffi.Char> plane,
  ) {
    return _IORegistryEntryCopyPath(
      entry,
      plane,
    );
  }

  late final _IORegistryEntryCopyPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(io_registry_entry_t,
              ffi.Pointer<ffi.Char>)>>('IORegistryEntryCopyPath');
  late final _IORegistryEntryCopyPath = _IORegistryEntryCopyPathPtr.asFunction<
      CFStringRef Function(int, ffi.Pointer<ffi.Char>)>();

  int IORegistryEntryGetRegistryEntryID(
    int entry,
    ffi.Pointer<ffi.Uint64> entryID,
  ) {
    return _IORegistryEntryGetRegistryEntryID(
      entry,
      entryID,
    );
  }

  late final _IORegistryEntryGetRegistryEntryIDPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t,
              ffi.Pointer<ffi.Uint64>)>>('IORegistryEntryGetRegistryEntryID');
  late final _IORegistryEntryGetRegistryEntryID =
      _IORegistryEntryGetRegistryEntryIDPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Uint64>)>();

  int IORegistryEntryCreateCFProperties(
    int entry,
    ffi.Pointer<CFMutableDictionaryRef> properties,
    CFAllocatorRef allocator,
    int options,
  ) {
    return _IORegistryEntryCreateCFProperties(
      entry,
      properties,
      allocator,
      options,
    );
  }

  late final _IORegistryEntryCreateCFPropertiesPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_registry_entry_t,
              ffi.Pointer<CFMutableDictionaryRef>,
              CFAllocatorRef,
              IOOptionBits)>>('IORegistryEntryCreateCFProperties');
  late final _IORegistryEntryCreateCFProperties =
      _IORegistryEntryCreateCFPropertiesPtr.asFunction<
          int Function(
              int, ffi.Pointer<CFMutableDictionaryRef>, CFAllocatorRef, int)>();

  CFTypeRef IORegistryEntryCreateCFProperty(
    int entry,
    CFStringRef key,
    CFAllocatorRef allocator,
    int options,
  ) {
    return _IORegistryEntryCreateCFProperty(
      entry,
      key,
      allocator,
      options,
    );
  }

  late final _IORegistryEntryCreateCFPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(io_registry_entry_t, CFStringRef, CFAllocatorRef,
              IOOptionBits)>>('IORegistryEntryCreateCFProperty');
  late final _IORegistryEntryCreateCFProperty =
      _IORegistryEntryCreateCFPropertyPtr.asFunction<
          CFTypeRef Function(int, CFStringRef, CFAllocatorRef, int)>();

  CFTypeRef IORegistryEntrySearchCFProperty(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    CFStringRef key,
    CFAllocatorRef allocator,
    int options,
  ) {
    return _IORegistryEntrySearchCFProperty(
      entry,
      plane,
      key,
      allocator,
      options,
    );
  }

  late final _IORegistryEntrySearchCFPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(
              io_registry_entry_t,
              ffi.Pointer<ffi.Char>,
              CFStringRef,
              CFAllocatorRef,
              IOOptionBits)>>('IORegistryEntrySearchCFProperty');
  late final _IORegistryEntrySearchCFProperty =
      _IORegistryEntrySearchCFPropertyPtr.asFunction<
          CFTypeRef Function(
              int, ffi.Pointer<ffi.Char>, CFStringRef, CFAllocatorRef, int)>();

  int IORegistryEntryGetProperty(
    int entry,
    ffi.Pointer<ffi.Char> propertyName,
    ffi.Pointer<ffi.Char> buffer,
    ffi.Pointer<ffi.Uint32> size,
  ) {
    return _IORegistryEntryGetProperty(
      entry,
      propertyName,
      buffer,
      size,
    );
  }

  late final _IORegistryEntryGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              io_registry_entry_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint32>)>>('IORegistryEntryGetProperty');
  late final _IORegistryEntryGetProperty =
      _IORegistryEntryGetPropertyPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint32>)>();

  int IORegistryEntrySetCFProperties(
    int entry,
    CFTypeRef properties,
  ) {
    return _IORegistryEntrySetCFProperties(
      entry,
      properties,
    );
  }

  late final _IORegistryEntrySetCFPropertiesPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t,
              CFTypeRef)>>('IORegistryEntrySetCFProperties');
  late final _IORegistryEntrySetCFProperties =
      _IORegistryEntrySetCFPropertiesPtr.asFunction<
          int Function(int, CFTypeRef)>();

  int IORegistryEntrySetCFProperty(
    int entry,
    CFStringRef propertyName,
    CFTypeRef property,
  ) {
    return _IORegistryEntrySetCFProperty(
      entry,
      propertyName,
      property,
    );
  }

  late final _IORegistryEntrySetCFPropertyPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, CFStringRef,
              CFTypeRef)>>('IORegistryEntrySetCFProperty');
  late final _IORegistryEntrySetCFProperty = _IORegistryEntrySetCFPropertyPtr
      .asFunction<int Function(int, CFStringRef, CFTypeRef)>();

  int IORegistryEntryGetChildIterator(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<io_iterator_t> iterator,
  ) {
    return _IORegistryEntryGetChildIterator(
      entry,
      plane,
      iterator,
    );
  }

  late final _IORegistryEntryGetChildIteratorPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<io_iterator_t>)>>('IORegistryEntryGetChildIterator');
  late final _IORegistryEntryGetChildIterator =
      _IORegistryEntryGetChildIteratorPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<io_iterator_t>)>();

  int IORegistryEntryGetChildEntry(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<io_registry_entry_t> child,
  ) {
    return _IORegistryEntryGetChildEntry(
      entry,
      plane,
      child,
    );
  }

  late final _IORegistryEntryGetChildEntryPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<io_registry_entry_t>)>>(
      'IORegistryEntryGetChildEntry');
  late final _IORegistryEntryGetChildEntry =
      _IORegistryEntryGetChildEntryPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<io_registry_entry_t>)>();

  int IORegistryEntryGetParentIterator(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<io_iterator_t> iterator,
  ) {
    return _IORegistryEntryGetParentIterator(
      entry,
      plane,
      iterator,
    );
  }

  late final _IORegistryEntryGetParentIteratorPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<io_iterator_t>)>>('IORegistryEntryGetParentIterator');
  late final _IORegistryEntryGetParentIterator =
      _IORegistryEntryGetParentIteratorPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<io_iterator_t>)>();

  int IORegistryEntryGetParentEntry(
    int entry,
    ffi.Pointer<ffi.Char> plane,
    ffi.Pointer<io_registry_entry_t> parent,
  ) {
    return _IORegistryEntryGetParentEntry(
      entry,
      plane,
      parent,
    );
  }

  late final _IORegistryEntryGetParentEntryPtr = _lookup<
          ffi.NativeFunction<
              kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<io_registry_entry_t>)>>(
      'IORegistryEntryGetParentEntry');
  late final _IORegistryEntryGetParentEntry =
      _IORegistryEntryGetParentEntryPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<io_registry_entry_t>)>();

  int IORegistryEntryInPlane(
    int entry,
    ffi.Pointer<ffi.Char> plane,
  ) {
    return _IORegistryEntryInPlane(
      entry,
      plane,
    );
  }

  late final _IORegistryEntryInPlanePtr = _lookup<
      ffi.NativeFunction<
          boolean_t Function(io_registry_entry_t,
              ffi.Pointer<ffi.Char>)>>('IORegistryEntryInPlane');
  late final _IORegistryEntryInPlane = _IORegistryEntryInPlanePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  CFMutableDictionaryRef IOServiceMatching(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _IOServiceMatching(
      name,
    );
  }

  late final _IOServiceMatchingPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(
              ffi.Pointer<ffi.Char>)>>('IOServiceMatching');
  late final _IOServiceMatching = _IOServiceMatchingPtr.asFunction<
      CFMutableDictionaryRef Function(ffi.Pointer<ffi.Char>)>();

  CFMutableDictionaryRef IOServiceNameMatching(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _IOServiceNameMatching(
      name,
    );
  }

  late final _IOServiceNameMatchingPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(
              ffi.Pointer<ffi.Char>)>>('IOServiceNameMatching');
  late final _IOServiceNameMatching = _IOServiceNameMatchingPtr.asFunction<
      CFMutableDictionaryRef Function(ffi.Pointer<ffi.Char>)>();

  CFMutableDictionaryRef IOBSDNameMatching(
    int mainPort,
    int options,
    ffi.Pointer<ffi.Char> bsdName,
  ) {
    return _IOBSDNameMatching(
      mainPort,
      options,
      bsdName,
    );
  }

  late final _IOBSDNameMatchingPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(mach_port_t, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('IOBSDNameMatching');
  late final _IOBSDNameMatching = _IOBSDNameMatchingPtr.asFunction<
      CFMutableDictionaryRef Function(int, int, ffi.Pointer<ffi.Char>)>();

  CFMutableDictionaryRef IOOpenFirmwarePathMatching(
    int mainPort,
    int options,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _IOOpenFirmwarePathMatching(
      mainPort,
      options,
      path,
    );
  }

  late final _IOOpenFirmwarePathMatchingPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(mach_port_t, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('IOOpenFirmwarePathMatching');
  late final _IOOpenFirmwarePathMatching =
      _IOOpenFirmwarePathMatchingPtr.asFunction<
          CFMutableDictionaryRef Function(int, int, ffi.Pointer<ffi.Char>)>();

  CFMutableDictionaryRef IORegistryEntryIDMatching(
    int entryID,
  ) {
    return _IORegistryEntryIDMatching(
      entryID,
    );
  }

  late final _IORegistryEntryIDMatchingPtr =
      _lookup<ffi.NativeFunction<CFMutableDictionaryRef Function(ffi.Uint64)>>(
          'IORegistryEntryIDMatching');
  late final _IORegistryEntryIDMatching = _IORegistryEntryIDMatchingPtr
      .asFunction<CFMutableDictionaryRef Function(int)>();

  int IOServiceOFPathToBSDName(
    int mainPort,
    ffi.Pointer<ffi.Char> openFirmwarePath,
    ffi.Pointer<ffi.Char> bsdName,
  ) {
    return _IOServiceOFPathToBSDName(
      mainPort,
      openFirmwarePath,
      bsdName,
    );
  }

  late final _IOServiceOFPathToBSDNamePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IOServiceOFPathToBSDName');
  late final _IOServiceOFPathToBSDName =
      _IOServiceOFPathToBSDNamePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int OSGetNotificationFromMessage(
    ffi.Pointer<mach_msg_header_t> msg,
    int index,
    ffi.Pointer<ffi.Uint32> type,
    ffi.Pointer<uintptr_t> reference,
    ffi.Pointer<ffi.Pointer<ffi.Void>> content,
    ffi.Pointer<vm_size_t> size,
  ) {
    return _OSGetNotificationFromMessage(
      msg,
      index,
      type,
      reference,
      content,
      size,
    );
  }

  late final _OSGetNotificationFromMessagePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<uintptr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<vm_size_t>)>>('OSGetNotificationFromMessage');
  late final _OSGetNotificationFromMessage =
      _OSGetNotificationFromMessagePtr.asFunction<
          int Function(
              ffi.Pointer<mach_msg_header_t>,
              int,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<uintptr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<vm_size_t>)>();

  int IOCatalogueSendData(
    int mainPort,
    int flag,
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _IOCatalogueSendData(
      mainPort,
      flag,
      buffer,
      size,
    );
  }

  late final _IOCatalogueSendDataPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_t, ffi.Uint32, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('IOCatalogueSendData');
  late final _IOCatalogueSendData = _IOCatalogueSendDataPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  int IOCatalogueTerminate(
    int mainPort,
    int flag,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _IOCatalogueTerminate(
      mainPort,
      flag,
      description,
    );
  }

  late final _IOCatalogueTerminatePtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(mach_port_t, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('IOCatalogueTerminate');
  late final _IOCatalogueTerminate = _IOCatalogueTerminatePtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int IOCatalogueGetData(
    int mainPort,
    int flag,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buffer,
    ffi.Pointer<ffi.Uint32> size,
  ) {
    return _IOCatalogueGetData(
      mainPort,
      flag,
      buffer,
      size,
    );
  }

  late final _IOCatalogueGetDataPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Uint32>)>>('IOCatalogueGetData');
  late final _IOCatalogueGetData = _IOCatalogueGetDataPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Uint32>)>();

  int IOCatalogueModuleLoaded(
    int mainPort,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _IOCatalogueModuleLoaded(
      mainPort,
      name,
    );
  }

  late final _IOCatalogueModuleLoadedPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(
              mach_port_t, ffi.Pointer<ffi.Char>)>>('IOCatalogueModuleLoaded');
  late final _IOCatalogueModuleLoaded = _IOCatalogueModuleLoadedPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  int IOCatalogueReset(
    int mainPort,
    int flag,
  ) {
    return _IOCatalogueReset(
      mainPort,
      flag,
    );
  }

  late final _IOCatalogueResetPtr = _lookup<
          ffi.NativeFunction<kern_return_t Function(mach_port_t, ffi.Uint32)>>(
      'IOCatalogueReset');
  late final _IOCatalogueReset =
      _IOCatalogueResetPtr.asFunction<int Function(int, int)>();

  int hm_IOKIT_strtoul(
    ffi.Pointer<ffi.Char> str,
    int size,
    int base,
  ) {
    return _hm_IOKIT_strtoul(
      str,
      size,
      base,
    );
  }

  late final _hm_IOKIT_strtoulPtr = _lookup<
      ffi.NativeFunction<
          UInt32 Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('hm_IOKIT_strtoul');
  late final _hm_IOKIT_strtoul = _hm_IOKIT_strtoulPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  void hm_IOKIT_ultostr(
    ffi.Pointer<ffi.Char> str,
    int val,
  ) {
    return _hm_IOKIT_ultostr(
      str,
      val,
    );
  }

  late final _hm_IOKIT_ultostrPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, UInt32)>>(
      'hm_IOKIT_ultostr');
  late final _hm_IOKIT_ultostr = _hm_IOKIT_ultostrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  int hm_IOKIT_SMCOpen(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<io_connect_t> conn,
  ) {
    return _hm_IOKIT_SMCOpen(
      hashcat_ctx,
      conn,
    );
  }

  late final _hm_IOKIT_SMCOpenPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<io_connect_t>)>>('hm_IOKIT_SMCOpen');
  late final _hm_IOKIT_SMCOpen = _hm_IOKIT_SMCOpenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<io_connect_t>)>();

  int hm_IOKIT_SMCClose(
    int conn,
  ) {
    return _hm_IOKIT_SMCClose(
      conn,
    );
  }

  late final _hm_IOKIT_SMCClosePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_connect_t)>>(
          'hm_IOKIT_SMCClose');
  late final _hm_IOKIT_SMCClose =
      _hm_IOKIT_SMCClosePtr.asFunction<int Function(int)>();

  int hm_IOKIT_SMCCall(
    int index,
    ffi.Pointer<SMCKeyData_t> inData,
    ffi.Pointer<SMCKeyData_t> outData,
    int conn,
  ) {
    return _hm_IOKIT_SMCCall(
      index,
      inData,
      outData,
      conn,
    );
  }

  late final _hm_IOKIT_SMCCallPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(ffi.Int, ffi.Pointer<SMCKeyData_t>,
              ffi.Pointer<SMCKeyData_t>, io_connect_t)>>('hm_IOKIT_SMCCall');
  late final _hm_IOKIT_SMCCall = _hm_IOKIT_SMCCallPtr.asFunction<
      int Function(
          int, ffi.Pointer<SMCKeyData_t>, ffi.Pointer<SMCKeyData_t>, int)>();

  int hm_IOKIT_SMCReadKey(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<SMCVal_t> val,
    int conn,
  ) {
    return _hm_IOKIT_SMCReadKey(
      key,
      val,
      conn,
    );
  }

  late final _hm_IOKIT_SMCReadKeyPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<SMCVal_t>,
              io_connect_t)>>('hm_IOKIT_SMCReadKey');
  late final _hm_IOKIT_SMCReadKey = _hm_IOKIT_SMCReadKeyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<SMCVal_t>, int)>();

  int hm_IOKIT_SMCGetSensorGraphicHot(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _hm_IOKIT_SMCGetSensorGraphicHot(
      hashcat_ctx,
    );
  }

  late final _hm_IOKIT_SMCGetSensorGraphicHotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'hm_IOKIT_SMCGetSensorGraphicHot');
  late final _hm_IOKIT_SMCGetSensorGraphicHot =
      _hm_IOKIT_SMCGetSensorGraphicHotPtr
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int hm_IOKIT_SMCGetTemperature(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Double> temp,
  ) {
    return _hm_IOKIT_SMCGetTemperature(
      hashcat_ctx,
      key,
      temp,
    );
  }

  late final _hm_IOKIT_SMCGetTemperaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('hm_IOKIT_SMCGetTemperature');
  late final _hm_IOKIT_SMCGetTemperature =
      _hm_IOKIT_SMCGetTemperaturePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>();

  bool hm_IOKIT_SMCGetFanRPM(
    ffi.Pointer<ffi.Char> key,
    int conn,
    ffi.Pointer<ffi.Float> ret,
  ) {
    return _hm_IOKIT_SMCGetFanRPM(
      key,
      conn,
      ret,
    );
  }

  late final _hm_IOKIT_SMCGetFanRPMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, io_connect_t,
              ffi.Pointer<ffi.Float>)>>('hm_IOKIT_SMCGetFanRPM');
  late final _hm_IOKIT_SMCGetFanRPM = _hm_IOKIT_SMCGetFanRPMPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Float>)>();

  int hm_IOKIT_get_fan_speed_current(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Char> fan_speed_buf,
  ) {
    return _hm_IOKIT_get_fan_speed_current(
      hashcat_ctx,
      fan_speed_buf,
    );
  }

  late final _hm_IOKIT_get_fan_speed_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('hm_IOKIT_get_fan_speed_current');
  late final _hm_IOKIT_get_fan_speed_current =
      _hm_IOKIT_get_fan_speed_currentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int hm_IOKIT_get_utilization_current(
    ffi.Pointer<ffi.Void> hashcat_ctx,
    ffi.Pointer<ffi.Int> utilization,
  ) {
    return _hm_IOKIT_get_utilization_current(
      hashcat_ctx,
      utilization,
    );
  }

  late final _hm_IOKIT_get_utilization_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('hm_IOKIT_get_utilization_current');
  late final _hm_IOKIT_get_utilization_current =
      _hm_IOKIT_get_utilization_currentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  bool iokit_init(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _iokit_init(
      hashcat_ctx,
    );
  }

  late final _iokit_initPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'iokit_init');
  late final _iokit_init =
      _iokit_initPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool iokit_close(
    ffi.Pointer<ffi.Void> hashcat_ctx,
  ) {
    return _iokit_close(
      hashcat_ctx,
    );
  }

  late final _iokit_closePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'iokit_close');
  late final _iokit_close =
      _iokit_closePtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  void main_log_clear_line(
    int prev_len,
    ffi.Pointer<FILE> fp,
  ) {
    return _main_log_clear_line(
      prev_len,
      fp,
    );
  }

  late final _main_log_clear_linePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Size, ffi.Pointer<FILE>)>>(
      'main_log_clear_line');
  late final _main_log_clear_line = _main_log_clear_linePtr
      .asFunction<void Function(int, ffi.Pointer<FILE>)>();

  void main_log(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<FILE> fp,
    int loglevel,
  ) {
    return _main_log(
      hashcat_ctx,
      fp,
      loglevel,
    );
  }

  late final _main_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<FILE>,
              ffi.Int)>>('main_log');
  late final _main_log = _main_logPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<FILE>, int)>();

  void main_log_advice(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_log_advice(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_log_advicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_log_advice');
  late final _main_log_advice = _main_log_advicePtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_log_info(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_log_info(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_log_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_log_info');
  late final _main_log_info = _main_log_infoPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_log_warning(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_log_warning(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_log_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_log_warning');
  late final _main_log_warning = _main_log_warningPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_log_error(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_log_error(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_log_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_log_error');
  late final _main_log_error = _main_log_errorPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_outerloop_starting(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_outerloop_starting(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_outerloop_startingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_outerloop_starting');
  late final _main_outerloop_starting = _main_outerloop_startingPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_outerloop_finished(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_outerloop_finished(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_outerloop_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_outerloop_finished');
  late final _main_outerloop_finished = _main_outerloop_finishedPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_cracker_starting(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_cracker_starting(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_cracker_startingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_cracker_starting');
  late final _main_cracker_starting = _main_cracker_startingPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_cracker_finished(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_cracker_finished(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_cracker_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_cracker_finished');
  late final _main_cracker_finished = _main_cracker_finishedPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_cracker_hash_cracked(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_cracker_hash_cracked(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_cracker_hash_crackedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_cracker_hash_cracked');
  late final _main_cracker_hash_cracked =
      _main_cracker_hash_crackedPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_calculated_words_base(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_calculated_words_base(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_calculated_words_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_calculated_words_base');
  late final _main_calculated_words_base =
      _main_calculated_words_basePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_potfile_remove_parse_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_potfile_remove_parse_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_potfile_remove_parse_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_potfile_remove_parse_pre');
  late final _main_potfile_remove_parse_pre =
      _main_potfile_remove_parse_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_potfile_remove_parse_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_potfile_remove_parse_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_potfile_remove_parse_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_potfile_remove_parse_post');
  late final _main_potfile_remove_parse_post =
      _main_potfile_remove_parse_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_potfile_hash_show(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_potfile_hash_show(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_potfile_hash_showPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_potfile_hash_show');
  late final _main_potfile_hash_show = _main_potfile_hash_showPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_potfile_hash_left(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_potfile_hash_left(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_potfile_hash_leftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_potfile_hash_left');
  late final _main_potfile_hash_left = _main_potfile_hash_leftPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_potfile_num_cracked(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_potfile_num_cracked(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_potfile_num_crackedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_potfile_num_cracked');
  late final _main_potfile_num_cracked =
      _main_potfile_num_crackedPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_potfile_all_cracked(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_potfile_all_cracked(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_potfile_all_crackedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_potfile_all_cracked');
  late final _main_potfile_all_cracked =
      _main_potfile_all_crackedPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_outerloop_mainscreen(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_outerloop_mainscreen(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_outerloop_mainscreenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_outerloop_mainscreen');
  late final _main_outerloop_mainscreen =
      _main_outerloop_mainscreenPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_backend_session_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_backend_session_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_backend_session_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_backend_session_pre');
  late final _main_backend_session_pre =
      _main_backend_session_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_backend_session_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_backend_session_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_backend_session_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_backend_session_post');
  late final _main_backend_session_post =
      _main_backend_session_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_backend_session_hostmem(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_backend_session_hostmem(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_backend_session_hostmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_backend_session_hostmem');
  late final _main_backend_session_hostmem =
      _main_backend_session_hostmemPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_backend_device_init_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_backend_device_init_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_backend_device_init_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_backend_device_init_pre');
  late final _main_backend_device_init_pre =
      _main_backend_device_init_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_backend_device_init_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_backend_device_init_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_backend_device_init_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_backend_device_init_post');
  late final _main_backend_device_init_post =
      _main_backend_device_init_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_bitmap_init_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_bitmap_init_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_bitmap_init_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_bitmap_init_pre');
  late final _main_bitmap_init_pre = _main_bitmap_init_prePtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_bitmap_init_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_bitmap_init_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_bitmap_init_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_bitmap_init_post');
  late final _main_bitmap_init_post = _main_bitmap_init_postPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_bitmap_final_overflow(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_bitmap_final_overflow(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_bitmap_final_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_bitmap_final_overflow');
  late final _main_bitmap_final_overflow =
      _main_bitmap_final_overflowPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_set_kernel_power_final(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_set_kernel_power_final(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_set_kernel_power_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_set_kernel_power_final');
  late final _main_set_kernel_power_final =
      _main_set_kernel_power_finalPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_throttle1(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_throttle1(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_throttle1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_throttle1');
  late final _main_monitor_throttle1 = _main_monitor_throttle1Ptr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_throttle2(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_throttle2(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_throttle2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_throttle2');
  late final _main_monitor_throttle2 = _main_monitor_throttle2Ptr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_throttle3(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_throttle3(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_throttle3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_throttle3');
  late final _main_monitor_throttle3 = _main_monitor_throttle3Ptr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_performance_hint(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_performance_hint(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_performance_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_performance_hint');
  late final _main_monitor_performance_hint =
      _main_monitor_performance_hintPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_noinput_hint(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_noinput_hint(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_noinput_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_noinput_hint');
  late final _main_monitor_noinput_hint =
      _main_monitor_noinput_hintPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_noinput_abort(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_noinput_abort(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_noinput_abortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_noinput_abort');
  late final _main_monitor_noinput_abort =
      _main_monitor_noinput_abortPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_temp_abort(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_temp_abort(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_temp_abortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_temp_abort');
  late final _main_monitor_temp_abort = _main_monitor_temp_abortPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_runtime_limit(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_runtime_limit(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_runtime_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_runtime_limit');
  late final _main_monitor_runtime_limit =
      _main_monitor_runtime_limitPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_monitor_status_refresh(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_monitor_status_refresh(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_monitor_status_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_monitor_status_refresh');
  late final _main_monitor_status_refresh =
      _main_monitor_status_refreshPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_wordlist_cache_hit(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_wordlist_cache_hit(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_wordlist_cache_hitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_wordlist_cache_hit');
  late final _main_wordlist_cache_hit = _main_wordlist_cache_hitPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_wordlist_cache_generate(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_wordlist_cache_generate(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_wordlist_cache_generatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_wordlist_cache_generate');
  late final _main_wordlist_cache_generate =
      _main_wordlist_cache_generatePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashconfig_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashconfig_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashconfig_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashconfig_pre');
  late final _main_hashconfig_pre = _main_hashconfig_prePtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashconfig_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashconfig_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashconfig_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashconfig_post');
  late final _main_hashconfig_post = _main_hashconfig_postPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_count_lines_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_count_lines_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_count_lines_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_count_lines_pre');
  late final _main_hashlist_count_lines_pre =
      _main_hashlist_count_lines_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_count_lines_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_count_lines_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_count_lines_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_count_lines_post');
  late final _main_hashlist_count_lines_post =
      _main_hashlist_count_lines_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_parse_hash(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_parse_hash(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_parse_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_parse_hash');
  late final _main_hashlist_parse_hash =
      _main_hashlist_parse_hashPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_sort_hash_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_sort_hash_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_sort_hash_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_sort_hash_pre');
  late final _main_hashlist_sort_hash_pre =
      _main_hashlist_sort_hash_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_sort_hash_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_sort_hash_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_sort_hash_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_sort_hash_post');
  late final _main_hashlist_sort_hash_post =
      _main_hashlist_sort_hash_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_unique_hash_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_unique_hash_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_unique_hash_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_unique_hash_pre');
  late final _main_hashlist_unique_hash_pre =
      _main_hashlist_unique_hash_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_unique_hash_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_unique_hash_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_unique_hash_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_unique_hash_post');
  late final _main_hashlist_unique_hash_post =
      _main_hashlist_unique_hash_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_sort_salt_pre(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_sort_salt_pre(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_sort_salt_prePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_sort_salt_pre');
  late final _main_hashlist_sort_salt_pre =
      _main_hashlist_sort_salt_prePtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_hashlist_sort_salt_post(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_hashlist_sort_salt_post(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_hashlist_sort_salt_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_hashlist_sort_salt_post');
  late final _main_hashlist_sort_salt_post =
      _main_hashlist_sort_salt_postPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_autodetect_starting(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_autodetect_starting(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_autodetect_startingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_autodetect_starting');
  late final _main_autodetect_starting =
      _main_autodetect_startingPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_autodetect_finished(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_autodetect_finished(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_autodetect_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_autodetect_finished');
  late final _main_autodetect_finished =
      _main_autodetect_finishedPtr.asFunction<
          void Function(
              ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_selftest_starting(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_selftest_starting(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_selftest_startingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_selftest_starting');
  late final _main_selftest_starting = _main_selftest_startingPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_selftest_finished(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_selftest_finished(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_selftest_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_selftest_finished');
  late final _main_selftest_finished = _main_selftest_finishedPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_autotune_starting(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_autotune_starting(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_autotune_startingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_autotune_starting');
  late final _main_autotune_starting = _main_autotune_startingPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void main_autotune_finished(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _main_autotune_finished(
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _main_autotune_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('main_autotune_finished');
  late final _main_autotune_finished = _main_autotune_finishedPtr.asFunction<
      void Function(ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  void event(
    int id,
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _event(
      id,
      hashcat_ctx,
      buf,
      len,
    );
  }

  late final _eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(u32, ffi.Pointer<hashcat_ctx_t>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('event');
  late final _event = _eventPtr.asFunction<
      void Function(
          int, ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<ffi.Void>, int)>();

  int hashcat_init(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(u32, ffi.Pointer<hashcat_ctx>,
                    ffi.Pointer<ffi.Void>, ffi.Size)>>
        event,
  ) {
    return _hashcat_init(
      hashcat_ctx,
      event,
    );
  }

  late final _hashcat_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashcat_ctx_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(u32, ffi.Pointer<hashcat_ctx>,
                          ffi.Pointer<ffi.Void>, ffi.Size)>>)>>('hashcat_init');
  late final _hashcat_init = _hashcat_initPtr.asFunction<
      int Function(
          ffi.Pointer<hashcat_ctx_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(u32, ffi.Pointer<hashcat_ctx>,
                      ffi.Pointer<ffi.Void>, ffi.Size)>>)>();

  void hashcat_destroy(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_destroy(
      hashcat_ctx,
    );
  }

  late final _hashcat_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hashcat_ctx_t>)>>(
      'hashcat_destroy');
  late final _hashcat_destroy = _hashcat_destroyPtr
      .asFunction<void Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_init(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<ffi.Char> install_folder,
    ffi.Pointer<ffi.Char> shared_folder,
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    int comptime,
  ) {
    return _hashcat_session_init(
      hashcat_ctx,
      install_folder,
      shared_folder,
      argc,
      argv,
      comptime,
    );
  }

  late final _hashcat_session_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashcat_ctx_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('hashcat_session_init');
  late final _hashcat_session_init = _hashcat_session_initPtr.asFunction<
      int Function(
          ffi.Pointer<hashcat_ctx_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>();

  int hashcat_session_execute(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_execute(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_executePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_execute');
  late final _hashcat_session_execute = _hashcat_session_executePtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_pause(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_pause(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_pause');
  late final _hashcat_session_pause = _hashcat_session_pausePtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_resume(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_resume(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_resume');
  late final _hashcat_session_resume = _hashcat_session_resumePtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_bypass(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_bypass(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_bypassPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_bypass');
  late final _hashcat_session_bypass = _hashcat_session_bypassPtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_checkpoint(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_checkpoint(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_checkpointPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_checkpoint');
  late final _hashcat_session_checkpoint = _hashcat_session_checkpointPtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_finish(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_finish(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_finish');
  late final _hashcat_session_finish = _hashcat_session_finishPtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_quit(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_quit(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_quitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_quit');
  late final _hashcat_session_quit = _hashcat_session_quitPtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_session_destroy(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_session_destroy(
      hashcat_ctx,
    );
  }

  late final _hashcat_session_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashcat_ctx_t>)>>(
          'hashcat_session_destroy');
  late final _hashcat_session_destroy = _hashcat_session_destroyPtr
      .asFunction<int Function(ffi.Pointer<hashcat_ctx_t>)>();

  ffi.Pointer<ffi.Char> hashcat_get_log(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
  ) {
    return _hashcat_get_log(
      hashcat_ctx,
    );
  }

  late final _hashcat_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashcat_ctx_t>)>>('hashcat_get_log');
  late final _hashcat_get_log = _hashcat_get_logPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hashcat_ctx_t>)>();

  int hashcat_get_status(
    ffi.Pointer<hashcat_ctx_t> hashcat_ctx,
    ffi.Pointer<hashcat_status_t> hashcat_status,
  ) {
    return _hashcat_get_status(
      hashcat_ctx,
      hashcat_status,
    );
  }

  late final _hashcat_get_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hashcat_ctx_t>,
              ffi.Pointer<hashcat_status_t>)>>('hashcat_get_status');
  late final _hashcat_get_status = _hashcat_get_statusPtr.asFunction<
      int Function(
          ffi.Pointer<hashcat_ctx_t>, ffi.Pointer<hashcat_status_t>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef errno_t = ffi.Int;
typedef rsize_t = __darwin_size_t;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

class __sFILEX extends ffi.Opaque {}

class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;

@ffi.Packed(1)
class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = ffi.Int;

class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef __darwin_time_t = ffi.Long;

class ostat extends ffi.Struct {
  @__uint16_t()
  external int st_dev;

  @ino_t()
  external int st_ino;

  @mode_t()
  external int st_mode;

  @nlink_t()
  external int st_nlink;

  @__uint16_t()
  external int st_uid;

  @__uint16_t()
  external int st_gid;

  @__uint16_t()
  external int st_rdev;

  @__int32_t()
  external int st_size;

  external timespec st_atimespec;

  external timespec st_mtimespec;

  external timespec st_ctimespec;

  @__int32_t()
  external int st_blksize;

  @__int32_t()
  external int st_blocks;

  @__uint32_t()
  external int st_flags;

  @__uint32_t()
  external int st_gen;
}

typedef __uint16_t = ffi.UnsignedShort;
typedef ino_t = __darwin_ino_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef nlink_t = __uint16_t;
typedef __uint32_t = ffi.UnsignedInt;

class stat extends ffi.Struct {
  @dev_t()
  external int st_dev;

  @mode_t()
  external int st_mode;

  @nlink_t()
  external int st_nlink;

  @__darwin_ino64_t()
  external int st_ino;

  @uid_t()
  external int st_uid;

  @gid_t()
  external int st_gid;

  @dev_t()
  external int st_rdev;

  external timespec st_atimespec;

  external timespec st_mtimespec;

  external timespec st_ctimespec;

  external timespec st_birthtimespec;

  @off_t()
  external int st_size;

  @blkcnt_t()
  external int st_blocks;

  @blksize_t()
  external int st_blksize;

  @__uint32_t()
  external int st_flags;

  @__uint32_t()
  external int st_gen;

  @__int32_t()
  external int st_lspare;

  @ffi.Array.multi([2])
  external ffi.Array<__int64_t> st_qspare;
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;
typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef blkcnt_t = __darwin_blkcnt_t;
typedef __darwin_blkcnt_t = __int64_t;
typedef blksize_t = __darwin_blksize_t;
typedef __darwin_blksize_t = __int32_t;

class _filesec extends ffi.Opaque {}

typedef filesec_t = ffi.Pointer<_filesec>;

class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_suseconds_t = __int32_t;

class timeval64 extends ffi.Struct {
  @__int64_t()
  external int tv_sec;

  @__int64_t()
  external int tv_usec;
}

class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

class timezone extends ffi.Struct {
  @ffi.Int()
  external int tz_minuteswest;

  @ffi.Int()
  external int tz_dsttime;
}

class clockinfo extends ffi.Struct {
  @ffi.Int()
  external int hz;

  @ffi.Int()
  external int tick;

  @ffi.Int()
  external int tickadj;

  @ffi.Int()
  external int stathz;

  @ffi.Int()
  external int profhz;
}

class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef time_t = __darwin_time_t;

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class accessx_descriptor extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ad_name_offset;

  @ffi.Int()
  external int ad_flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> ad_pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef useconds_t = __darwin_useconds_t;
typedef __darwin_useconds_t = __uint32_t;
typedef sigset_t = __darwin_sigset_t;
typedef __darwin_sigset_t = __uint32_t;

class fssearchblock extends ffi.Opaque {}

class searchstate extends ffi.Opaque {}

class __float2 extends ffi.Struct {
  @ffi.Float()
  external double __sinval;

  @ffi.Float()
  external double __cosval;
}

class __double2 extends ffi.Struct {
  @ffi.Double()
  external double __sinval;

  @ffi.Double()
  external double __cosval;
}

class exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

typedef iconv_t = ffi.Pointer<ffi.Void>;

class iconv_hooks extends ffi.Struct {
  external iconv_unicode_char_hook uc_hook;

  external iconv_wide_char_hook wc_hook;

  external ffi.Pointer<ffi.Void> data;
}

typedef iconv_unicode_char_hook = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>)>>;
typedef iconv_wide_char_hook = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.WChar, ffi.Pointer<ffi.Void>)>>;

class iconv_fallbacks extends ffi.Struct {
  external iconv_unicode_mb_to_uc_fallback mb_to_uc_fallback;

  external iconv_unicode_uc_to_mb_fallback uc_to_mb_fallback;

  external iconv_wchar_mb_to_wc_fallback mb_to_wc_fallback;

  external iconv_wchar_wc_to_mb_fallback wc_to_mb_fallback;

  external ffi.Pointer<ffi.Void> data;
}

typedef iconv_unicode_mb_to_uc_fallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Size,
                        ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef iconv_unicode_uc_to_mb_fallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.UnsignedInt,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size,
                        ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef iconv_wchar_mb_to_wc_fallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Size,
                        ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef iconv_wchar_wc_to_mb_fallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.WChar,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size,
                        ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __opaque;
}

typedef qos_class_t = ffi.UnsignedInt;
typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef pthread_t = __darwin_pthread_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;

class pthread_override_s extends ffi.Opaque {}

/// !
/// @typedef pthread_override_t
///
/// @abstract
/// An opaque object representing a QOS class override of a thread.
///
/// @discussion
/// A QOS class override of a target thread expresses that an item of pending
/// work classified with a specific QOS class and relative priority depends on
/// the completion of the work currently being executed by the thread (e.g. due
/// to ordering requirements).
///
/// While overrides are in effect, the target thread will execute at the maximum
/// QOS class and relative priority of all overrides and of the QOS class
/// requested by the thread itself.
///
/// A QOS class override does not modify the target thread's requested QOS class
/// value and the effect of an override is not visible to the qos_class_self()
/// and pthread_get_qos_class_np() interfaces.
typedef pthread_override_t = ffi.Pointer<pthread_override_s>;
typedef pthread_cond_t = __darwin_pthread_cond_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef pthread_condattr_t = __darwin_pthread_condattr_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef pthread_mutex_t = __darwin_pthread_mutex_t;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef pthread_key_t = __darwin_pthread_key_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef pthread_once_t = __darwin_pthread_once_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef pthread_rwlock_t = __darwin_pthread_rwlock_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_natural_t = ffi.UnsignedInt;

/// !
/// @typedef pthread_jit_write_callback_t
/// The type of a function that can be supplied to {@link
/// pthread_jit_write_with_callback_np} to write to the MAP_JIT region while it
/// is writeable.
///
/// @param ctx
/// A pointer to context that will be passed through to the callback function.
///
/// @result
/// A result code to be returned to the caller of @{link
/// pthread_jit_write_with_callback_np}.  The system does not interpret/act on
/// the value of this result.
typedef pthread_jit_write_callback_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>;

class flock extends ffi.Struct {
  @off_t()
  external int l_start;

  @off_t()
  external int l_len;

  @pid_t()
  external int l_pid;

  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;
}

class flocktimeout extends ffi.Struct {
  external flock fl;

  external timespec timeout;
}

class radvisory extends ffi.Struct {
  @off_t()
  external int ra_offset;

  @ffi.Int()
  external int ra_count;
}

class fsignatures extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  external ffi.Pointer<ffi.Void> fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Size()
  external int fs_fsignatures_size;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> fs_cdhash;

  @ffi.Int()
  external int fs_hash_type;
}

class fsupplement extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  @off_t()
  external int fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Int()
  external int fs_orig_fd;
}

class fchecklv extends ffi.Struct {
  @off_t()
  external int lv_file_start;

  @ffi.Size()
  external int lv_error_message_size;

  external ffi.Pointer<ffi.Void> lv_error_message;
}

class fgetsigsinfo extends ffi.Struct {
  @off_t()
  external int fg_file_start;

  @ffi.Int()
  external int fg_info_request;

  @ffi.Int()
  external int fg_sig_is_platform;
}

class fstore extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fst_flags;

  @ffi.Int()
  external int fst_posmode;

  @off_t()
  external int fst_offset;

  @off_t()
  external int fst_length;

  @off_t()
  external int fst_bytesalloc;
}

class fpunchhole extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fp_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fp_offset;

  @off_t()
  external int fp_length;
}

class ftrimactivefile extends ffi.Struct {
  @off_t()
  external int fta_offset;

  @off_t()
  external int fta_length;
}

class fspecread extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fsr_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fsr_offset;

  @off_t()
  external int fsr_length;
}

class fbootstraptransfer extends ffi.Struct {
  @off_t()
  external int fbt_offset;

  @ffi.Size()
  external int fbt_length;

  external ffi.Pointer<ffi.Void> fbt_buffer;
}

@ffi.Packed(4)
class log2phys extends ffi.Struct {
  @ffi.UnsignedInt()
  external int l2p_flags;

  @off_t()
  external int l2p_contigbytes;

  @off_t()
  external int l2p_devoffset;
}

abstract class filesec_property_t {
  static const int FILESEC_OWNER = 1;
  static const int FILESEC_GROUP = 2;
  static const int FILESEC_UUID = 3;
  static const int FILESEC_MODE = 4;
  static const int FILESEC_ACL = 5;
  static const int FILESEC_GRPUUID = 6;
  static const int FILESEC_ACL_RAW = 100;
  static const int FILESEC_ACL_ALLOCSIZE = 101;
}

typedef sem_t = ffi.Int;

abstract class loglevel {
  static const int LOGLEVEL_INFO = 0;
  static const int LOGLEVEL_WARNING = 1;
  static const int LOGLEVEL_ERROR = 2;
  static const int LOGLEVEL_ADVICE = 3;
}

abstract class event_identifier {
  static const int EVENT_AUTODETECT_FINISHED = 256;
  static const int EVENT_AUTODETECT_STARTING = 257;
  static const int EVENT_AUTOTUNE_FINISHED = 0;
  static const int EVENT_AUTOTUNE_STARTING = 1;
  static const int EVENT_BITMAP_INIT_POST = 16;
  static const int EVENT_BITMAP_INIT_PRE = 17;
  static const int EVENT_BITMAP_FINAL_OVERFLOW = 18;
  static const int EVENT_CALCULATED_WORDS_BASE = 32;
  static const int EVENT_CRACKER_FINISHED = 48;
  static const int EVENT_CRACKER_HASH_CRACKED = 49;
  static const int EVENT_CRACKER_STARTING = 50;
  static const int EVENT_HASHCONFIG_PRE = 64;
  static const int EVENT_HASHCONFIG_POST = 65;
  static const int EVENT_HASHLIST_COUNT_LINES_POST = 80;
  static const int EVENT_HASHLIST_COUNT_LINES_PRE = 81;
  static const int EVENT_HASHLIST_PARSE_HASH = 82;
  static const int EVENT_HASHLIST_SORT_HASH_POST = 83;
  static const int EVENT_HASHLIST_SORT_HASH_PRE = 84;
  static const int EVENT_HASHLIST_SORT_SALT_POST = 85;
  static const int EVENT_HASHLIST_SORT_SALT_PRE = 86;
  static const int EVENT_HASHLIST_UNIQUE_HASH_POST = 87;
  static const int EVENT_HASHLIST_UNIQUE_HASH_PRE = 88;
  static const int EVENT_INNERLOOP1_FINISHED = 96;
  static const int EVENT_INNERLOOP1_STARTING = 97;
  static const int EVENT_INNERLOOP2_FINISHED = 112;
  static const int EVENT_INNERLOOP2_STARTING = 113;
  static const int EVENT_LOG_ERROR = 128;
  static const int EVENT_LOG_INFO = 129;
  static const int EVENT_LOG_WARNING = 130;
  static const int EVENT_LOG_ADVICE = 131;
  static const int EVENT_MONITOR_RUNTIME_LIMIT = 144;
  static const int EVENT_MONITOR_STATUS_REFRESH = 145;
  static const int EVENT_MONITOR_TEMP_ABORT = 146;
  static const int EVENT_MONITOR_THROTTLE1 = 147;
  static const int EVENT_MONITOR_THROTTLE2 = 148;
  static const int EVENT_MONITOR_THROTTLE3 = 149;
  static const int EVENT_MONITOR_PERFORMANCE_HINT = 150;
  static const int EVENT_MONITOR_NOINPUT_HINT = 151;
  static const int EVENT_MONITOR_NOINPUT_ABORT = 152;
  static const int EVENT_BACKEND_SESSION_POST = 160;
  static const int EVENT_BACKEND_SESSION_PRE = 161;
  static const int EVENT_BACKEND_SESSION_HOSTMEM = 162;
  static const int EVENT_BACKEND_DEVICE_INIT_POST = 163;
  static const int EVENT_BACKEND_DEVICE_INIT_PRE = 164;
  static const int EVENT_OUTERLOOP_FINISHED = 176;
  static const int EVENT_OUTERLOOP_MAINSCREEN = 177;
  static const int EVENT_OUTERLOOP_STARTING = 178;
  static const int EVENT_POTFILE_ALL_CRACKED = 192;
  static const int EVENT_POTFILE_HASH_LEFT = 193;
  static const int EVENT_POTFILE_HASH_SHOW = 194;
  static const int EVENT_POTFILE_NUM_CRACKED = 195;
  static const int EVENT_POTFILE_REMOVE_PARSE_POST = 196;
  static const int EVENT_POTFILE_REMOVE_PARSE_PRE = 197;
  static const int EVENT_SELFTEST_FINISHED = 208;
  static const int EVENT_SELFTEST_STARTING = 209;
  static const int EVENT_SET_KERNEL_POWER_FINAL = 224;
  static const int EVENT_WORDLIST_CACHE_GENERATE = 240;
  static const int EVENT_WORDLIST_CACHE_HIT = 241;
}

abstract class amplifier_count {
  static const int KERNEL_BFS = 1024;
  static const int KERNEL_COMBS = 1024;
  static const int KERNEL_RULES = 256;
}

abstract class vendor_id {
  static const int VENDOR_ID_AMD = 1;
  static const int VENDOR_ID_APPLE = 2;
  static const int VENDOR_ID_INTEL_BEIGNET = 4;
  static const int VENDOR_ID_INTEL_SDK = 8;
  static const int VENDOR_ID_MESA = 16;
  static const int VENDOR_ID_NV = 32;
  static const int VENDOR_ID_POCL = 64;
  static const int VENDOR_ID_AMD_USE_INTEL = 128;
  static const int VENDOR_ID_AMD_USE_HIP = 256;
  static const int VENDOR_ID_GENERIC = -2147483648;
}

abstract class st_status_rc {
  static const int ST_STATUS_PASSED = 0;
  static const int ST_STATUS_FAILED = 1;
  static const int ST_STATUS_IGNORED = 2;
}

abstract class at_status_rc {
  static const int AT_STATUS_PASSED = 0;
  static const int AT_STATUS_FAILED = 1;
}

abstract class status_rc {
  static const int STATUS_INIT = 0;
  static const int STATUS_AUTOTUNE = 1;
  static const int STATUS_SELFTEST = 2;
  static const int STATUS_RUNNING = 3;
  static const int STATUS_PAUSED = 4;
  static const int STATUS_EXHAUSTED = 5;
  static const int STATUS_CRACKED = 6;
  static const int STATUS_ABORTED = 7;
  static const int STATUS_QUIT = 8;
  static const int STATUS_BYPASS = 9;
  static const int STATUS_ABORTED_CHECKPOINT = 10;
  static const int STATUS_ABORTED_RUNTIME = 11;
  static const int STATUS_ERROR = 13;
  static const int STATUS_ABORTED_FINISH = 14;
  static const int STATUS_AUTODETECT = 16;
}

abstract class rc_final {
  static const int RC_FINAL_ERROR = -1;
  static const int RC_FINAL_OK = 0;
  static const int RC_FINAL_EXHAUSTED = 1;
  static const int RC_FINAL_ABORT = 2;
  static const int RC_FINAL_ABORT_CHECKPOINT = 3;
  static const int RC_FINAL_ABORT_RUNTIME = 4;
  static const int RC_FINAL_ABORT_FINISH = 5;
}

abstract class wl_mode {
  static const int WL_MODE_NONE = 0;
  static const int WL_MODE_STDIN = 1;
  static const int WL_MODE_FILE = 2;
  static const int WL_MODE_MASK = 3;
}

abstract class hl_mode {
  static const int HL_MODE_ARG = 2;
  static const int HL_MODE_FILE_PLAIN = 5;
  static const int HL_MODE_FILE_BINARY = 6;
}

abstract class attack_mode {
  static const int ATTACK_MODE_STRAIGHT = 0;
  static const int ATTACK_MODE_COMBI = 1;
  static const int ATTACK_MODE_TOGGLE = 2;
  static const int ATTACK_MODE_BF = 3;
  static const int ATTACK_MODE_PERM = 4;
  static const int ATTACK_MODE_TABLE = 5;
  static const int ATTACK_MODE_HYBRID1 = 6;
  static const int ATTACK_MODE_HYBRID2 = 7;
  static const int ATTACK_MODE_ASSOCIATION = 9;
  static const int ATTACK_MODE_NONE = 100;
}

abstract class attack_kern {
  static const int ATTACK_KERN_STRAIGHT = 0;
  static const int ATTACK_KERN_COMBI = 1;
  static const int ATTACK_KERN_BF = 3;
  static const int ATTACK_KERN_NONE = 100;
}

abstract class kern_run {
  static const int KERN_RUN_1 = 1000;
  static const int KERN_RUN_12 = 1500;
  static const int KERN_RUN_2P = 1999;
  static const int KERN_RUN_2 = 2000;
  static const int KERN_RUN_2E = 2001;
  static const int KERN_RUN_23 = 2500;
  static const int KERN_RUN_3 = 3000;
  static const int KERN_RUN_4 = 4000;
  static const int KERN_RUN_INIT2 = 5000;
  static const int KERN_RUN_LOOP2P = 5999;
  static const int KERN_RUN_LOOP2 = 6000;
  static const int KERN_RUN_AUX1 = 7001;
  static const int KERN_RUN_AUX2 = 7002;
  static const int KERN_RUN_AUX3 = 7003;
  static const int KERN_RUN_AUX4 = 7004;
}

abstract class kern_run_mp {
  static const int KERN_RUN_MP = 101;
  static const int KERN_RUN_MP_L = 102;
  static const int KERN_RUN_MP_R = 103;
}

abstract class rule_functions {
  static const int RULE_OP_MANGLE_NOOP = 58;
  static const int RULE_OP_MANGLE_LREST = 108;
  static const int RULE_OP_MANGLE_UREST = 117;
  static const int RULE_OP_MANGLE_LREST_UFIRST = 99;
  static const int RULE_OP_MANGLE_UREST_LFIRST = 67;
  static const int RULE_OP_MANGLE_TREST = 116;
  static const int RULE_OP_MANGLE_TOGGLE_AT = 84;
  static const int RULE_OP_MANGLE_TOGGLE_AT_SEP = 51;
  static const int RULE_OP_MANGLE_REVERSE = 114;
  static const int RULE_OP_MANGLE_DUPEWORD = 100;
  static const int RULE_OP_MANGLE_DUPEWORD_TIMES = 112;
  static const int RULE_OP_MANGLE_REFLECT = 102;
  static const int RULE_OP_MANGLE_ROTATE_LEFT = 123;
  static const int RULE_OP_MANGLE_ROTATE_RIGHT = 125;
  static const int RULE_OP_MANGLE_APPEND = 36;
  static const int RULE_OP_MANGLE_PREPEND = 94;
  static const int RULE_OP_MANGLE_DELETE_FIRST = 91;
  static const int RULE_OP_MANGLE_DELETE_LAST = 93;
  static const int RULE_OP_MANGLE_DELETE_AT = 68;
  static const int RULE_OP_MANGLE_EXTRACT = 120;
  static const int RULE_OP_MANGLE_OMIT = 79;
  static const int RULE_OP_MANGLE_INSERT = 105;
  static const int RULE_OP_MANGLE_OVERSTRIKE = 111;
  static const int RULE_OP_MANGLE_TRUNCATE_AT = 39;
  static const int RULE_OP_MANGLE_REPLACE = 115;
  static const int RULE_OP_MANGLE_PURGECHAR = 64;
  static const int RULE_OP_MANGLE_TOGGLECASE_REC = 97;
  static const int RULE_OP_MANGLE_DUPECHAR_FIRST = 122;
  static const int RULE_OP_MANGLE_DUPECHAR_LAST = 90;
  static const int RULE_OP_MANGLE_DUPECHAR_ALL = 113;
  static const int RULE_OP_MANGLE_EXTRACT_MEMORY = 88;
  static const int RULE_OP_MANGLE_APPEND_MEMORY = 52;
  static const int RULE_OP_MANGLE_PREPEND_MEMORY = 54;
  static const int RULE_OP_MANGLE_TITLE_SEP = 101;
  static const int RULE_OP_MEMORIZE_WORD = 77;
  static const int RULE_OP_REJECT_LESS = 60;
  static const int RULE_OP_REJECT_GREATER = 62;
  static const int RULE_OP_REJECT_EQUAL = 95;
  static const int RULE_OP_REJECT_CONTAIN = 33;
  static const int RULE_OP_REJECT_NOT_CONTAIN = 47;
  static const int RULE_OP_REJECT_EQUAL_FIRST = 40;
  static const int RULE_OP_REJECT_EQUAL_LAST = 41;
  static const int RULE_OP_REJECT_EQUAL_AT = 61;
  static const int RULE_OP_REJECT_CONTAINS = 37;
  static const int RULE_OP_REJECT_MEMORY = 81;
  static const int RULE_LAST_REJECTED_SAVED_POS = 112;
  static const int RULE_OP_MANGLE_SWITCH_FIRST = 107;
  static const int RULE_OP_MANGLE_SWITCH_LAST = 75;
  static const int RULE_OP_MANGLE_SWITCH_AT = 42;
  static const int RULE_OP_MANGLE_CHR_SHIFTL = 76;
  static const int RULE_OP_MANGLE_CHR_SHIFTR = 82;
  static const int RULE_OP_MANGLE_CHR_INCR = 43;
  static const int RULE_OP_MANGLE_CHR_DECR = 45;
  static const int RULE_OP_MANGLE_REPLACE_NP1 = 46;
  static const int RULE_OP_MANGLE_REPLACE_NM1 = 44;
  static const int RULE_OP_MANGLE_DUPEBLOCK_FIRST = 121;
  static const int RULE_OP_MANGLE_DUPEBLOCK_LAST = 89;
  static const int RULE_OP_MANGLE_TITLE = 69;
}

abstract class salt_type {
  static const int SALT_TYPE_NONE = 1;
  static const int SALT_TYPE_EMBEDDED = 2;
  static const int SALT_TYPE_GENERIC = 3;
  static const int SALT_TYPE_VIRTUAL = 5;
}

abstract class opti_type {
  static const int OPTI_TYPE_OPTIMIZED_KERNEL = 1;
  static const int OPTI_TYPE_ZERO_BYTE = 2;
  static const int OPTI_TYPE_PRECOMPUTE_INIT = 4;
  static const int OPTI_TYPE_MEET_IN_MIDDLE = 8;
  static const int OPTI_TYPE_EARLY_SKIP = 16;
  static const int OPTI_TYPE_NOT_SALTED = 32;
  static const int OPTI_TYPE_NOT_ITERATED = 64;
  static const int OPTI_TYPE_PREPENDED_SALT = 128;
  static const int OPTI_TYPE_APPENDED_SALT = 256;
  static const int OPTI_TYPE_SINGLE_HASH = 512;
  static const int OPTI_TYPE_SINGLE_SALT = 1024;
  static const int OPTI_TYPE_BRUTE_FORCE = 2048;
  static const int OPTI_TYPE_RAW_HASH = 4096;
  static const int OPTI_TYPE_SLOW_HASH_SIMD_INIT = 8192;
  static const int OPTI_TYPE_SLOW_HASH_SIMD_LOOP = 16384;
  static const int OPTI_TYPE_SLOW_HASH_SIMD_COMP = 32768;
  static const int OPTI_TYPE_USES_BITS_8 = 65536;
  static const int OPTI_TYPE_USES_BITS_16 = 131072;
  static const int OPTI_TYPE_USES_BITS_32 = 262144;
  static const int OPTI_TYPE_USES_BITS_64 = 524288;
  static const int OPTI_TYPE_REGISTER_LIMIT = 1048576;
  static const int OPTI_TYPE_SLOW_HASH_SIMD_INIT2 = 2097152;
  static const int OPTI_TYPE_SLOW_HASH_SIMD_LOOP2 = 4194304;
}

abstract class opts_type {
  static const int OPTS_TYPE_PT_UTF16LE = 1;
  static const int OPTS_TYPE_PT_UTF16BE = 2;
  static const int OPTS_TYPE_PT_UPPER = 4;
  static const int OPTS_TYPE_PT_LOWER = 8;
  static const int OPTS_TYPE_PT_ADD01 = 16;
  static const int OPTS_TYPE_PT_ADD02 = 32;
  static const int OPTS_TYPE_PT_ADD80 = 64;
  static const int OPTS_TYPE_PT_ADDBITS14 = 128;
  static const int OPTS_TYPE_PT_ADDBITS15 = 256;
  static const int OPTS_TYPE_PT_GENERATE_LE = 512;
  static const int OPTS_TYPE_PT_GENERATE_BE = 1024;
  static const int OPTS_TYPE_PT_NEVERCRACK = 2048;
  static const int OPTS_TYPE_PT_ALWAYS_ASCII = 4096;
  static const int OPTS_TYPE_PT_ALWAYS_HEXIFY = 8192;
  static const int OPTS_TYPE_PT_LM = 16384;
  static const int OPTS_TYPE_PT_HEX = 32768;
  static const int OPTS_TYPE_ST_UTF16LE = 65536;
  static const int OPTS_TYPE_ST_UTF16BE = 131072;
  static const int OPTS_TYPE_ST_UPPER = 262144;
  static const int OPTS_TYPE_ST_LOWER = 524288;
  static const int OPTS_TYPE_ST_ADD01 = 1048576;
  static const int OPTS_TYPE_ST_ADD02 = 2097152;
  static const int OPTS_TYPE_ST_ADD80 = 4194304;
  static const int OPTS_TYPE_ST_ADDBITS14 = 8388608;
  static const int OPTS_TYPE_ST_ADDBITS15 = 16777216;
  static const int OPTS_TYPE_ST_HEX = 33554432;
  static const int OPTS_TYPE_ST_BASE64 = 67108864;
  static const int OPTS_TYPE_MT_HEX = 134217728;
  static const int OPTS_TYPE_HASH_COPY = 268435456;
  static const int OPTS_TYPE_HASH_SPLIT = 536870912;
  static const int OPTS_TYPE_LOOP_PREPARE = 1073741824;
  static const int OPTS_TYPE_LOOP_EXTENDED = 2147483648;
  static const int OPTS_TYPE_HOOK12 = 4294967296;
  static const int OPTS_TYPE_HOOK23 = 8589934592;
  static const int OPTS_TYPE_INIT2 = 17179869184;
  static const int OPTS_TYPE_LOOP2_PREPARE = 34359738368;
  static const int OPTS_TYPE_LOOP2 = 68719476736;
  static const int OPTS_TYPE_AUX1 = 137438953472;
  static const int OPTS_TYPE_AUX2 = 274877906944;
  static const int OPTS_TYPE_AUX3 = 549755813888;
  static const int OPTS_TYPE_AUX4 = 1099511627776;
  static const int OPTS_TYPE_BINARY_HASHFILE = 2199023255552;
  static const int OPTS_TYPE_BINARY_HASHFILE_OPTIONAL = 4398046511104;
  static const int OPTS_TYPE_PT_ADD06 = 8796093022208;
  static const int OPTS_TYPE_KEYBOARD_MAPPING = 17592186044416;
  static const int OPTS_TYPE_DEEP_COMP_KERNEL = 35184372088832;
  static const int OPTS_TYPE_TM_KERNEL = 70368744177664;
  static const int OPTS_TYPE_SUGGEST_KG = 140737488355328;
  static const int OPTS_TYPE_COPY_TMPS = 281474976710656;
  static const int OPTS_TYPE_POTFILE_NOPASS = 562949953421312;
  static const int OPTS_TYPE_DYNAMIC_SHARED = 1125899906842624;
  static const int OPTS_TYPE_SELF_TEST_DISABLE = 2251799813685248;
  static const int OPTS_TYPE_MP_MULTI_DISABLE = 4503599627370496;
  static const int OPTS_TYPE_NATIVE_THREADS = 9007199254740992;
  static const int OPTS_TYPE_MAXIMUM_THREADS = 18014398509481984;
  static const int OPTS_TYPE_POST_AMP_UTF16LE = 36028797018963968;
  static const int OPTS_TYPE_AUTODETECT_DISABLE = 72057594037927936;
  static const int OPTS_TYPE_STOCK_MODULE = 144115188075855872;
}

abstract class dgst_size {
  static const int DGST_SIZE_4_2 = 8;
  static const int DGST_SIZE_4_4 = 16;
  static const int DGST_SIZE_4_5 = 20;
  static const int DGST_SIZE_4_6 = 24;
  static const int DGST_SIZE_4_7 = 28;
  static const int DGST_SIZE_4_8 = 32;
  static const int DGST_SIZE_4_16 = 64;
  static const int DGST_SIZE_4_32 = 128;
  static const int DGST_SIZE_4_64 = 256;
  static const int DGST_SIZE_8_2 = 16;
  static const int DGST_SIZE_8_4 = 32;
  static const int DGST_SIZE_8_6 = 48;
  static const int DGST_SIZE_8_8 = 64;
  static const int DGST_SIZE_8_16 = 128;
  static const int DGST_SIZE_8_25 = 200;
}

abstract class attack_exec {
  static const int ATTACK_EXEC_OUTSIDE_KERNEL = 10;
  static const int ATTACK_EXEC_INSIDE_KERNEL = 11;
}

abstract class hlfmt_name {
  static const int HLFMT_HASHCAT = 0;
  static const int HLFMT_PWDUMP = 1;
  static const int HLFMT_PASSWD = 2;
  static const int HLFMT_SHADOW = 3;
  static const int HLFMT_DCC = 4;
  static const int HLFMT_DCC2 = 5;
  static const int HLFMT_NETNTLM1 = 7;
  static const int HLFMT_NETNTLM2 = 8;
  static const int HLFMT_NSLDAP = 9;
  static const int HLFMT_NSLDAPS = 10;
}

abstract class pwdump_column {
  static const int PWDUMP_COLUMN_INVALID = -1;
  static const int PWDUMP_COLUMN_USERNAME = 0;
  static const int PWDUMP_COLUMN_UID = 1;
  static const int PWDUMP_COLUMN_LM_HASH = 2;
  static const int PWDUMP_COLUMN_NTLM_HASH = 3;
  static const int PWDUMP_COLUMN_COMMENT = 4;
  static const int PWDUMP_COLUMN_HOMEDIR = 5;
}

abstract class outfile_fmt {
  static const int OUTFILE_FMT_HASH = 1;
  static const int OUTFILE_FMT_PLAIN = 2;
  static const int OUTFILE_FMT_HEXPLAIN = 4;
  static const int OUTFILE_FMT_CRACKPOS = 8;
  static const int OUTFILE_FMT_TIME_ABS = 16;
  static const int OUTFILE_FMT_TIME_REL = 32;
}

abstract class parser_rc {
  static const int PARSER_OK = 0;
  static const int PARSER_COMMENT = -1;
  static const int PARSER_GLOBAL_ZERO = -2;
  static const int PARSER_GLOBAL_LENGTH = -3;
  static const int PARSER_HASH_LENGTH = -4;
  static const int PARSER_HASH_VALUE = -5;
  static const int PARSER_SALT_LENGTH = -6;
  static const int PARSER_SALT_VALUE = -7;
  static const int PARSER_SALT_ITERATION = -8;
  static const int PARSER_SEPARATOR_UNMATCHED = -9;
  static const int PARSER_SIGNATURE_UNMATCHED = -10;
  static const int PARSER_HCCAPX_FILE_SIZE = -11;
  static const int PARSER_HCCAPX_EAPOL_LEN = -12;
  static const int PARSER_PSAFE2_FILE_SIZE = -13;
  static const int PARSER_PSAFE3_FILE_SIZE = -14;
  static const int PARSER_TC_FILE_SIZE = -15;
  static const int PARSER_VC_FILE_SIZE = -16;
  static const int PARSER_SIP_AUTH_DIRECTIVE = -17;
  static const int PARSER_HASH_FILE = -18;
  static const int PARSER_HASH_ENCODING = -19;
  static const int PARSER_SALT_ENCODING = -20;
  static const int PARSER_LUKS_FILE_SIZE = -21;
  static const int PARSER_LUKS_MAGIC = -22;
  static const int PARSER_LUKS_VERSION = -23;
  static const int PARSER_LUKS_CIPHER_TYPE = -24;
  static const int PARSER_LUKS_CIPHER_MODE = -25;
  static const int PARSER_LUKS_HASH_TYPE = -26;
  static const int PARSER_LUKS_KEY_SIZE = -27;
  static const int PARSER_LUKS_KEY_DISABLED = -28;
  static const int PARSER_LUKS_KEY_STRIPES = -29;
  static const int PARSER_LUKS_HASH_CIPHER = -30;
  static const int PARSER_HCCAPX_SIGNATURE = -31;
  static const int PARSER_HCCAPX_VERSION = -32;
  static const int PARSER_HCCAPX_MESSAGE_PAIR = -33;
  static const int PARSER_TOKEN_ENCODING = -34;
  static const int PARSER_TOKEN_LENGTH = -35;
  static const int PARSER_INSUFFICIENT_ENTROPY = -36;
  static const int PARSER_PKZIP_CT_UNMATCHED = -37;
  static const int PARSER_KEY_SIZE = -38;
  static const int PARSER_BLOCK_SIZE = -39;
  static const int PARSER_CIPHER = -40;
  static const int PARSER_FILE_SIZE = -41;
  static const int PARSER_IV_LENGTH = -42;
  static const int PARSER_CT_LENGTH = -43;
  static const int PARSER_CRYPTOAPI_KERNELTYPE = -44;
  static const int PARSER_CRYPTOAPI_KEYSIZE = -45;
  static const int PARSER_HAVE_ERRNO = -100;
  static const int PARSER_UNKNOWN_ERROR = -255;
}

abstract class guess_mode {
  static const int GUESS_MODE_NONE = 0;
  static const int GUESS_MODE_STRAIGHT_FILE = 1;
  static const int GUESS_MODE_STRAIGHT_FILE_RULES_FILE = 2;
  static const int GUESS_MODE_STRAIGHT_FILE_RULES_GEN = 3;
  static const int GUESS_MODE_STRAIGHT_STDIN = 4;
  static const int GUESS_MODE_STRAIGHT_STDIN_RULES_FILE = 5;
  static const int GUESS_MODE_STRAIGHT_STDIN_RULES_GEN = 6;
  static const int GUESS_MODE_COMBINATOR_BASE_LEFT = 7;
  static const int GUESS_MODE_COMBINATOR_BASE_RIGHT = 8;
  static const int GUESS_MODE_MASK = 9;
  static const int GUESS_MODE_MASK_CS = 10;
  static const int GUESS_MODE_HYBRID1 = 11;
  static const int GUESS_MODE_HYBRID1_CS = 12;
  static const int GUESS_MODE_HYBRID2 = 13;
  static const int GUESS_MODE_HYBRID2_CS = 14;
}

abstract class progress_mode {
  static const int PROGRESS_MODE_NONE = 0;
  static const int PROGRESS_MODE_KEYSPACE_KNOWN = 1;
  static const int PROGRESS_MODE_KEYSPACE_UNKNOWN = 2;
}

abstract class user_options_defaults {
  static const int ADVICE_DISABLE = 0;
  static const int ATTACK_MODE = 0;
  static const int AUTODETECT = 0;
  static const int BENCHMARK_ALL = 0;
  static const int BENCHMARK = 0;
  static const int BITMAP_MAX = 18;
  static const int BITMAP_MIN = 16;
  static const int DEBUG_MODE = 0;
  static const int DEPRECATED_CHECK_DISABLE = 0;
  static const int FORCE = 0;
  static const int HWMON_DISABLE = 0;
  static const int HWMON_TEMP_ABORT = 100;
  static const int HASH_INFO = 0;
  static const int HASH_MODE = 0;
  static const int HCCAPX_MESSAGE_PAIR = 0;
  static const int HEX_CHARSET = 0;
  static const int HEX_SALT = 0;
  static const int HEX_WORDLIST = 0;
  static const int HOOK_THREADS = 0;
  static const int IDENTIFY = 0;
  static const int INCREMENT = 0;
  static const int INCREMENT_MAX = 256;
  static const int INCREMENT_MIN = 1;
  static const int KEEP_GUESSING = 0;
  static const int KERNEL_ACCEL = 0;
  static const int KERNEL_LOOPS = 0;
  static const int KERNEL_THREADS = 0;
  static const int KEYSPACE = 0;
  static const int LEFT = 0;
  static const int LIMIT = 0;
  static const int LOGFILE_DISABLE = 0;
  static const int LOOPBACK = 0;
  static const int MACHINE_READABLE = 0;
  static const int MARKOV_CLASSIC = 0;
  static const int MARKOV_DISABLE = 0;
  static const int MARKOV_INVERSE = 0;
  static const int MARKOV_THRESHOLD = 0;
  static const int NONCE_ERROR_CORRECTIONS = 8;
  static const int BACKEND_IGNORE_CUDA = 0;
  static const int BACKEND_IGNORE_HIP = 0;
  static const int BACKEND_IGNORE_METAL = 0;
  static const int BACKEND_IGNORE_OPENCL = 0;
  static const int BACKEND_INFO = 0;
  static const int BACKEND_VECTOR_WIDTH = 0;
  static const int OPTIMIZED_KERNEL_ENABLE = 0;
  static const int MULTIPLY_ACCEL_DISABLE = 0;
  static const int OUTFILE_AUTOHEX = 1;
  static const int OUTFILE_CHECK_TIMER = 5;
  static const int OUTFILE_FORMAT = 3;
  static const int POTFILE_DISABLE = 0;
  static const int PROGRESS_ONLY = 0;
  static const int QUIET = 0;
  static const int REMOVE = 0;
  static const int REMOVE_TIMER = 60;
  static const int RESTORE_DISABLE = 0;
  static const int RESTORE = 0;
  static const int RESTORE_TIMER = 1;
  static const int RP_GEN = 0;
  static const int RP_GEN_FUNC_MAX = 4;
  static const int RP_GEN_FUNC_MIN = 1;
  static const int RP_GEN_SEED = 0;
  static const int RUNTIME = 0;
  static const int SCRYPT_TMTO = 0;
  static const int SEGMENT_SIZE = 33554432;
  static const int SELF_TEST_DISABLE = 0;
  static const int SHOW = 0;
  static const int SKIP = 0;
  static const int SLOW_CANDIDATES = 0;
  static const int SPEED_ONLY = 0;
  static const int SPIN_DAMP = 0;
  static const int STATUS = 0;
  static const int STATUS_JSON = 0;
  static const int STATUS_TIMER = 10;
  static const int STDIN_TIMEOUT_ABORT = 120;
  static const int STDOUT_FLAG = 0;
  static const int USAGE = 0;
  static const int USERNAME = 0;
  static const int VERSION = 0;
  static const int VERACRYPT_PIM_START = 485;
  static const int VERACRYPT_PIM_STOP = 485;
  static const int WORDLIST_AUTOHEX_DISABLE = 0;
  static const int WORKLOAD_PROFILE = 2;
}

abstract class user_options_map {
  static const int IDX_ADVICE_DISABLE = 65280;
  static const int IDX_ATTACK_MODE = 97;
  static const int IDX_BACKEND_DEVICES = 100;
  static const int IDX_BACKEND_IGNORE_CUDA = 65281;
  static const int IDX_BACKEND_IGNORE_HIP = 65282;
  static const int IDX_BACKEND_IGNORE_METAL = 65283;
  static const int IDX_BACKEND_IGNORE_OPENCL = 65284;
  static const int IDX_BACKEND_INFO = 73;
  static const int IDX_BACKEND_VECTOR_WIDTH = 65285;
  static const int IDX_BENCHMARK_ALL = 65286;
  static const int IDX_BENCHMARK = 98;
  static const int IDX_BITMAP_MAX = 65287;
  static const int IDX_BITMAP_MIN = 65288;
  static const int IDX_CPU_AFFINITY = 65297;
  static const int IDX_CUSTOM_CHARSET_1 = 49;
  static const int IDX_CUSTOM_CHARSET_2 = 50;
  static const int IDX_CUSTOM_CHARSET_3 = 51;
  static const int IDX_CUSTOM_CHARSET_4 = 52;
  static const int IDX_DEBUG_FILE = 65298;
  static const int IDX_DEBUG_MODE = 65299;
  static const int IDX_DEPRECATED_CHECK_DISABLE = 65300;
  static const int IDX_ENCODING_FROM = 65301;
  static const int IDX_ENCODING_TO = 65302;
  static const int IDX_HASH_INFO = 65303;
  static const int IDX_FORCE = 65304;
  static const int IDX_HWMON_DISABLE = 65305;
  static const int IDX_HWMON_TEMP_ABORT = 65306;
  static const int IDX_HASH_MODE = 109;
  static const int IDX_HCCAPX_MESSAGE_PAIR = 65307;
  static const int IDX_HELP = 104;
  static const int IDX_HEX_CHARSET = 65308;
  static const int IDX_HEX_SALT = 65309;
  static const int IDX_HEX_WORDLIST = 65310;
  static const int IDX_HOOK_THREADS = 65311;
  static const int IDX_IDENTIFY = 65312;
  static const int IDX_INCREMENT = 105;
  static const int IDX_INCREMENT_MAX = 65313;
  static const int IDX_INCREMENT_MIN = 65314;
  static const int IDX_INDUCTION_DIR = 65315;
  static const int IDX_KEEP_GUESSING = 65316;
  static const int IDX_KERNEL_ACCEL = 110;
  static const int IDX_KERNEL_LOOPS = 117;
  static const int IDX_KERNEL_THREADS = 84;
  static const int IDX_KEYBOARD_LAYOUT_MAPPING = 65317;
  static const int IDX_KEYSPACE = 65318;
  static const int IDX_LEFT = 65319;
  static const int IDX_LIMIT = 108;
  static const int IDX_LOGFILE_DISABLE = 65320;
  static const int IDX_LOOPBACK = 65321;
  static const int IDX_MACHINE_READABLE = 65322;
  static const int IDX_MARKOV_CLASSIC = 65323;
  static const int IDX_MARKOV_DISABLE = 65324;
  static const int IDX_MARKOV_HCSTAT2 = 65325;
  static const int IDX_MARKOV_INVERSE = 65326;
  static const int IDX_MARKOV_THRESHOLD = 116;
  static const int IDX_NONCE_ERROR_CORRECTIONS = 65327;
  static const int IDX_OPENCL_DEVICE_TYPES = 68;
  static const int IDX_OPTIMIZED_KERNEL_ENABLE = 79;
  static const int IDX_MULTIPLY_ACCEL_DISABLE = 77;
  static const int IDX_OUTFILE_AUTOHEX_DISABLE = 65328;
  static const int IDX_OUTFILE_CHECK_DIR = 65329;
  static const int IDX_OUTFILE_CHECK_TIMER = 65330;
  static const int IDX_OUTFILE_FORMAT = 65331;
  static const int IDX_OUTFILE = 111;
  static const int IDX_POTFILE_DISABLE = 65332;
  static const int IDX_POTFILE_PATH = 65333;
  static const int IDX_PROGRESS_ONLY = 65334;
  static const int IDX_QUIET = 65335;
  static const int IDX_REMOVE = 65336;
  static const int IDX_REMOVE_TIMER = 65337;
  static const int IDX_RESTORE = 65338;
  static const int IDX_RESTORE_DISABLE = 65339;
  static const int IDX_RESTORE_FILE_PATH = 65340;
  static const int IDX_RP_FILE = 114;
  static const int IDX_RP_GEN_FUNC_MAX = 65341;
  static const int IDX_RP_GEN_FUNC_MIN = 65342;
  static const int IDX_RP_GEN_FUNC_SEL = 65343;
  static const int IDX_RP_GEN = 103;
  static const int IDX_RP_GEN_SEED = 65344;
  static const int IDX_RULE_BUF_L = 106;
  static const int IDX_RULE_BUF_R = 107;
  static const int IDX_RUNTIME = 65345;
  static const int IDX_SCRYPT_TMTO = 65346;
  static const int IDX_SEGMENT_SIZE = 99;
  static const int IDX_SELF_TEST_DISABLE = 65347;
  static const int IDX_SEPARATOR = 112;
  static const int IDX_SESSION = 65348;
  static const int IDX_SHOW = 65349;
  static const int IDX_SKIP = 115;
  static const int IDX_SLOW_CANDIDATES = 83;
  static const int IDX_SPEED_ONLY = 65350;
  static const int IDX_SPIN_DAMP = 65351;
  static const int IDX_STATUS = 65352;
  static const int IDX_STATUS_JSON = 65353;
  static const int IDX_STATUS_TIMER = 65354;
  static const int IDX_STDOUT_FLAG = 65355;
  static const int IDX_STDIN_TIMEOUT_ABORT = 65356;
  static const int IDX_TRUECRYPT_KEYFILES = 65357;
  static const int IDX_USERNAME = 65358;
  static const int IDX_VERACRYPT_KEYFILES = 65359;
  static const int IDX_VERACRYPT_PIM_START = 65360;
  static const int IDX_VERACRYPT_PIM_STOP = 65361;
  static const int IDX_VERSION_LOWER = 118;
  static const int IDX_VERSION = 86;
  static const int IDX_WORDLIST_AUTOHEX_DISABLE = 65362;
  static const int IDX_WORKLOAD_PROFILE = 119;
}

abstract class token_attr {
  static const int TOKEN_ATTR_FIXED_LENGTH = 1;
  static const int TOKEN_ATTR_SEPARATOR_FARTHEST = 2;
  static const int TOKEN_ATTR_OPTIONAL_ROUNDS = 4;
  static const int TOKEN_ATTR_VERIFY_SIGNATURE = 8;
  static const int TOKEN_ATTR_VERIFY_LENGTH = 16;
  static const int TOKEN_ATTR_VERIFY_DIGIT = 32;
  static const int TOKEN_ATTR_VERIFY_FLOAT = 64;
  static const int TOKEN_ATTR_VERIFY_HEX = 128;
  static const int TOKEN_ATTR_VERIFY_BASE64A = 256;
  static const int TOKEN_ATTR_VERIFY_BASE64B = 512;
  static const int TOKEN_ATTR_VERIFY_BASE64C = 1024;
  static const int TOKEN_ATTR_VERIFY_BASE58 = 2048;
  static const int TOKEN_ATTR_VERIFY_BECH32 = 4096;
}

/// structs
class user extends ffi.Struct {
  external ffi.Pointer<ffi.Char> user_name;

  @u32()
  external int user_len;
}

typedef u32 = ffi.UnsignedInt;

abstract class split_origin {
  static const int SPLIT_ORIGIN_NONE = 0;
  static const int SPLIT_ORIGIN_LEFT = 1;
  static const int SPLIT_ORIGIN_RIGHT = 2;
}

class split extends ffi.Struct {
  @ffi.Int()
  external int split_group;

  @ffi.Int()
  external int split_neighbor;

  @ffi.Int()
  external int split_origin;
}

class hashinfo extends ffi.Struct {
  external ffi.Pointer<user_t> user;

  external ffi.Pointer<ffi.Char> orighash;

  external ffi.Pointer<split_t> split;
}

/// structs
typedef user_t = user;
typedef split_t = split;

class hash extends ffi.Struct {
  external ffi.Pointer<ffi.Void> digest;

  external ffi.Pointer<ffi.Int> salt;

  external ffi.Pointer<ffi.Void> esalt;

  external ffi.Pointer<ffi.Void> hook_salt;

  @ffi.Int()
  external int cracked;

  @ffi.Int()
  external int cracked_pot;

  @ffi.Int()
  external int cracked_zero;

  external ffi.Pointer<hashinfo_t> hash_info;

  external ffi.Pointer<ffi.Char> pw_buf;

  @ffi.Int()
  external int pw_len;

  @u64()
  external int orig_line_pos;
}

typedef hashinfo_t = hashinfo;
typedef u64 = ffi.UnsignedLong;

class outfile_data extends ffi.Struct {
  external ffi.Pointer<ffi.Char> file_name;

  @off_t()
  external int seek;

  @time_t()
  external int ctime;
}

class logfile_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> logfile;

  external ffi.Pointer<ffi.Char> topid;

  external ffi.Pointer<ffi.Char> subid;
}

class hashes extends ffi.Struct {
  external ffi.Pointer<ffi.Char> hashfile;

  @u32()
  external int hashlist_mode;

  @u32()
  external int hashlist_format;

  @u32()
  external int digests_cnt;

  @u32()
  external int digests_done;

  @u32()
  external int digests_done_pot;

  @u32()
  external int digests_done_zero;

  @u32()
  external int digests_done_new;

  @u32()
  external int digests_saved;

  external ffi.Pointer<ffi.Void> digests_buf;

  external ffi.Pointer<u32> digests_shown;

  @u32()
  external int salts_cnt;

  @u32()
  external int salts_done;

  external ffi.Pointer<ffi.Int> salts_buf;

  external ffi.Pointer<u32> salts_shown;

  external ffi.Pointer<ffi.Void> esalts_buf;

  external ffi.Pointer<ffi.Void> hook_salts_buf;

  @u32()
  external int hashes_cnt_orig;

  @u32()
  external int hashes_cnt;

  external ffi.Pointer<hash_t> hashes_buf;

  external ffi.Pointer<ffi.Pointer<hashinfo_t>> hash_info;

  external ffi.Pointer<ffi.Int> out_buf;

  external ffi.Pointer<ffi.Int> tmp_buf;

  external ffi.Pointer<ffi.Void> st_digests_buf;

  external ffi.Pointer<ffi.Int> st_salts_buf;

  external ffi.Pointer<ffi.Void> st_esalts_buf;

  external ffi.Pointer<ffi.Void> st_hook_salts_buf;

  @ffi.Int()
  external int parser_token_length_cnt;
}

typedef hash_t = hash;

class hashconfig extends ffi.Struct {
  @ffi.Char()
  external int separator;

  @ffi.Int()
  external int hash_mode;

  @u32()
  external int salt_type;

  @u32()
  external int attack_exec;

  @u32()
  external int kern_type;

  @u32()
  external int dgst_size;

  @u32()
  external int opti_type;

  @u64()
  external int opts_type;

  @u32()
  external int dgst_pos0;

  @u32()
  external int dgst_pos1;

  @u32()
  external int dgst_pos2;

  @u32()
  external int dgst_pos3;

  @ffi.Bool()
  external bool is_salted;

  @ffi.Bool()
  external bool has_pure_kernel;

  @ffi.Bool()
  external bool has_optimized_kernel;

  @u64()
  external int esalt_size;

  @u64()
  external int hook_extra_param_size;

  @u64()
  external int hook_salt_size;

  @u64()
  external int tmp_size;

  @u64()
  external int hook_size;

  @u32()
  external int pw_min;

  @u32()
  external int pw_max;

  @u32()
  external int salt_min;

  @u32()
  external int salt_max;

  @u32()
  external int hashes_count_min;

  @u32()
  external int hashes_count_max;

  external ffi.Pointer<ffi.Char> st_hash;

  external ffi.Pointer<ffi.Char> st_pass;

  @u32()
  external int hash_category;

  external ffi.Pointer<ffi.Char> hash_name;

  external ffi.Pointer<ffi.Char> benchmark_mask;

  external ffi.Pointer<ffi.Char> benchmark_charset;

  @u32()
  external int kernel_accel_min;

  @u32()
  external int kernel_accel_max;

  @u32()
  external int kernel_loops_min;

  @u32()
  external int kernel_loops_max;

  @u32()
  external int kernel_threads_min;

  @u32()
  external int kernel_threads_max;

  @u32()
  external int forced_outfile_format;

  @ffi.Bool()
  external bool dictstat_disable;

  @ffi.Bool()
  external bool hlfmt_disable;

  @ffi.Bool()
  external bool warmup_disable;

  @ffi.Bool()
  external bool outfile_check_disable;

  @ffi.Bool()
  external bool outfile_check_nocomp;

  @ffi.Bool()
  external bool potfile_disable;

  @ffi.Bool()
  external bool potfile_keep_all_hashes;

  @ffi.Bool()
  external bool forced_jit_compile;

  @u32()
  external int pwdump_column;
}

class pw_pre extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<u32> pw_buf;

  @u32()
  external int pw_len;

  @ffi.Array.multi([64])
  external ffi.Array<u32> base_buf;

  @u32()
  external int base_len;

  @u32()
  external int rule_idx;
}

class cpt extends ffi.Struct {
  @u32()
  external int cracked;

  @time_t()
  external int timestamp;
}

class link_speed extends ffi.Struct {
  @ffi.Array.multi([10000])
  external ffi.Array<hc_timer_t> timer;

  @ffi.Array.multi([10000])
  external ffi.Array<ssize_t> bytes;

  @ffi.Int()
  external int pos;
}

typedef hc_timer_t = timespec;

class xzfile extends ffi.Opaque {}

class hc_fp extends ffi.Struct {
  @ffi.Int()
  external int fd;

  external ffi.Pointer<FILE> pfp;

  @ffi.Int()
  external int gfp;

  @ffi.Int()
  external int ufp;

  external ffi.Pointer<xzfile_t> xfp;

  @ffi.Int()
  external int bom_size;

  external ffi.Pointer<ffi.Char> mode;

  external ffi.Pointer<ffi.Char> path;
}

typedef xzfile_t = xzfile;

/// \ingroup error
/// \brief   The enumerated type nvrtcResult defines API call result codes.
/// NVRTC API functions return nvrtcResult to indicate the call
/// result.
abstract class nvrtcResult {
  static const int NVRTC_SUCCESS = 0;
  static const int NVRTC_ERROR_OUT_OF_MEMORY = 1;
  static const int NVRTC_ERROR_PROGRAM_CREATION_FAILURE = 2;
  static const int NVRTC_ERROR_INVALID_INPUT = 3;
  static const int NVRTC_ERROR_INVALID_PROGRAM = 4;
  static const int NVRTC_ERROR_INVALID_OPTION = 5;
  static const int NVRTC_ERROR_COMPILATION = 6;
  static const int NVRTC_ERROR_BUILTIN_OPERATION_FAILURE = 7;
  static const int NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION = 8;
  static const int NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION = 9;
  static const int NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID = 10;
  static const int NVRTC_ERROR_INTERNAL_ERROR = 11;
}

class _nvrtcProgram extends ffi.Opaque {}

class hc_nvrtc_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external NVRTC_NVRTCADDNAMEEXPRESSION nvrtcAddNameExpression;

  external NVRTC_NVRTCCOMPILEPROGRAM nvrtcCompileProgram;

  external NVRTC_NVRTCCREATEPROGRAM nvrtcCreateProgram;

  external NVRTC_NVRTCDESTROYPROGRAM nvrtcDestroyProgram;

  external NVRTC_NVRTCGETLOWEREDNAME nvrtcGetLoweredName;

  external NVRTC_NVRTCGETPTX nvrtcGetPTX;

  external NVRTC_NVRTCGETPTXSIZE nvrtcGetPTXSize;

  external NVRTC_NVRTCGETPROGRAMLOG nvrtcGetProgramLog;

  external NVRTC_NVRTCGETPROGRAMLOGSIZE nvrtcGetProgramLogSize;

  external NVRTC_NVRTCGETERRORSTRING nvrtcGetErrorString;

  external NVRTC_NVRTCVERSION nvrtcVersion;
}

typedef hc_dynlib_t = ffi.Pointer<ffi.Void>;
typedef NVRTC_NVRTCADDNAMEEXPRESSION = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvrtcProgram, ffi.Pointer<ffi.Char>)>>;

/// \ingroup compilation
/// \brief   nvrtcProgram is the unit of compilation, and an opaque handle for
/// a program.
///
/// To compile a CUDA program string, an instance of nvrtcProgram must be
/// created first with ::nvrtcCreateProgram, then compiled with
/// ::nvrtcCompileProgram.
typedef nvrtcProgram = ffi.Pointer<_nvrtcProgram>;
typedef NVRTC_NVRTCCOMPILEPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            nvrtcProgram, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef NVRTC_NVRTCCREATEPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<nvrtcProgram>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef NVRTC_NVRTCDESTROYPROGRAM = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nvrtcProgram>)>>;
typedef NVRTC_NVRTCGETLOWEREDNAME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvrtcProgram, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef NVRTC_NVRTCGETPTX = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvrtcProgram, ffi.Pointer<ffi.Char>)>>;
typedef NVRTC_NVRTCGETPTXSIZE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvrtcProgram, ffi.Pointer<ffi.Size>)>>;
typedef NVRTC_NVRTCGETPROGRAMLOG = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvrtcProgram, ffi.Pointer<ffi.Char>)>>;
typedef NVRTC_NVRTCGETPROGRAMLOGSIZE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvrtcProgram, ffi.Pointer<ffi.Size>)>>;
typedef NVRTC_NVRTCGETERRORSTRING = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>;
typedef NVRTC_NVRTCVERSION = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>;

abstract class hiprtcResult {
  static const int HIPRTC_SUCCESS = 0;
  static const int HIPRTC_ERROR_OUT_OF_MEMORY = 1;
  static const int HIPRTC_ERROR_PROGRAM_CREATION_FAILURE = 2;
  static const int HIPRTC_ERROR_INVALID_INPUT = 3;
  static const int HIPRTC_ERROR_INVALID_PROGRAM = 4;
  static const int HIPRTC_ERROR_INVALID_OPTION = 5;
  static const int HIPRTC_ERROR_COMPILATION = 6;
  static const int HIPRTC_ERROR_LINKING = 7;
  static const int HIPRTC_ERROR_BUILTIN_OPERATION_FAILURE = 8;
  static const int HIPRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION = 9;
  static const int HIPRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION = 10;
  static const int HIPRTC_ERROR_NAME_EXPRESSION_NOT_VALID = 11;
  static const int HIPRTC_ERROR_INTERNAL_ERROR = 12;
}

class _hiprtcProgram extends ffi.Opaque {}

class hc_hiprtc_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external HIPRTC_HIPRTCCOMPILEPROGRAM hiprtcCompileProgram;

  external HIPRTC_HIPRTCCREATEPROGRAM hiprtcCreateProgram;

  external HIPRTC_HIPRTCDESTROYPROGRAM hiprtcDestroyProgram;

  external HIPRTC_HIPRTCGETCODE hiprtcGetCode;

  external HIPRTC_HIPRTCGETCODESIZE hiprtcGetCodeSize;

  external HIPRTC_HIPRTCGETPROGRAMLOG hiprtcGetProgramLog;

  external HIPRTC_HIPRTCGETPROGRAMLOGSIZE hiprtcGetProgramLogSize;

  external HIPRTC_HIPRTCGETERRORSTRING hiprtcGetErrorString;
}

typedef HIPRTC_HIPRTCCOMPILEPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            hiprtcProgram, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef hiprtcProgram = ffi.Pointer<_hiprtcProgram>;
typedef HIPRTC_HIPRTCCREATEPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<hiprtcProgram>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef HIPRTC_HIPRTCDESTROYPROGRAM = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hiprtcProgram>)>>;
typedef HIPRTC_HIPRTCGETCODE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(hiprtcProgram, ffi.Pointer<ffi.Char>)>>;
typedef HIPRTC_HIPRTCGETCODESIZE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(hiprtcProgram, ffi.Pointer<ffi.Size>)>>;
typedef HIPRTC_HIPRTCGETPROGRAMLOG = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(hiprtcProgram, ffi.Pointer<ffi.Char>)>>;
typedef HIPRTC_HIPRTCGETPROGRAMLOGSIZE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(hiprtcProgram, ffi.Pointer<ffi.Size>)>>;
typedef HIPRTC_HIPRTCGETERRORSTRING = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>;

class CUctx_st extends ffi.Opaque {}

class CUevent_st extends ffi.Opaque {}

class CUfunc_st extends ffi.Opaque {}

class CUmod_st extends ffi.Opaque {}

class CUstream_st extends ffi.Opaque {}

class CUlinkState_st extends ffi.Opaque {}

abstract class cudaError_enum {
  /// The API call returned with no errors. In the case of query calls, this
  /// also means that the operation being queried is complete (see
  /// ::cuEventQuery() and ::cuStreamQuery()).
  static const int CUDA_SUCCESS = 0;

  /// This indicates that one or more of the parameters passed to the API call
  /// is not within an acceptable range of values.
  static const int CUDA_ERROR_INVALID_VALUE = 1;

  /// The API call failed because it was unable to allocate enough memory to
  /// perform the requested operation.
  static const int CUDA_ERROR_OUT_OF_MEMORY = 2;

  /// This indicates that the CUDA driver has not been initialized with
  /// ::cuInit() or that initialization has failed.
  static const int CUDA_ERROR_NOT_INITIALIZED = 3;

  /// This indicates that the CUDA driver is in the process of shutting down.
  static const int CUDA_ERROR_DEINITIALIZED = 4;

  /// This indicates profiler is not initialized for this run. This can
  /// happen when the application is running with external profiling tools
  /// like visual profiler.
  static const int CUDA_ERROR_PROFILER_DISABLED = 5;

  /// \deprecated
  /// This error return is deprecated as of CUDA 5.0. It is no longer an error
  /// to attempt to enable/disable the profiling via ::cuProfilerStart or
  /// ::cuProfilerStop without initialization.
  static const int CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6;

  /// \deprecated
  /// This error return is deprecated as of CUDA 5.0. It is no longer an error
  /// to call cuProfilerStart() when profiling is already enabled.
  static const int CUDA_ERROR_PROFILER_ALREADY_STARTED = 7;

  /// \deprecated
  /// This error return is deprecated as of CUDA 5.0. It is no longer an error
  /// to call cuProfilerStop() when profiling is already disabled.
  static const int CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8;

  /// This indicates that no CUDA-capable devices were detected by the installed
  /// CUDA driver.
  static const int CUDA_ERROR_NO_DEVICE = 100;

  /// This indicates that the device ordinal supplied by the user does not
  /// correspond to a valid CUDA device.
  static const int CUDA_ERROR_INVALID_DEVICE = 101;

  /// This indicates that the device kernel image is invalid. This can also
  /// indicate an invalid CUDA module.
  static const int CUDA_ERROR_INVALID_IMAGE = 200;

  /// This most frequently indicates that there is no context bound to the
  /// current thread. This can also be returned if the context passed to an
  /// API call is not a valid handle (such as a context that has had
  /// ::cuCtxDestroy() invoked on it). This can also be returned if a user
  /// mixes different API versions (i.e. 3010 context with 3020 API calls).
  /// See ::cuCtxGetApiVersion() for more details.
  static const int CUDA_ERROR_INVALID_CONTEXT = 201;

  /// This indicated that the context being supplied as a parameter to the
  /// API call was already the active context.
  /// \deprecated
  /// This error return is deprecated as of CUDA 3.2. It is no longer an
  /// error to attempt to push the active context via ::cuCtxPushCurrent().
  static const int CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 202;

  /// This indicates that a map or register operation has failed.
  static const int CUDA_ERROR_MAP_FAILED = 205;

  /// This indicates that an unmap or unregister operation has failed.
  static const int CUDA_ERROR_UNMAP_FAILED = 206;

  /// This indicates that the specified array is currently mapped and thus
  /// cannot be destroyed.
  static const int CUDA_ERROR_ARRAY_IS_MAPPED = 207;

  /// This indicates that the resource is already mapped.
  static const int CUDA_ERROR_ALREADY_MAPPED = 208;

  /// This indicates that there is no kernel image available that is suitable
  /// for the device. This can occur when a user specifies code generation
  /// options for a particular CUDA source file that do not include the
  /// corresponding device configuration.
  static const int CUDA_ERROR_NO_BINARY_FOR_GPU = 209;

  /// This indicates that a resource has already been acquired.
  static const int CUDA_ERROR_ALREADY_ACQUIRED = 210;

  /// This indicates that a resource is not mapped.
  static const int CUDA_ERROR_NOT_MAPPED = 211;

  /// This indicates that a mapped resource is not available for access as an
  /// array.
  static const int CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 212;

  /// This indicates that a mapped resource is not available for access as a
  /// pointer.
  static const int CUDA_ERROR_NOT_MAPPED_AS_POINTER = 213;

  /// This indicates that an uncorrectable ECC error was detected during
  /// execution.
  static const int CUDA_ERROR_ECC_UNCORRECTABLE = 214;

  /// This indicates that the ::CUlimit passed to the API call is not
  /// supported by the active device.
  static const int CUDA_ERROR_UNSUPPORTED_LIMIT = 215;

  /// This indicates that the ::CUcontext passed to the API call can
  /// only be bound to a single CPU thread at a time but is already
  /// bound to a CPU thread.
  static const int CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 216;

  /// This indicates that peer access is not supported across the given
  /// devices.
  static const int CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 217;

  /// This indicates that a PTX JIT compilation failed.
  static const int CUDA_ERROR_INVALID_PTX = 218;

  /// This indicates an error with OpenGL or DirectX context.
  static const int CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 219;

  /// This indicates that an uncorrectable NVLink error was detected during the
  /// execution.
  static const int CUDA_ERROR_NVLINK_UNCORRECTABLE = 220;

  /// This indicates that the PTX JIT compiler library was not found.
  static const int CUDA_ERROR_JIT_COMPILER_NOT_FOUND = 221;

  /// This indicates that the device kernel source is invalid.
  static const int CUDA_ERROR_INVALID_SOURCE = 300;

  /// This indicates that the file specified was not found.
  static const int CUDA_ERROR_FILE_NOT_FOUND = 301;

  /// This indicates that a link to a shared object failed to resolve.
  static const int CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302;

  /// This indicates that initialization of a shared object failed.
  static const int CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 303;

  /// This indicates that an OS call failed.
  static const int CUDA_ERROR_OPERATING_SYSTEM = 304;

  /// This indicates that a resource handle passed to the API call was not
  /// valid. Resource handles are opaque types like ::CUstream and ::CUevent.
  static const int CUDA_ERROR_INVALID_HANDLE = 400;

  /// This indicates that a resource required by the API call is not in a
  /// valid state to perform the requested operation.
  static const int CUDA_ERROR_ILLEGAL_STATE = 401;

  /// This indicates that a named symbol was not found. Examples of symbols
  /// are global/constant variable names, texture names, and surface names.
  static const int CUDA_ERROR_NOT_FOUND = 500;

  /// This indicates that asynchronous operations issued previously have not
  /// completed yet. This result is not actually an error, but must be indicated
  /// differently than ::CUDA_SUCCESS (which indicates completion). Calls that
  /// may return this value include ::cuEventQuery() and ::cuStreamQuery().
  static const int CUDA_ERROR_NOT_READY = 600;

  /// While executing a kernel, the device encountered a
  /// load or store instruction on an invalid memory address.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_ILLEGAL_ADDRESS = 700;

  /// This indicates that a launch did not occur because it did not have
  /// appropriate resources. This error usually indicates that the user has
  /// attempted to pass too many arguments to the device kernel, or the
  /// kernel launch specifies too many threads for the kernel's register
  /// count. Passing arguments of the wrong size (i.e. a 64-bit pointer
  /// when a 32-bit int is expected) is equivalent to passing too many
  /// arguments and can also result in this error.
  static const int CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 701;

  /// This indicates that the device kernel took too long to execute. This can
  /// only occur if timeouts are enabled - see the device attribute
  /// ::CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT for more information.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_LAUNCH_TIMEOUT = 702;

  /// This error indicates a kernel launch that uses an incompatible texturing
  /// mode.
  static const int CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 703;

  /// This error indicates that a call to ::cuCtxEnablePeerAccess() is
  /// trying to re-enable peer access to a context which has already
  /// had peer access to it enabled.
  static const int CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 704;

  /// This error indicates that ::cuCtxDisablePeerAccess() is
  /// trying to disable peer access which has not been enabled yet
  /// via ::cuCtxEnablePeerAccess().
  static const int CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 705;

  /// This error indicates that the primary context for the specified device
  /// has already been initialized.
  static const int CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708;

  /// This error indicates that the context current to the calling thread
  /// has been destroyed using ::cuCtxDestroy, or is a primary context which
  /// has not yet been initialized.
  static const int CUDA_ERROR_CONTEXT_IS_DESTROYED = 709;

  /// A device-side assert triggered during kernel execution. The context
  /// cannot be used anymore, and must be destroyed. All existing device
  /// memory allocations from this context are invalid and must be
  /// reconstructed if the program is to continue using CUDA.
  static const int CUDA_ERROR_ASSERT = 710;

  /// This error indicates that the hardware resources required to enable
  /// peer access have been exhausted for one or more of the devices
  /// passed to ::cuCtxEnablePeerAccess().
  static const int CUDA_ERROR_TOO_MANY_PEERS = 711;

  /// This error indicates that the memory range passed to ::cuMemHostRegister()
  /// has already been registered.
  static const int CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712;

  /// This error indicates that the pointer passed to ::cuMemHostUnregister()
  /// does not correspond to any currently registered memory region.
  static const int CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 713;

  /// While executing a kernel, the device encountered a stack error.
  /// This can be due to stack corruption or exceeding the stack size limit.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_HARDWARE_STACK_ERROR = 714;

  /// While executing a kernel, the device encountered an illegal instruction.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_ILLEGAL_INSTRUCTION = 715;

  /// While executing a kernel, the device encountered a load or store instruction
  /// on a memory address which is not aligned.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_MISALIGNED_ADDRESS = 716;

  /// While executing a kernel, the device encountered an instruction
  /// which can only operate on memory locations in certain address spaces
  /// (global, shared, or local), but was supplied a memory address not
  /// belonging to an allowed address space.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_INVALID_ADDRESS_SPACE = 717;

  /// While executing a kernel, the device program counter wrapped its address space.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_INVALID_PC = 718;

  /// An exception occurred on the device while executing a kernel. Common
  /// causes include dereferencing an invalid device pointer and accessing
  /// out of bounds shared memory. Less common cases can be system specific - more
  /// information about these cases can be found in the system specific user guide.
  /// This leaves the process in an inconsistent state and any further CUDA work
  /// will return the same error. To continue using CUDA, the process must be terminated
  /// and relaunched.
  static const int CUDA_ERROR_LAUNCH_FAILED = 719;

  /// This error indicates that the number of blocks launched per grid for a kernel that was
  /// launched via either ::cuLaunchCooperativeKernel or ::cuLaunchCooperativeKernelMultiDevice
  /// exceeds the maximum number of blocks as allowed by ::cuOccupancyMaxActiveBlocksPerMultiprocessor
  /// or ::cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags times the number of multiprocessors
  /// as specified by the device attribute ::CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT.
  static const int CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE = 720;

  /// This error indicates that the attempted operation is not permitted.
  static const int CUDA_ERROR_NOT_PERMITTED = 800;

  /// This error indicates that the attempted operation is not supported
  /// on the current system or device.
  static const int CUDA_ERROR_NOT_SUPPORTED = 801;

  /// This error indicates that the system is not yet ready to start any CUDA
  /// work.  To continue using CUDA, verify the system configuration is in a
  /// valid state and all required driver daemons are actively running.
  /// More information about this error can be found in the system specific
  /// user guide.
  static const int CUDA_ERROR_SYSTEM_NOT_READY = 802;

  /// This error indicates that there is a mismatch between the versions of
  /// the display driver and the CUDA driver. Refer to the compatibility documentation
  /// for supported versions.
  static const int CUDA_ERROR_SYSTEM_DRIVER_MISMATCH = 803;

  /// This error indicates that the system was upgraded to run with forward compatibility
  /// but the visible hardware detected by CUDA does not support this configuration.
  /// Refer to the compatibility documentation for the supported hardware matrix or ensure
  /// that only supported hardware is visible during initialization via the CUDA_VISIBLE_DEVICES
  /// environment variable.
  static const int CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE = 804;

  /// This error indicates that the operation is not permitted when
  /// the stream is capturing.
  static const int CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED = 900;

  /// This error indicates that the current capture sequence on the stream
  /// has been invalidated due to a previous error.
  static const int CUDA_ERROR_STREAM_CAPTURE_INVALIDATED = 901;

  /// This error indicates that the operation would have resulted in a merge
  /// of two independent capture sequences.
  static const int CUDA_ERROR_STREAM_CAPTURE_MERGE = 902;

  /// This error indicates that the capture was not initiated in this stream.
  static const int CUDA_ERROR_STREAM_CAPTURE_UNMATCHED = 903;

  /// This error indicates that the capture sequence contains a fork that was
  /// not joined to the primary stream.
  static const int CUDA_ERROR_STREAM_CAPTURE_UNJOINED = 904;

  /// This error indicates that a dependency would have been created which
  /// crosses the capture sequence boundary. Only implicit in-stream ordering
  /// dependencies are allowed to cross the boundary.
  static const int CUDA_ERROR_STREAM_CAPTURE_ISOLATION = 905;

  /// This error indicates a disallowed implicit dependency on a current capture
  /// sequence from cudaStreamLegacy.
  static const int CUDA_ERROR_STREAM_CAPTURE_IMPLICIT = 906;

  /// This error indicates that the operation is not permitted on an event which
  /// was last recorded in a capturing stream.
  static const int CUDA_ERROR_CAPTURED_EVENT = 907;

  /// A stream capture sequence not initiated with the ::CU_STREAM_CAPTURE_MODE_RELAXED
  /// argument to ::cuStreamBeginCapture was passed to ::cuStreamEndCapture in a
  /// different thread.
  static const int CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD = 908;

  /// This indicates that an unknown internal error has occurred.
  static const int CUDA_ERROR_UNKNOWN = 999;
}

/// Online compiler and linker options
abstract class CUjit_option_enum {
  /// Max number of registers that a thread may use.\n
  /// Option type: unsigned int\n
  /// Applies to: compiler only
  static const int CU_JIT_MAX_REGISTERS = 0;

  /// IN: Specifies minimum number of threads per block to target compilation
  /// for\n
  /// OUT: Returns the number of threads the compiler actually targeted.
  /// This restricts the resource utilization fo the compiler (e.g. max
  /// registers) such that a block with the given number of threads should be
  /// able to launch based on register limitations. Note, this option does not
  /// currently take into account any other resource limitations, such as
  /// shared memory utilization.\n
  /// Cannot be combined with ::CU_JIT_TARGET.\n
  /// Option type: unsigned int\n
  /// Applies to: compiler only
  static const int CU_JIT_THREADS_PER_BLOCK = 1;

  /// Overwrites the option value with the total wall clock time, in
  /// milliseconds, spent in the compiler and linker\n
  /// Option type: float\n
  /// Applies to: compiler and linker
  static const int CU_JIT_WALL_TIME = 2;

  /// Pointer to a buffer in which to print any log messages
  /// that are informational in nature (the buffer size is specified via
  /// option ::CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES)\n
  /// Option type: char *\n
  /// Applies to: compiler and linker
  static const int CU_JIT_INFO_LOG_BUFFER = 3;

  /// IN: Log buffer size in bytes.  Log messages will be capped at this size
  /// (including null terminator)\n
  /// OUT: Amount of log buffer filled with messages\n
  /// Option type: unsigned int\n
  /// Applies to: compiler and linker
  static const int CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES = 4;

  /// Pointer to a buffer in which to print any log messages that
  /// reflect errors (the buffer size is specified via option
  /// ::CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES)\n
  /// Option type: char *\n
  /// Applies to: compiler and linker
  static const int CU_JIT_ERROR_LOG_BUFFER = 5;

  /// IN: Log buffer size in bytes.  Log messages will be capped at this size
  /// (including null terminator)\n
  /// OUT: Amount of log buffer filled with messages\n
  /// Option type: unsigned int\n
  /// Applies to: compiler and linker
  static const int CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES = 6;

  /// Level of optimizations to apply to generated code (0 - 4), with 4
  /// being the default and highest level of optimizations.\n
  /// Option type: unsigned int\n
  /// Applies to: compiler only
  static const int CU_JIT_OPTIMIZATION_LEVEL = 7;

  /// No option value required. Determines the target based on the current
  /// attached context (default)\n
  /// Option type: No option value needed\n
  /// Applies to: compiler and linker
  static const int CU_JIT_TARGET_FROM_CUCONTEXT = 8;

  /// Target is chosen based on supplied ::CUjit_target.  Cannot be
  /// combined with ::CU_JIT_THREADS_PER_BLOCK.\n
  /// Option type: unsigned int for enumerated type ::CUjit_target\n
  /// Applies to: compiler and linker
  static const int CU_JIT_TARGET = 9;

  /// Specifies choice of fallback strategy if matching cubin is not found.
  /// Choice is based on supplied ::CUjit_fallback.  This option cannot be
  /// used with cuLink* APIs as the linker requires exact matches.\n
  /// Option type: unsigned int for enumerated type ::CUjit_fallback\n
  /// Applies to: compiler only
  static const int CU_JIT_FALLBACK_STRATEGY = 10;

  /// Specifies whether to create debug information in output (-g)
  /// (0: false, default)\n
  /// Option type: int\n
  /// Applies to: compiler and linker
  static const int CU_JIT_GENERATE_DEBUG_INFO = 11;

  /// Generate verbose log messages (0: false, default)\n
  /// Option type: int\n
  /// Applies to: compiler and linker
  static const int CU_JIT_LOG_VERBOSE = 12;

  /// Generate line number information (-lineinfo) (0: false, default)\n
  /// Option type: int\n
  /// Applies to: compiler only
  static const int CU_JIT_GENERATE_LINE_INFO = 13;

  /// Specifies whether to enable caching explicitly (-dlcm) \n
  /// Choice is based on supplied ::CUjit_cacheMode_enum.\n
  /// Option type: unsigned int for enumerated type ::CUjit_cacheMode_enum\n
  /// Applies to: compiler only
  static const int CU_JIT_CACHE_MODE = 14;

  /// The below jit options are used for internal purposes only, in this version of CUDA
  static const int CU_JIT_NEW_SM3X_OPT = 15;
  static const int CU_JIT_FAST_COMPILE = 16;

  /// Array of device symbol names that will be relocated to the corresponing
  /// host addresses stored in ::CU_JIT_GLOBAL_SYMBOL_ADDRESSES.\n
  /// Must contain ::CU_JIT_GLOBAL_SYMBOL_COUNT entries.\n
  /// When loding a device module, driver will relocate all encountered
  /// unresolved symbols to the host addresses.\n
  /// It is only allowed to register symbols that correspond to unresolved
  /// global variables.\n
  /// It is illegal to register the same device symbol at multiple addresses.\n
  /// Option type: const char **\n
  /// Applies to: dynamic linker only
  static const int CU_JIT_GLOBAL_SYMBOL_NAMES = 17;

  /// Array of host addresses that will be used to relocate corresponding
  /// device symbols stored in ::CU_JIT_GLOBAL_SYMBOL_NAMES.\n
  /// Must contain ::CU_JIT_GLOBAL_SYMBOL_COUNT entries.\n
  /// Option type: void **\n
  /// Applies to: dynamic linker only
  static const int CU_JIT_GLOBAL_SYMBOL_ADDRESSES = 18;

  /// Number of entries in ::CU_JIT_GLOBAL_SYMBOL_NAMES and
  /// ::CU_JIT_GLOBAL_SYMBOL_ADDRESSES arrays.\n
  /// Option type: unsigned int\n
  /// Applies to: dynamic linker only
  static const int CU_JIT_GLOBAL_SYMBOL_COUNT = 19;
  static const int CU_JIT_NUM_OPTIONS = 20;
}

/// Device properties
abstract class CUdevice_attribute_enum {
  /// < Maximum number of threads per block
  static const int CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1;

  /// < Maximum block dimension X
  static const int CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2;

  /// < Maximum block dimension Y
  static const int CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3;

  /// < Maximum block dimension Z
  static const int CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4;

  /// < Maximum grid dimension X
  static const int CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5;

  /// < Maximum grid dimension Y
  static const int CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6;

  /// < Maximum grid dimension Z
  static const int CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7;

  /// < Maximum shared memory available per block in bytes
  static const int CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8;

  /// < Deprecated, use CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK
  static const int CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8;

  /// < Memory available on device for __constant__ variables in a CUDA C kernel in bytes
  static const int CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9;

  /// < Warp size in threads
  static const int CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10;

  /// < Maximum pitch in bytes allowed by memory copies
  static const int CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11;

  /// < Maximum number of 32-bit registers available per block
  static const int CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12;

  /// < Deprecated, use CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK
  static const int CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12;

  /// < Typical clock frequency in kilohertz
  static const int CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13;

  /// < Alignment requirement for textures
  static const int CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14;

  /// < Device can possibly copy memory and execute a kernel concurrently. Deprecated. Use instead CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT.
  static const int CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15;

  /// < Number of multiprocessors on device
  static const int CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16;

  /// < Specifies whether there is a run time limit on kernels
  static const int CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17;

  /// < Device is integrated with host memory
  static const int CU_DEVICE_ATTRIBUTE_INTEGRATED = 18;

  /// < Device can map host memory into CUDA address space
  static const int CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19;

  /// < Compute mode (See ::CUcomputemode for details)
  static const int CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20;

  /// < Maximum 1D texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21;

  /// < Maximum 2D texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22;

  /// < Maximum 2D texture height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23;

  /// < Maximum 3D texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24;

  /// < Maximum 3D texture height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25;

  /// < Maximum 3D texture depth
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26;

  /// < Maximum 2D layered texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27;

  /// < Maximum 2D layered texture height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28;

  /// < Maximum layers in a 2D layered texture
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29;

  /// < Deprecated, use CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27;

  /// < Deprecated, use CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28;

  /// < Deprecated, use CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29;

  /// < Alignment requirement for surfaces
  static const int CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30;

  /// < Device can possibly execute multiple kernels concurrently
  static const int CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31;

  /// < Device has ECC support enabled
  static const int CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32;

  /// < PCI bus ID of the device
  static const int CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33;

  /// < PCI device ID of the device
  static const int CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34;

  /// < Device is using TCC driver model
  static const int CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35;

  /// < Peak memory clock frequency in kilohertz
  static const int CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36;

  /// < Global memory bus width in bits
  static const int CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37;

  /// < Size of L2 cache in bytes
  static const int CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38;

  /// < Maximum resident threads per multiprocessor
  static const int CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39;

  /// < Number of asynchronous engines
  static const int CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40;

  /// < Device shares a unified address space with the host
  static const int CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41;

  /// < Maximum 1D layered texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42;

  /// < Maximum layers in a 1D layered texture
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43;

  /// < Deprecated, do not use.
  static const int CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44;

  /// < Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER is set
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45;

  /// < Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER is set
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46;

  /// < Alternate maximum 3D texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47;

  /// < Alternate maximum 3D texture height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48;

  /// < Alternate maximum 3D texture depth
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49;

  /// < PCI domain ID of the device
  static const int CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50;

  /// < Pitch alignment requirement for textures
  static const int CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51;

  /// < Maximum cubemap texture width/height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52;

  /// < Maximum cubemap layered texture width/height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH =
      53;

  /// < Maximum layers in a cubemap layered texture
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS =
      54;

  /// < Maximum 1D surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55;

  /// < Maximum 2D surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56;

  /// < Maximum 2D surface height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57;

  /// < Maximum 3D surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58;

  /// < Maximum 3D surface height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59;

  /// < Maximum 3D surface depth
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60;

  /// < Maximum 1D layered surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61;

  /// < Maximum layers in a 1D layered surface
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62;

  /// < Maximum 2D layered surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63;

  /// < Maximum 2D layered surface height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64;

  /// < Maximum layers in a 2D layered surface
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65;

  /// < Maximum cubemap surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66;

  /// < Maximum cubemap layered surface width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH =
      67;

  /// < Maximum layers in a cubemap layered surface
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS =
      68;

  /// < Maximum 1D linear texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69;

  /// < Maximum 2D linear texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70;

  /// < Maximum 2D linear texture height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71;

  /// < Maximum 2D linear texture pitch in bytes
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72;

  /// < Maximum mipmapped 2D texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73;

  /// < Maximum mipmapped 2D texture height
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74;

  /// < Major compute capability version number
  static const int CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75;

  /// < Minor compute capability version number
  static const int CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76;

  /// < Maximum mipmapped 1D texture width
  static const int CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77;

  /// < Device supports stream priorities
  static const int CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78;

  /// < Device supports caching globals in L1
  static const int CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79;

  /// < Device supports caching locals in L1
  static const int CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80;

  /// < Maximum shared memory available per multiprocessor in bytes
  static const int CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR =
      81;

  /// < Maximum number of 32-bit registers available per multiprocessor
  static const int CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82;

  /// < Device can allocate managed memory on this system
  static const int CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83;

  /// < Device is on a multi-GPU board
  static const int CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84;

  /// < Unique id for a group of devices on the same multi-GPU board
  static const int CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85;

  /// < Link between the device and the host supports native atomic operations (this is a placeholder attribute, and is not supported on any current hardware)
  static const int CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86;

  /// < Ratio of single precision performance (in floating-point operations per second) to double precision performance
  static const int CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO =
      87;

  /// < Device supports coherently accessing pageable memory without calling cudaHostRegister on it
  static const int CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88;

  /// < Device can coherently access managed memory concurrently with the CPU
  static const int CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89;

  /// < Device supports compute preemption.
  static const int CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90;

  /// < Device can access host registered memory at the same virtual address as the CPU
  static const int CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM =
      91;

  /// < ::cuStreamBatchMemOp and related APIs are supported.
  static const int CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS = 92;

  /// < 64-bit operations are supported in ::cuStreamBatchMemOp and related APIs.
  static const int CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS = 93;

  /// < ::CU_STREAM_WAIT_VALUE_NOR is supported.
  static const int CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR = 94;

  /// < Device supports launching cooperative kernels via ::cuLaunchCooperativeKernel
  static const int CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH = 95;

  /// < Device can participate in cooperative kernels launched via ::cuLaunchCooperativeKernelMultiDevice
  static const int CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH = 96;

  /// < Maximum optin shared memory per block
  static const int CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN = 97;

  /// < Both the ::CU_STREAM_WAIT_VALUE_FLUSH flag and the ::CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES MemOp are supported on the device. See \ref CUDA_MEMOP for additional details.
  static const int CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES = 98;

  /// < Device supports host memory registration via ::cudaHostRegister.
  static const int CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED = 99;

  /// < Device accesses pageable memory via the host's page tables.
  static const int
      CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES = 100;

  /// < The host can directly access managed memory on the device without migration.
  static const int CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST =
      101;
  static const int CU_DEVICE_ATTRIBUTE_MAX = 102;
}

/// Function cache configurations
abstract class CUfunc_cache_enum {
  /// < no preference for shared memory or L1 (default)
  static const int CU_FUNC_CACHE_PREFER_NONE = 0;

  /// < prefer larger shared memory and smaller L1 cache
  static const int CU_FUNC_CACHE_PREFER_SHARED = 1;

  /// < prefer larger L1 cache and smaller shared memory
  static const int CU_FUNC_CACHE_PREFER_L1 = 2;

  /// < prefer equal sized L1 cache and shared memory
  static const int CU_FUNC_CACHE_PREFER_EQUAL = 3;
}

/// Shared memory configurations
abstract class CUsharedconfig_enum {
  /// < set default shared memory bank size
  static const int CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0;

  /// < set shared memory bank width to four bytes
  static const int CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 1;

  /// < set shared memory bank width to eight bytes
  static const int CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 2;
}

/// Function properties
abstract class CUfunction_attribute_enum {
  /// The maximum number of threads per block, beyond which a launch of the
  /// function would fail. This number depends on both the function and the
  /// device on which the function is currently loaded.
  static const int CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0;

  /// The size in bytes of statically-allocated shared memory required by
  /// this function. This does not include dynamically-allocated shared
  /// memory requested by the user at runtime.
  static const int CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1;

  /// The size in bytes of user-allocated constant memory required by this
  /// function.
  static const int CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2;

  /// The size in bytes of local memory used by each thread of this function.
  static const int CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3;

  /// The number of registers used by each thread of this function.
  static const int CU_FUNC_ATTRIBUTE_NUM_REGS = 4;

  /// The PTX virtual architecture version for which the function was
  /// compiled. This value is the major PTX version * 10 + the minor PTX
  /// version, so a PTX version 1.3 function would return the value 13.
  /// Note that this may return the undefined value of 0 for cubins
  /// compiled prior to CUDA 3.0.
  static const int CU_FUNC_ATTRIBUTE_PTX_VERSION = 5;

  /// The binary architecture version for which the function was compiled.
  /// This value is the major binary version * 10 + the minor binary version,
  /// so a binary version 1.3 function would return the value 13. Note that
  /// this will return a value of 10 for legacy cubins that do not have a
  /// properly-encoded binary architecture version.
  static const int CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6;

  /// The attribute to indicate whether the function has been compiled with
  /// user specified option "-Xptxas --dlcm=ca" set .
  static const int CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7;

  /// The maximum size in bytes of dynamically-allocated shared memory that can be used by
  /// this function. If the user-specified dynamic shared memory size is larger than this
  /// value, the launch will fail.
  /// See ::cuFuncSetAttribute
  static const int CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8;

  /// On devices where the L1 cache and shared memory use the same hardware resources,
  /// this sets the shared memory carveout preference, in percent of the total shared memory.
  /// Refer to ::CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR.
  /// This is only a hint, and the driver can choose a different ratio if required to execute the function.
  /// See ::cuFuncSetAttribute
  static const int CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9;
  static const int CU_FUNC_ATTRIBUTE_MAX = 10;
}

/// Context creation flags
abstract class CUctx_flags_enum {
  /// < Automatic scheduling
  static const int CU_CTX_SCHED_AUTO = 0;

  /// < Set spin as default scheduling
  static const int CU_CTX_SCHED_SPIN = 1;

  /// < Set yield as default scheduling
  static const int CU_CTX_SCHED_YIELD = 2;

  /// < Set blocking synchronization as default scheduling
  static const int CU_CTX_SCHED_BLOCKING_SYNC = 4;

  /// < Set blocking synchronization as default scheduling
  /// \deprecated This flag was deprecated as of CUDA 4.0
  /// and was replaced with ::CU_CTX_SCHED_BLOCKING_SYNC.
  static const int CU_CTX_BLOCKING_SYNC = 4;
  static const int CU_CTX_SCHED_MASK = 7;

  /// < Support mapped pinned allocations
  static const int CU_CTX_MAP_HOST = 8;

  /// < Keep local memory allocation after launch
  static const int CU_CTX_LMEM_RESIZE_TO_MAX = 16;
  static const int CU_CTX_FLAGS_MASK = 31;
}

/// Stream creation flags
abstract class CUstream_flags_enum {
  /// < Default stream flag
  static const int CU_STREAM_DEFAULT = 0;

  /// < Stream does not synchronize with stream 0 (the NULL stream)
  static const int CU_STREAM_NON_BLOCKING = 1;
}

/// Event creation flags
abstract class CUevent_flags_enum {
  /// < Default event flag
  static const int CU_EVENT_DEFAULT = 0;

  /// < Event uses blocking synchronization
  static const int CU_EVENT_BLOCKING_SYNC = 1;

  /// < Event will not record timing data
  static const int CU_EVENT_DISABLE_TIMING = 2;

  /// < Event is suitable for interprocess use. CU_EVENT_DISABLE_TIMING must be set
  static const int CU_EVENT_INTERPROCESS = 4;
}

abstract class CUjitInputType_enum {
  /// Compiled device-class-specific device code\n
  /// Applicable options: none
  static const int CU_JIT_INPUT_CUBIN = 0;

  /// PTX source code\n
  /// Applicable options: PTX compiler options
  static const int CU_JIT_INPUT_PTX = 1;

  /// Bundle of multiple cubins and/or PTX of some device code\n
  /// Applicable options: PTX compiler options, ::CU_JIT_FALLBACK_STRATEGY
  static const int CU_JIT_INPUT_FATBINARY = 2;

  /// Host object with embedded device code\n
  /// Applicable options: PTX compiler options, ::CU_JIT_FALLBACK_STRATEGY
  static const int CU_JIT_INPUT_OBJECT = 3;

  /// Archive of host objects with embedded device code\n
  /// Applicable options: PTX compiler options, ::CU_JIT_FALLBACK_STRATEGY
  static const int CU_JIT_INPUT_LIBRARY = 4;
  static const int CU_JIT_NUM_INPUT_TYPES = 5;
}

class hc_cuda_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external CUDA_CUCTXCREATE cuCtxCreate;

  external CUDA_CUCTXDESTROY cuCtxDestroy;

  external CUDA_CUCTXGETCACHECONFIG cuCtxGetCacheConfig;

  external CUDA_CUCTXGETCURRENT cuCtxGetCurrent;

  external CUDA_CUCTXGETSHAREDMEMCONFIG cuCtxGetSharedMemConfig;

  external CUDA_CUCTXPOPCURRENT cuCtxPopCurrent;

  external CUDA_CUCTXPUSHCURRENT cuCtxPushCurrent;

  external CUDA_CUCTXSETCACHECONFIG cuCtxSetCacheConfig;

  external CUDA_CUCTXSETCURRENT cuCtxSetCurrent;

  external CUDA_CUCTXSETSHAREDMEMCONFIG cuCtxSetSharedMemConfig;

  external CUDA_CUCTXSYNCHRONIZE cuCtxSynchronize;

  external CUDA_CUDEVICEGETATTRIBUTE cuDeviceGetAttribute;

  external CUDA_CUDEVICEGETCOUNT cuDeviceGetCount;

  external CUDA_CUDEVICEGET cuDeviceGet;

  external CUDA_CUDEVICEGETNAME cuDeviceGetName;

  external CUDA_CUDEVICETOTALMEM cuDeviceTotalMem;

  external CUDA_CUDRIVERGETVERSION cuDriverGetVersion;

  external CUDA_CUEVENTCREATE cuEventCreate;

  external CUDA_CUEVENTDESTROY cuEventDestroy;

  external CUDA_CUEVENTELAPSEDTIME cuEventElapsedTime;

  external CUDA_CUEVENTQUERY cuEventQuery;

  external CUDA_CUEVENTRECORD cuEventRecord;

  external CUDA_CUEVENTSYNCHRONIZE cuEventSynchronize;

  external CUDA_CUFUNCGETATTRIBUTE cuFuncGetAttribute;

  external CUDA_CUFUNCSETATTRIBUTE cuFuncSetAttribute;

  external CUDA_CUFUNCSETCACHECONFIG cuFuncSetCacheConfig;

  external CUDA_CUFUNCSETSHAREDMEMCONFIG cuFuncSetSharedMemConfig;

  external CUDA_CUGETERRORNAME cuGetErrorName;

  external CUDA_CUGETERRORSTRING cuGetErrorString;

  external CUDA_CUINIT cuInit;

  external CUDA_CULAUNCHKERNEL cuLaunchKernel;

  external CUDA_CUMEMALLOC cuMemAlloc;

  external CUDA_CUMEMALLOCHOST cuMemAllocHost;

  external CUDA_CUMEMCPYDTODASYNC cuMemcpyDtoDAsync;

  external CUDA_CUMEMCPYDTOHASYNC cuMemcpyDtoHAsync;

  external CUDA_CUMEMCPYHTODASYNC cuMemcpyHtoDAsync;

  external CUDA_CUMEMFREE cuMemFree;

  external CUDA_CUMEMFREEHOST cuMemFreeHost;

  external CUDA_CUMEMGETINFO cuMemGetInfo;

  external CUDA_CUMEMSETD32ASYNC cuMemsetD32Async;

  external CUDA_CUMEMSETD8ASYNC cuMemsetD8Async;

  external CUDA_CUMODULEGETFUNCTION cuModuleGetFunction;

  external CUDA_CUMODULEGETGLOBAL cuModuleGetGlobal;

  external CUDA_CUMODULELOAD cuModuleLoad;

  external CUDA_CUMODULELOADDATA cuModuleLoadData;

  external CUDA_CUMODULELOADDATAEX cuModuleLoadDataEx;

  external CUDA_CUMODULEUNLOAD cuModuleUnload;

  external CUDA_CUPROFILERSTART cuProfilerStart;

  external CUDA_CUPROFILERSTOP cuProfilerStop;

  external CUDA_CUSTREAMCREATE cuStreamCreate;

  external CUDA_CUSTREAMDESTROY cuStreamDestroy;

  external CUDA_CUSTREAMSYNCHRONIZE cuStreamSynchronize;

  external CUDA_CUSTREAMWAITEVENT cuStreamWaitEvent;

  external CUDA_CULINKCREATE cuLinkCreate;

  external CUDA_CULINKADDDATA cuLinkAddData;

  external CUDA_CULINKDESTROY cuLinkDestroy;

  external CUDA_CULINKCOMPLETE cuLinkComplete;
}

typedef CUDA_CUCTXCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<CUcontext>, ffi.UnsignedInt, CUdevice)>>;
typedef CUcontext = ffi.Pointer<CUctx_st>;
typedef CUdevice = ffi.Int;
typedef CUDA_CUCTXDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUcontext)>>;
typedef CUDA_CUCTXGETCACHECONFIG = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int32>)>>;
typedef CUDA_CUCTXGETCURRENT = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CUcontext>)>>;
typedef CUDA_CUCTXGETSHAREDMEMCONFIG = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int32>)>>;
typedef CUDA_CUCTXPOPCURRENT = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CUcontext>)>>;
typedef CUDA_CUCTXPUSHCURRENT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUcontext)>>;
typedef CUDA_CUCTXSETCACHECONFIG
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef CUDA_CUCTXSETCURRENT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUcontext)>>;
typedef CUDA_CUCTXSETSHAREDMEMCONFIG
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef CUDA_CUCTXSYNCHRONIZE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef CUDA_CUDEVICEGETATTRIBUTE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Int>, ffi.Int32, CUdevice)>>;
typedef CUDA_CUDEVICEGETCOUNT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int>)>>;
typedef CUDA_CUDEVICEGET = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CUdevice>, ffi.Int)>>;
typedef CUDA_CUDEVICEGETNAME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int, CUdevice)>>;
typedef CUDA_CUDEVICETOTALMEM = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Size>, CUdevice)>>;
typedef CUDA_CUDRIVERGETVERSION
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int>)>>;
typedef CUDA_CUEVENTCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<CUevent>, ffi.UnsignedInt)>>;
typedef CUevent = ffi.Pointer<CUevent_st>;
typedef CUDA_CUEVENTDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUevent)>>;
typedef CUDA_CUEVENTELAPSEDTIME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Float>, CUevent, CUevent)>>;
typedef CUDA_CUEVENTQUERY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUevent)>>;
typedef CUDA_CUEVENTRECORD
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUevent, CUstream)>>;
typedef CUstream = ffi.Pointer<CUstream_st>;
typedef CUDA_CUEVENTSYNCHRONIZE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUevent)>>;
typedef CUDA_CUFUNCGETATTRIBUTE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Int>, ffi.Int32, CUfunction)>>;
typedef CUfunction = ffi.Pointer<CUfunc_st>;
typedef CUDA_CUFUNCSETATTRIBUTE = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(CUfunction, ffi.Int32, ffi.Int)>>;
typedef CUDA_CUFUNCSETCACHECONFIG = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(CUfunction, ffi.Int32)>>;
typedef CUDA_CUFUNCSETSHAREDMEMCONFIG = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(CUfunction, ffi.Int32)>>;
typedef CUDA_CUGETERRORNAME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef CUDA_CUGETERRORSTRING = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef CUDA_CUINIT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.UnsignedInt)>>;
typedef CUDA_CULAUNCHKERNEL = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            CUfunction,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            CUstream,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef CUDA_CUMEMALLOC = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CUdeviceptr>, ffi.Size)>>;
typedef CUdeviceptr = ffi.UnsignedLongLong;
typedef CUDA_CUMEMALLOCHOST = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size)>>;
typedef CUDA_CUMEMCPYDTODASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(CUdeviceptr, CUdeviceptr, ffi.Size, CUstream)>>;
typedef CUDA_CUMEMCPYDTOHASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void>, CUdeviceptr, ffi.Size, CUstream)>>;
typedef CUDA_CUMEMCPYHTODASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            CUdeviceptr, ffi.Pointer<ffi.Void>, ffi.Size, CUstream)>>;
typedef CUDA_CUMEMFREE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUdeviceptr)>>;
typedef CUDA_CUMEMFREEHOST = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>;
typedef CUDA_CUMEMGETINFO = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Size>)>>;
typedef CUDA_CUMEMSETD32ASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(CUdeviceptr, ffi.UnsignedInt, ffi.Size, CUstream)>>;
typedef CUDA_CUMEMSETD8ASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(CUdeviceptr, ffi.UnsignedChar, ffi.Size, CUstream)>>;
typedef CUDA_CUMODULEGETFUNCTION = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<CUfunction>, CUmodule, ffi.Pointer<ffi.Char>)>>;
typedef CUmodule = ffi.Pointer<CUmod_st>;
typedef CUDA_CUMODULEGETGLOBAL = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<CUdeviceptr>, ffi.Pointer<ffi.Size>,
            CUmodule, ffi.Pointer<ffi.Char>)>>;
typedef CUDA_CUMODULELOAD = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<CUmodule>, ffi.Pointer<ffi.Char>)>>;
typedef CUDA_CUMODULELOADDATA = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<CUmodule>, ffi.Pointer<ffi.Void>)>>;
typedef CUDA_CUMODULELOADDATAEX = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<CUmodule>,
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Int32>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef CUDA_CUMODULEUNLOAD
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUmodule)>>;
typedef CUDA_CUPROFILERSTART
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef CUDA_CUPROFILERSTOP
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef CUDA_CUSTREAMCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<CUstream>, ffi.UnsignedInt)>>;
typedef CUDA_CUSTREAMDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUstream)>>;
typedef CUDA_CUSTREAMSYNCHRONIZE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUstream)>>;
typedef CUDA_CUSTREAMWAITEVENT = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(CUstream, CUevent, ffi.UnsignedInt)>>;
typedef CUDA_CULINKCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.UnsignedInt, ffi.Pointer<ffi.Int32>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<CUlinkState>)>>;
typedef CUlinkState = ffi.Pointer<CUlinkState_st>;
typedef CUDA_CULINKADDDATA = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            CUlinkState,
            ffi.Int32,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Int32>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef CUDA_CULINKDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CUlinkState)>>;
typedef CUDA_CULINKCOMPLETE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(CUlinkState, ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Size>)>>;

abstract class hipFunction_attribute {
  static const int HIP_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0;
  static const int HIP_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1;
  static const int HIP_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2;
  static const int HIP_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3;
  static const int HIP_FUNC_ATTRIBUTE_NUM_REGS = 4;
  static const int HIP_FUNC_ATTRIBUTE_PTX_VERSION = 5;
  static const int HIP_FUNC_ATTRIBUTE_BINARY_VERSION = 6;
  static const int HIP_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7;
  static const int HIP_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8;
  static const int HIP_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9;
  static const int HIP_FUNC_ATTRIBUTE_MAX = 10;
}

class ihipCtx_t extends ffi.Opaque {}

class ihipEvent_t extends ffi.Opaque {}

class ihipStream_t extends ffi.Opaque {}

class ihipModule_t extends ffi.Opaque {}

class ihipModuleSymbol_t extends ffi.Opaque {}

abstract class hipError_t {
  /// < Successful completion.
  static const int hipSuccess = 0;

  /// < One or more of the parameters passed to the API call is NULL
  /// < or not in an acceptable range.
  static const int hipErrorInvalidValue = 1;
  static const int hipErrorOutOfMemory = 2;

  /// < Memory allocation error.
  static const int hipErrorMemoryAllocation = 2;
  static const int hipErrorNotInitialized = 3;
  static const int hipErrorInitializationError = 3;
  static const int hipErrorDeinitialized = 4;
  static const int hipErrorProfilerDisabled = 5;
  static const int hipErrorProfilerNotInitialized = 6;
  static const int hipErrorProfilerAlreadyStarted = 7;
  static const int hipErrorProfilerAlreadyStopped = 8;
  static const int hipErrorInvalidConfiguration = 9;
  static const int hipErrorInvalidPitchValue = 12;
  static const int hipErrorInvalidSymbol = 13;

  /// < Invalid Device Pointer
  static const int hipErrorInvalidDevicePointer = 17;

  /// < Invalid memory copy direction
  static const int hipErrorInvalidMemcpyDirection = 21;
  static const int hipErrorInsufficientDriver = 35;
  static const int hipErrorMissingConfiguration = 52;
  static const int hipErrorPriorLaunchFailure = 53;
  static const int hipErrorInvalidDeviceFunction = 98;

  /// < Call to hipGetDeviceCount returned 0 devices
  static const int hipErrorNoDevice = 100;

  /// < DeviceID must be in range 0...#compute-devices.
  static const int hipErrorInvalidDevice = 101;
  static const int hipErrorInvalidImage = 200;

  /// < Produced when input context is invalid.
  static const int hipErrorInvalidContext = 201;
  static const int hipErrorContextAlreadyCurrent = 202;
  static const int hipErrorMapFailed = 205;

  /// < Produced when the IPC memory attach failed from ROCr.
  static const int hipErrorMapBufferObjectFailed = 205;
  static const int hipErrorUnmapFailed = 206;
  static const int hipErrorArrayIsMapped = 207;
  static const int hipErrorAlreadyMapped = 208;
  static const int hipErrorNoBinaryForGpu = 209;
  static const int hipErrorAlreadyAcquired = 210;
  static const int hipErrorNotMapped = 211;
  static const int hipErrorNotMappedAsArray = 212;
  static const int hipErrorNotMappedAsPointer = 213;
  static const int hipErrorECCNotCorrectable = 214;
  static const int hipErrorUnsupportedLimit = 215;
  static const int hipErrorContextAlreadyInUse = 216;
  static const int hipErrorPeerAccessUnsupported = 217;

  /// < In CUDA DRV, it is CUDA_ERROR_INVALID_PTX
  static const int hipErrorInvalidKernelFile = 218;
  static const int hipErrorInvalidGraphicsContext = 219;
  static const int hipErrorInvalidSource = 300;
  static const int hipErrorFileNotFound = 301;
  static const int hipErrorSharedObjectSymbolNotFound = 302;
  static const int hipErrorSharedObjectInitFailed = 303;
  static const int hipErrorOperatingSystem = 304;
  static const int hipErrorInvalidHandle = 400;

  /// < Resource handle (hipEvent_t or hipStream_t) invalid.
  static const int hipErrorInvalidResourceHandle = 400;

  /// < Resource required is not in a valid state to perform operation.
  static const int hipErrorIllegalState = 401;
  static const int hipErrorNotFound = 500;

  /// < Indicates that asynchronous operations enqueued earlier are not
  /// < ready.  This is not actually an error, but is used to distinguish
  /// < from hipSuccess (which indicates completion).  APIs that return
  /// < this error include hipEventQuery and hipStreamQuery.
  static const int hipErrorNotReady = 600;
  static const int hipErrorIllegalAddress = 700;

  /// < Out of resources error.
  static const int hipErrorLaunchOutOfResources = 701;
  static const int hipErrorLaunchTimeOut = 702;
  static const int hipErrorPeerAccessAlreadyEnabled = 704;
  static const int hipErrorPeerAccessNotEnabled = 705;
  static const int hipErrorSetOnActiveProcess = 708;
  static const int hipErrorContextIsDestroyed = 709;

  /// < Produced when the kernel calls assert.
  static const int hipErrorAssert = 710;
  static const int hipErrorHostMemoryAlreadyRegistered = 712;
  static const int hipErrorHostMemoryNotRegistered = 713;
  static const int hipErrorLaunchFailure = 719;
  static const int hipErrorCooperativeLaunchTooLarge = 720;

  /// < Produced when the hip API is not supported/implemented
  static const int hipErrorNotSupported = 801;

  /// < The operation is not permitted when the stream
  /// < is capturing.
  static const int hipErrorStreamCaptureUnsupported = 900;

  /// < The current capture sequence on the stream
  /// < has been invalidated due to a previous error.
  static const int hipErrorStreamCaptureInvalidated = 901;

  /// < The operation would have resulted in a merge of
  /// < two independent capture sequences.
  static const int hipErrorStreamCaptureMerge = 902;

  /// < The capture was not initiated in this stream.
  static const int hipErrorStreamCaptureUnmatched = 903;

  /// < The capture sequence contains a fork that was not
  /// < joined to the primary stream.
  static const int hipErrorStreamCaptureUnjoined = 904;

  /// < A dependency would have been created which crosses
  /// < the capture sequence boundary. Only implicit
  /// < in-stream ordering dependencies  are allowed
  /// < to cross the boundary
  static const int hipErrorStreamCaptureIsolation = 905;

  /// < The operation would have resulted in a disallowed
  /// < implicit dependency on a current capture sequence
  /// < from hipStreamLegacy.
  static const int hipErrorStreamCaptureImplicit = 906;

  /// < The operation is not permitted on an event which was last
  /// < recorded in a capturing stream.
  static const int hipErrorCapturedEvent = 907;

  /// < A stream capture sequence not initiated with
  /// < the hipStreamCaptureModeRelaxed argument to
  /// < hipStreamBeginCapture was passed to
  /// < hipStreamEndCapture in a different thread.
  static const int hipErrorStreamCaptureWrongThread = 908;

  /// < This error indicates that the graph update
  /// < not performed because it included changes which
  /// < violated constraintsspecific to instantiated graph
  /// < update.
  static const int hipErrorGraphExecUpdateFailure = 910;
  static const int hipErrorUnknown = 999;

  /// < HSA runtime memory call returned error.  Typically not seen
  /// < in production systems.
  static const int hipErrorRuntimeMemory = 1052;

  /// < HSA runtime call other than memory returned error.  Typically
  /// < not seen in production systems.
  static const int hipErrorRuntimeOther = 1053;

  /// < Marker that more error codes are needed.
  static const int hipErrorTbd = 1054;
}

abstract class hipDeviceAttribute_t {
  static const int hipDeviceAttributeCudaCompatibleBegin = 0;

  /// < Whether ECC support is enabled.
  static const int hipDeviceAttributeEccEnabled = 0;

  /// < Cuda only. The maximum size of the window policy in bytes.
  static const int hipDeviceAttributeAccessPolicyMaxWindowSize = 1;

  /// < Cuda only. Asynchronous engines number.
  static const int hipDeviceAttributeAsyncEngineCount = 2;

  /// < Whether host memory can be mapped into device address space
  static const int hipDeviceAttributeCanMapHostMemory = 3;

  /// < Cuda only. Device can access host registered memory
  /// < at the same virtual address as the CPU
  static const int hipDeviceAttributeCanUseHostPointerForRegisteredMem = 4;

  /// < Peak clock frequency in kilohertz.
  static const int hipDeviceAttributeClockRate = 5;

  /// < Compute mode that device is currently in.
  static const int hipDeviceAttributeComputeMode = 6;

  /// < Cuda only. Device supports Compute Preemption.
  static const int hipDeviceAttributeComputePreemptionSupported = 7;

  /// < Device can possibly execute multiple kernels concurrently.
  static const int hipDeviceAttributeConcurrentKernels = 8;

  /// < Device can coherently access managed memory concurrently with the CPU
  static const int hipDeviceAttributeConcurrentManagedAccess = 9;

  /// < Support cooperative launch
  static const int hipDeviceAttributeCooperativeLaunch = 10;

  /// < Support cooperative launch on multiple devices
  static const int hipDeviceAttributeCooperativeMultiDeviceLaunch = 11;

  /// < Cuda only. Device can concurrently copy memory and execute a kernel.
  /// < Deprecated. Use instead asyncEngineCount.
  static const int hipDeviceAttributeDeviceOverlap = 12;

  /// < Host can directly access managed memory on
  /// < the device without migration
  static const int hipDeviceAttributeDirectManagedMemAccessFromHost = 13;

  /// < Cuda only. Device supports caching globals in L1
  static const int hipDeviceAttributeGlobalL1CacheSupported = 14;

  /// < Cuda only. Link between the device and the host supports native atomic operations
  static const int hipDeviceAttributeHostNativeAtomicSupported = 15;

  /// < Device is integrated GPU
  static const int hipDeviceAttributeIntegrated = 16;

  /// < Multiple GPU devices.
  static const int hipDeviceAttributeIsMultiGpuBoard = 17;

  /// < Run time limit for kernels executed on the device
  static const int hipDeviceAttributeKernelExecTimeout = 18;

  /// < Size of L2 cache in bytes. 0 if the device doesn't have L2 cache.
  static const int hipDeviceAttributeL2CacheSize = 19;

  /// < caching locals in L1 is supported
  static const int hipDeviceAttributeLocalL1CacheSupported = 20;

  /// < Cuda only. 8-byte locally unique identifier in 8 bytes. Undefined on TCC and non-Windows platforms
  static const int hipDeviceAttributeLuid = 21;

  /// < Cuda only. Luid device node mask. Undefined on TCC and non-Windows platforms
  static const int hipDeviceAttributeLuidDeviceNodeMask = 22;

  /// < Major compute capability version number.
  static const int hipDeviceAttributeComputeCapabilityMajor = 23;

  /// < Device supports allocating managed memory on this system
  static const int hipDeviceAttributeManagedMemory = 24;

  /// < Cuda only. Max block size per multiprocessor
  static const int hipDeviceAttributeMaxBlocksPerMultiProcessor = 25;

  /// < Max block size in width.
  static const int hipDeviceAttributeMaxBlockDimX = 26;

  /// < Max block size in height.
  static const int hipDeviceAttributeMaxBlockDimY = 27;

  /// < Max block size in depth.
  static const int hipDeviceAttributeMaxBlockDimZ = 28;

  /// < Max grid size  in width.
  static const int hipDeviceAttributeMaxGridDimX = 29;

  /// < Max grid size  in height.
  static const int hipDeviceAttributeMaxGridDimY = 30;

  /// < Max grid size  in depth.
  static const int hipDeviceAttributeMaxGridDimZ = 31;

  /// < Maximum size of 1D surface.
  static const int hipDeviceAttributeMaxSurface1D = 32;

  /// < Cuda only. Maximum dimensions of 1D layered surface.
  static const int hipDeviceAttributeMaxSurface1DLayered = 33;

  /// < Maximum dimension (width, height) of 2D surface.
  static const int hipDeviceAttributeMaxSurface2D = 34;

  /// < Cuda only. Maximum dimensions of 2D layered surface.
  static const int hipDeviceAttributeMaxSurface2DLayered = 35;

  /// < Maximum dimension (width, height, depth) of 3D surface.
  static const int hipDeviceAttributeMaxSurface3D = 36;

  /// < Cuda only. Maximum dimensions of Cubemap surface.
  static const int hipDeviceAttributeMaxSurfaceCubemap = 37;

  /// < Cuda only. Maximum dimension of Cubemap layered surface.
  static const int hipDeviceAttributeMaxSurfaceCubemapLayered = 38;

  /// < Maximum size of 1D texture.
  static const int hipDeviceAttributeMaxTexture1DWidth = 39;

  /// < Cuda only. Maximum dimensions of 1D layered texture.
  static const int hipDeviceAttributeMaxTexture1DLayered = 40;

  /// < Maximum number of elements allocatable in a 1D linear texture.
  /// < Use cudaDeviceGetTexture1DLinearMaxWidth() instead on Cuda.
  static const int hipDeviceAttributeMaxTexture1DLinear = 41;

  /// < Cuda only. Maximum size of 1D mipmapped texture.
  static const int hipDeviceAttributeMaxTexture1DMipmap = 42;

  /// < Maximum dimension width of 2D texture.
  static const int hipDeviceAttributeMaxTexture2DWidth = 43;

  /// < Maximum dimension hight of 2D texture.
  static const int hipDeviceAttributeMaxTexture2DHeight = 44;

  /// < Cuda only. Maximum dimensions of 2D texture if gather operations  performed.
  static const int hipDeviceAttributeMaxTexture2DGather = 45;

  /// < Cuda only. Maximum dimensions of 2D layered texture.
  static const int hipDeviceAttributeMaxTexture2DLayered = 46;

  /// < Cuda only. Maximum dimensions (width, height, pitch) of 2D textures bound to pitched memory.
  static const int hipDeviceAttributeMaxTexture2DLinear = 47;

  /// < Cuda only. Maximum dimensions of 2D mipmapped texture.
  static const int hipDeviceAttributeMaxTexture2DMipmap = 48;

  /// < Maximum dimension width of 3D texture.
  static const int hipDeviceAttributeMaxTexture3DWidth = 49;

  /// < Maximum dimension height of 3D texture.
  static const int hipDeviceAttributeMaxTexture3DHeight = 50;

  /// < Maximum dimension depth of 3D texture.
  static const int hipDeviceAttributeMaxTexture3DDepth = 51;

  /// < Cuda only. Maximum dimensions of alternate 3D texture.
  static const int hipDeviceAttributeMaxTexture3DAlt = 52;

  /// < Cuda only. Maximum dimensions of Cubemap texture
  static const int hipDeviceAttributeMaxTextureCubemap = 53;

  /// < Cuda only. Maximum dimensions of Cubemap layered texture.
  static const int hipDeviceAttributeMaxTextureCubemapLayered = 54;

  /// < Maximum dimension of a block
  static const int hipDeviceAttributeMaxThreadsDim = 55;

  /// < Maximum number of threads per block.
  static const int hipDeviceAttributeMaxThreadsPerBlock = 56;

  /// < Maximum resident threads per multiprocessor.
  static const int hipDeviceAttributeMaxThreadsPerMultiProcessor = 57;

  /// < Maximum pitch in bytes allowed by memory copies
  static const int hipDeviceAttributeMaxPitch = 58;

  /// < Global memory bus width in bits.
  static const int hipDeviceAttributeMemoryBusWidth = 59;

  /// < Peak memory clock frequency in kilohertz.
  static const int hipDeviceAttributeMemoryClockRate = 60;

  /// < Minor compute capability version number.
  static const int hipDeviceAttributeComputeCapabilityMinor = 61;

  /// < Cuda only. Unique ID of device group on the same multi-GPU board
  static const int hipDeviceAttributeMultiGpuBoardGroupID = 62;

  /// < Number of multiprocessors on the device.
  static const int hipDeviceAttributeMultiprocessorCount = 63;

  /// < Device name.
  static const int hipDeviceAttributeName = 64;

  /// < Device supports coherently accessing pageable memory
  /// < without calling hipHostRegister on it
  static const int hipDeviceAttributePageableMemoryAccess = 65;

  /// < Device accesses pageable memory via the host's page tables
  static const int hipDeviceAttributePageableMemoryAccessUsesHostPageTables =
      66;

  /// < PCI Bus ID.
  static const int hipDeviceAttributePciBusId = 67;

  /// < PCI Device ID.
  static const int hipDeviceAttributePciDeviceId = 68;

  /// < PCI Domain ID.
  static const int hipDeviceAttributePciDomainID = 69;

  /// < Cuda11 only. Maximum l2 persisting lines capacity in bytes
  static const int hipDeviceAttributePersistingL2CacheMaxSize = 70;

  /// < 32-bit registers available to a thread block. This number is shared
  /// < by all thread blocks simultaneously resident on a multiprocessor.
  static const int hipDeviceAttributeMaxRegistersPerBlock = 71;

  /// < 32-bit registers available per block.
  static const int hipDeviceAttributeMaxRegistersPerMultiprocessor = 72;

  /// < Cuda11 only. Shared memory reserved by CUDA driver per block.
  static const int hipDeviceAttributeReservedSharedMemPerBlock = 73;

  /// < Maximum shared memory available per block in bytes.
  static const int hipDeviceAttributeMaxSharedMemoryPerBlock = 74;

  /// < Cuda only. Maximum shared memory per block usable by special opt in.
  static const int hipDeviceAttributeSharedMemPerBlockOptin = 75;

  /// < Cuda only. Shared memory available per multiprocessor.
  static const int hipDeviceAttributeSharedMemPerMultiprocessor = 76;

  /// < Cuda only. Performance ratio of single precision to double precision.
  static const int hipDeviceAttributeSingleToDoublePrecisionPerfRatio = 77;

  /// < Cuda only. Whether to support stream priorities.
  static const int hipDeviceAttributeStreamPrioritiesSupported = 78;

  /// < Cuda only. Alignment requirement for surfaces
  static const int hipDeviceAttributeSurfaceAlignment = 79;

  /// < Cuda only. Whether device is a Tesla device using TCC driver
  static const int hipDeviceAttributeTccDriver = 80;

  /// < Alignment requirement for textures
  static const int hipDeviceAttributeTextureAlignment = 81;

  /// < Pitch alignment requirement for 2D texture references bound to pitched memory;
  static const int hipDeviceAttributeTexturePitchAlignment = 82;

  /// < Constant memory size in bytes.
  static const int hipDeviceAttributeTotalConstantMemory = 83;

  /// < Global memory available on devicice.
  static const int hipDeviceAttributeTotalGlobalMem = 84;

  /// < Cuda only. An unified address space shared with the host.
  static const int hipDeviceAttributeUnifiedAddressing = 85;

  /// < Cuda only. Unique ID in 16 byte.
  static const int hipDeviceAttributeUuid = 86;

  /// < Warp size in threads.
  static const int hipDeviceAttributeWarpSize = 87;

  /// < Device supports HIP Stream Ordered Memory Allocator
  static const int hipDeviceAttributeMemoryPoolsSupported = 88;

  /// < Device supports HIP virtual memory management
  static const int hipDeviceAttributeVirtualMemoryManagementSupported = 89;
  static const int hipDeviceAttributeCudaCompatibleEnd = 9999;
  static const int hipDeviceAttributeAmdSpecificBegin = 10000;

  /// < Frequency in khz of the timer used by the device-side "clock*"
  static const int hipDeviceAttributeClockInstructionRate = 10000;

  /// < Device architecture
  static const int hipDeviceAttributeArch = 10001;

  /// < Maximum Shared Memory PerMultiprocessor.
  static const int hipDeviceAttributeMaxSharedMemoryPerMultiprocessor = 10002;

  /// < Device gcn architecture
  static const int hipDeviceAttributeGcnArch = 10003;

  /// < Device gcnArch name in 256 bytes
  static const int hipDeviceAttributeGcnArchName = 10004;

  /// < Address of the HDP_MEM_COHERENCY_FLUSH_CNTL register
  static const int hipDeviceAttributeHdpMemFlushCntl = 10005;

  /// < Address of the HDP_REG_COHERENCY_FLUSH_CNTL register
  static const int hipDeviceAttributeHdpRegFlushCntl = 10006;

  /// < Supports cooperative launch on multiple
  /// < devices with unmatched functions
  static const int hipDeviceAttributeCooperativeMultiDeviceUnmatchedFunc =
      10007;

  /// < Supports cooperative launch on multiple
  /// < devices with unmatched grid dimensions
  static const int hipDeviceAttributeCooperativeMultiDeviceUnmatchedGridDim =
      10008;

  /// < Supports cooperative launch on multiple
  /// < devices with unmatched block dimensions
  static const int hipDeviceAttributeCooperativeMultiDeviceUnmatchedBlockDim =
      10009;

  /// < Supports cooperative launch on multiple
  /// < devices with unmatched shared memories
  static const int hipDeviceAttributeCooperativeMultiDeviceUnmatchedSharedMem =
      10010;

  /// < Whether it is LargeBar
  static const int hipDeviceAttributeIsLargeBar = 10011;

  /// < Revision of the GPU in this device
  static const int hipDeviceAttributeAsicRevision = 10012;

  /// < '1' if Device supports hipStreamWaitValue32() and
  /// < hipStreamWaitValue64(), '0' otherwise.
  static const int hipDeviceAttributeCanUseStreamWaitValue = 10013;

  /// < '1' if Device supports image, '0' otherwise.
  static const int hipDeviceAttributeImageSupport = 10014;

  /// < All available physical compute
  /// < units for the device
  static const int hipDeviceAttributePhysicalMultiProcessorCount = 10015;

  /// < '1' if Device supports fine grain, '0' otherwise
  static const int hipDeviceAttributeFineGrainSupport = 10016;

  /// < Constant frequency of wall clock in kilohertz.
  static const int hipDeviceAttributeWallClockRate = 10017;
  static const int hipDeviceAttributeAmdSpecificEnd = 19999;
  static const int hipDeviceAttributeVendorSpecificBegin = 20000;
}

abstract class hipJitOption {
  static const int hipJitOptionMaxRegisters = 0;
  static const int hipJitOptionThreadsPerBlock = 1;
  static const int hipJitOptionWallTime = 2;
  static const int hipJitOptionInfoLogBuffer = 3;
  static const int hipJitOptionInfoLogBufferSizeBytes = 4;
  static const int hipJitOptionErrorLogBuffer = 5;
  static const int hipJitOptionErrorLogBufferSizeBytes = 6;
  static const int hipJitOptionOptimizationLevel = 7;
  static const int hipJitOptionTargetFromContext = 8;
  static const int hipJitOptionTarget = 9;
  static const int hipJitOptionFallbackStrategy = 10;
  static const int hipJitOptionGenerateDebugInfo = 11;
  static const int hipJitOptionLogVerbose = 12;
  static const int hipJitOptionGenerateLineInfo = 13;
  static const int hipJitOptionCacheMode = 14;
  static const int hipJitOptionSm3xOpt = 15;
  static const int hipJitOptionFastCompile = 16;
  static const int hipJitOptionNumOptions = 17;
}

class hc_hip_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external HIP_HIPCTXCREATE hipCtxCreate;

  external HIP_HIPCTXDESTROY hipCtxDestroy;

  external HIP_HIPCTXPOPCURRENT hipCtxPopCurrent;

  external HIP_HIPCTXPUSHCURRENT hipCtxPushCurrent;

  external HIP_HIPCTXSETCURRENT hipCtxSetCurrent;

  external HIP_HIPCTXSYNCHRONIZE hipCtxSynchronize;

  external HIP_HIPDEVICEGETATTRIBUTE hipDeviceGetAttribute;

  external HIP_HIPDEVICEGETCOUNT hipDeviceGetCount;

  external HIP_HIPDEVICEGET hipDeviceGet;

  external HIP_HIPDEVICEGETNAME hipDeviceGetName;

  external HIP_HIPDEVICETOTALMEM hipDeviceTotalMem;

  external HIP_HIPDRIVERGETVERSION hipDriverGetVersion;

  external HIP_HIPEVENTCREATE hipEventCreate;

  external HIP_HIPEVENTDESTROY hipEventDestroy;

  external HIP_HIPEVENTELAPSEDTIME hipEventElapsedTime;

  external HIP_HIPEVENTRECORD hipEventRecord;

  external HIP_HIPEVENTSYNCHRONIZE hipEventSynchronize;

  external HIP_HIPFUNCGETATTRIBUTE hipFuncGetAttribute;

  external HIP_HIPGETERRORNAME hipGetErrorName;

  external HIP_HIPGETERRORSTRING hipGetErrorString;

  external HIP_HIPINIT hipInit;

  external HIP_HIPLAUNCHKERNEL hipLaunchKernel;

  external HIP_HIPMEMALLOC hipMemAlloc;

  external HIP_HIPMEMFREE hipMemFree;

  external HIP_HIPMEMGETINFO hipMemGetInfo;

  external HIP_HIPMEMCPYDTODASYNC hipMemcpyDtoDAsync;

  external HIP_HIPMEMCPYDTOHASYNC hipMemcpyDtoHAsync;

  external HIP_HIPMEMCPYHTODASYNC hipMemcpyHtoDAsync;

  external HIP_HIPMEMSETD32ASYNC hipMemsetD32Async;

  external HIP_HIPMEMSETD8ASYNC hipMemsetD8Async;

  external HIP_HIPMODULEGETFUNCTION hipModuleGetFunction;

  external HIP_HIPMODULEGETGLOBAL hipModuleGetGlobal;

  external HIP_HIPMODULELOADDATAEX hipModuleLoadDataEx;

  external HIP_HIPMODULEUNLOAD hipModuleUnload;

  external HIP_HIPRUNTIMEGETVERSION hipRuntimeGetVersion;

  external HIP_HIPSTREAMCREATE hipStreamCreate;

  external HIP_HIPSTREAMDESTROY hipStreamDestroy;

  external HIP_HIPSTREAMSYNCHRONIZE hipStreamSynchronize;
}

typedef HIP_HIPCTXCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<hipCtx_t>, ffi.UnsignedInt, hipDevice_t)>>;
typedef hipCtx_t = ffi.Pointer<ihipCtx_t>;
typedef hipDevice_t = ffi.Int;
typedef HIP_HIPCTXDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipCtx_t)>>;
typedef HIP_HIPCTXPOPCURRENT = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hipCtx_t>)>>;
typedef HIP_HIPCTXPUSHCURRENT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipCtx_t)>>;
typedef HIP_HIPCTXSETCURRENT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipCtx_t)>>;
typedef HIP_HIPCTXSYNCHRONIZE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef HIP_HIPDEVICEGETATTRIBUTE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Int>, ffi.Int32, hipDevice_t)>>;
typedef HIP_HIPDEVICEGETCOUNT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int>)>>;
typedef HIP_HIPDEVICEGET = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hipDevice_t>, ffi.Int)>>;
typedef HIP_HIPDEVICEGETNAME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int, hipDevice_t)>>;
typedef HIP_HIPDEVICETOTALMEM = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Size>, hipDevice_t)>>;
typedef HIP_HIPDRIVERGETVERSION
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int>)>>;
typedef HIP_HIPEVENTCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<hipEvent_t>, ffi.UnsignedInt)>>;
typedef hipEvent_t = ffi.Pointer<ihipEvent_t>;
typedef HIP_HIPEVENTDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipEvent_t)>>;
typedef HIP_HIPEVENTELAPSEDTIME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Float>, hipEvent_t, hipEvent_t)>>;
typedef HIP_HIPEVENTRECORD = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(hipEvent_t, hipStream_t)>>;
typedef hipStream_t = ffi.Pointer<ihipStream_t>;
typedef HIP_HIPEVENTSYNCHRONIZE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipEvent_t)>>;
typedef HIP_HIPFUNCGETATTRIBUTE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Int>, ffi.Int32, hipFunction_t)>>;
typedef hipFunction_t = ffi.Pointer<ihipModuleSymbol_t>;
typedef HIP_HIPGETERRORNAME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef HIP_HIPGETERRORSTRING = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef HIP_HIPINIT
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.UnsignedInt)>>;
typedef HIP_HIPLAUNCHKERNEL = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            hipFunction_t,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            hipStream_t,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef HIP_HIPMEMALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<hipDeviceptr_t>, ffi.Size)>>;
typedef hipDeviceptr_t = ffi.Pointer<ffi.Void>;
typedef HIP_HIPMEMFREE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipDeviceptr_t)>>;
typedef HIP_HIPMEMGETINFO = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Size>)>>;
typedef HIP_HIPMEMCPYDTODASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            hipDeviceptr_t, hipDeviceptr_t, ffi.Size, hipStream_t)>>;
typedef HIP_HIPMEMCPYDTOHASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void>, hipDeviceptr_t, ffi.Size, hipStream_t)>>;
typedef HIP_HIPMEMCPYHTODASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            hipDeviceptr_t, ffi.Pointer<ffi.Void>, ffi.Size, hipStream_t)>>;
typedef HIP_HIPMEMSETD32ASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            hipDeviceptr_t, ffi.UnsignedInt, ffi.Size, hipStream_t)>>;
typedef HIP_HIPMEMSETD8ASYNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            hipDeviceptr_t, ffi.UnsignedChar, ffi.Size, hipStream_t)>>;
typedef HIP_HIPMODULEGETFUNCTION = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<hipFunction_t>, hipModule_t, ffi.Pointer<ffi.Char>)>>;
typedef hipModule_t = ffi.Pointer<ihipModule_t>;
typedef HIP_HIPMODULEGETGLOBAL = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<hipDeviceptr_t>, ffi.Pointer<ffi.Size>,
            hipModule_t, ffi.Pointer<ffi.Char>)>>;
typedef HIP_HIPMODULELOADDATAEX = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<hipModule_t>,
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Int32>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef HIP_HIPMODULEUNLOAD
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipModule_t)>>;
typedef HIP_HIPRUNTIMEGETVERSION
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int>)>>;
typedef HIP_HIPSTREAMCREATE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<hipStream_t>, ffi.UnsignedInt)>>;
typedef HIP_HIPSTREAMDESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipStream_t)>>;
typedef HIP_HIPSTREAMSYNCHRONIZE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(hipStream_t)>>;

class cl_char2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_char> s;
}

typedef cl_char = ffi.Int8;

class cl_char4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_char> s;
}

class cl_char8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_char> s;
}

class cl_char16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_char> s;
}

class cl_uchar2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_uchar> s;
}

typedef cl_uchar = ffi.Uint8;

class cl_uchar4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_uchar> s;
}

class cl_uchar8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_uchar> s;
}

class cl_uchar16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_uchar> s;
}

class cl_short2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_short> s;
}

typedef cl_short = ffi.Int16;

class cl_short4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_short> s;
}

class cl_short8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_short> s;
}

class cl_short16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_short> s;
}

class cl_ushort2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_ushort> s;
}

typedef cl_ushort = ffi.Uint16;

class cl_ushort4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_ushort> s;
}

class cl_ushort8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_ushort> s;
}

class cl_ushort16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_ushort> s;
}

class cl_int2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_int> s;
}

typedef cl_int = ffi.Int32;

class cl_int4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_int> s;
}

class cl_int8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_int> s;
}

class cl_int16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_int> s;
}

class cl_uint2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_uint> s;
}

typedef cl_uint = ffi.Uint32;

class cl_uint4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_uint> s;
}

class cl_uint8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_uint> s;
}

class cl_uint16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_uint> s;
}

class cl_long2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_long> s;
}

typedef cl_long = ffi.Int64;

class cl_long4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_long> s;
}

class cl_long8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_long> s;
}

class cl_long16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_long> s;
}

class cl_ulong2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_ulong> s;
}

typedef cl_ulong = ffi.Uint64;

class cl_ulong4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_ulong> s;
}

class cl_ulong8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_ulong> s;
}

class cl_ulong16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_ulong> s;
}

class cl_float2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_float> s;
}

typedef cl_float = ffi.Float;

class cl_float4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_float> s;
}

class cl_float8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_float> s;
}

class cl_float16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_float> s;
}

class cl_double2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_double> s;
}

typedef cl_double = ffi.Double;

class cl_double4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_double> s;
}

class cl_double8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_double> s;
}

class cl_double16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_double> s;
}

class _cl_platform_id extends ffi.Opaque {}

class _cl_device_id extends ffi.Opaque {}

class _cl_context extends ffi.Opaque {}

class _cl_command_queue extends ffi.Opaque {}

class _cl_mem extends ffi.Opaque {}

class _cl_program extends ffi.Opaque {}

class _cl_kernel extends ffi.Opaque {}

class _cl_event extends ffi.Opaque {}

class _cl_sampler extends ffi.Opaque {}

class _cl_image_format extends ffi.Struct {
  @cl_channel_order()
  external int image_channel_order;

  @cl_channel_type()
  external int image_channel_data_type;
}

typedef cl_channel_order = cl_uint;
typedef cl_channel_type = cl_uint;

class _cl_image_desc extends ffi.Struct {
  @cl_mem_object_type()
  external int image_type;

  @ffi.Size()
  external int image_width;

  @ffi.Size()
  external int image_height;

  @ffi.Size()
  external int image_depth;

  @ffi.Size()
  external int image_array_size;

  @ffi.Size()
  external int image_row_pitch;

  @ffi.Size()
  external int image_slice_pitch;

  @cl_uint()
  external int num_mip_levels;

  @cl_uint()
  external int num_samples;

  external cl_mem buffer;
}

typedef cl_mem_object_type = cl_uint;
typedef cl_mem = ffi.Pointer<_cl_mem>;

class _cl_buffer_region extends ffi.Struct {
  @ffi.Size()
  external int origin;

  @ffi.Size()
  external int size;
}

typedef cl_platform_id = ffi.Pointer<_cl_platform_id>;
typedef cl_platform_info = cl_uint;
typedef cl_device_type = cl_bitfield;
typedef cl_bitfield = cl_ulong;
typedef cl_device_id = ffi.Pointer<_cl_device_id>;
typedef cl_device_info = cl_uint;
typedef cl_device_partition_property = ffi.IntPtr;
typedef cl_context = ffi.Pointer<_cl_context>;
typedef cl_context_properties = ffi.IntPtr;
typedef cl_context_info = cl_uint;
typedef cl_command_queue = ffi.Pointer<_cl_command_queue>;
typedef cl_command_queue_properties = cl_bitfield;
typedef cl_command_queue_info = cl_uint;
typedef cl_mem_flags = cl_bitfield;
typedef cl_buffer_create_type = cl_uint;
typedef cl_image_format = _cl_image_format;
typedef cl_image_desc = _cl_image_desc;
typedef cl_mem_info = cl_uint;
typedef cl_image_info = cl_uint;
typedef cl_sampler = ffi.Pointer<_cl_sampler>;
typedef cl_bool = cl_uint;
typedef cl_addressing_mode = cl_uint;
typedef cl_filter_mode = cl_uint;
typedef cl_sampler_info = cl_uint;
typedef cl_program = ffi.Pointer<_cl_program>;
typedef cl_program_info = cl_uint;
typedef cl_program_build_info = cl_uint;
typedef cl_kernel = ffi.Pointer<_cl_kernel>;
typedef cl_kernel_info = cl_uint;
typedef cl_kernel_arg_info = cl_uint;
typedef cl_kernel_work_group_info = cl_uint;
typedef cl_event = ffi.Pointer<_cl_event>;
typedef cl_event_info = cl_uint;
typedef cl_profiling_info = cl_uint;
typedef cl_map_flags = cl_bitfield;
typedef cl_mem_migration_flags = cl_bitfield;

class cl_device_topology_amd extends ffi.Union {
  external UnnamedStruct1 raw;

  external UnnamedStruct2 pcie;
}

class UnnamedStruct1 extends ffi.Struct {
  @cl_uint()
  external int type;

  @ffi.Array.multi([5])
  external ffi.Array<cl_uint> data;
}

class UnnamedStruct2 extends ffi.Struct {
  @cl_uint()
  external int type;

  @ffi.Array.multi([17])
  external ffi.Array<cl_char> unused;

  @cl_char()
  external int bus;

  @cl_char()
  external int device;

  @cl_char()
  external int function;
}

class hc_opencl_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external OCL_CLBUILDPROGRAM clBuildProgram;

  external OCL_CLCOMPILEPROGRAM clCompileProgram;

  external OCL_CLCREATEBUFFER clCreateBuffer;

  external OCL_CLCREATECOMMANDQUEUE clCreateCommandQueue;

  external OCL_CLCREATECONTEXT clCreateContext;

  external OCL_CLCREATEKERNEL clCreateKernel;

  external OCL_CLCREATEPROGRAMWITHBINARY clCreateProgramWithBinary;

  external OCL_CLCREATEPROGRAMWITHSOURCE clCreateProgramWithSource;

  external OCL_CLENQUEUECOPYBUFFER clEnqueueCopyBuffer;

  external OCL_CLENQUEUEFILLBUFFER clEnqueueFillBuffer;

  external OCL_CLENQUEUEMAPBUFFER clEnqueueMapBuffer;

  external OCL_CLENQUEUENDRANGEKERNEL clEnqueueNDRangeKernel;

  external OCL_CLENQUEUEREADBUFFER clEnqueueReadBuffer;

  external OCL_CLENQUEUEUNMAPMEMOBJECT clEnqueueUnmapMemObject;

  external OCL_CLENQUEUEWRITEBUFFER clEnqueueWriteBuffer;

  external OCL_CLFINISH clFinish;

  external OCL_CLFLUSH clFlush;

  external OCL_CLGETDEVICEIDS clGetDeviceIDs;

  external OCL_CLGETDEVICEINFO clGetDeviceInfo;

  external OCL_CLGETEVENTINFO clGetEventInfo;

  external OCL_CLGETEVENTPROFILINGINFO clGetEventProfilingInfo;

  external OCL_CLGETKERNELWORKGROUPINFO clGetKernelWorkGroupInfo;

  external OCL_CLGETPLATFORMIDS clGetPlatformIDs;

  external OCL_CLGETPLATFORMINFO clGetPlatformInfo;

  external OCL_CLGETPROGRAMBUILDINFO clGetProgramBuildInfo;

  external OCL_CLGETPROGRAMINFO clGetProgramInfo;

  external OCL_CLLINKPROGRAM clLinkProgram;

  external OCL_CLRELEASECOMMANDQUEUE clReleaseCommandQueue;

  external OCL_CLRELEASECONTEXT clReleaseContext;

  external OCL_CLRELEASEEVENT clReleaseEvent;

  external OCL_CLRELEASEKERNEL clReleaseKernel;

  external OCL_CLRELEASEMEMOBJECT clReleaseMemObject;

  external OCL_CLRELEASEPROGRAM clReleaseProgram;

  external OCL_CLSETKERNELARG clSetKernelArg;

  external OCL_CLUNLOADPLATFORMCOMPILER clUnloadPlatformCompiler;

  external OCL_CLWAITFOREVENTS clWaitForEvents;
}

typedef OCL_CLBUILDPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_program,
            cl_uint,
            ffi.Pointer<cl_device_id>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>>;
typedef OCL_CLCOMPILEPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_program,
            cl_uint,
            ffi.Pointer<cl_device_id>,
            ffi.Pointer<ffi.Char>,
            cl_uint,
            ffi.Pointer<cl_program>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>>;
typedef OCL_CLCREATEBUFFER = ffi.Pointer<
    ffi.NativeFunction<
        cl_mem Function(cl_context, cl_mem_flags, ffi.Size,
            ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>>;
typedef OCL_CLCREATECOMMANDQUEUE = ffi.Pointer<
    ffi.NativeFunction<
        cl_command_queue Function(cl_context, cl_device_id,
            cl_command_queue_properties, ffi.Pointer<cl_int>)>>;
typedef OCL_CLCREATECONTEXT = ffi.Pointer<
    ffi.NativeFunction<
        cl_context Function(
            ffi.Pointer<cl_context_properties>,
            cl_uint,
            ffi.Pointer<cl_device_id>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Char>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Size,
                        ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<cl_int>)>>;
typedef OCL_CLCREATEKERNEL = ffi.Pointer<
    ffi.NativeFunction<
        cl_kernel Function(
            cl_program, ffi.Pointer<ffi.Char>, ffi.Pointer<cl_int>)>>;
typedef OCL_CLCREATEPROGRAMWITHBINARY = ffi.Pointer<
    ffi.NativeFunction<
        cl_program Function(
            cl_context,
            cl_uint,
            ffi.Pointer<cl_device_id>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
            ffi.Pointer<cl_int>,
            ffi.Pointer<cl_int>)>>;
typedef OCL_CLCREATEPROGRAMWITHSOURCE = ffi.Pointer<
    ffi.NativeFunction<
        cl_program Function(
            cl_context,
            cl_uint,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<cl_int>)>>;
typedef OCL_CLENQUEUECOPYBUFFER = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_command_queue, cl_mem, cl_mem, ffi.Size, ffi.Size,
            ffi.Size, cl_uint, ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>>;
typedef OCL_CLENQUEUEFILLBUFFER = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_command_queue,
            cl_mem,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Size,
            cl_uint,
            ffi.Pointer<cl_event>,
            ffi.Pointer<cl_event>)>>;
typedef OCL_CLENQUEUEMAPBUFFER = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            cl_command_queue,
            cl_mem,
            cl_bool,
            cl_map_flags,
            ffi.Size,
            ffi.Size,
            cl_uint,
            ffi.Pointer<cl_event>,
            ffi.Pointer<cl_event>,
            ffi.Pointer<cl_int>)>>;
typedef OCL_CLENQUEUENDRANGEKERNEL = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_command_queue,
            cl_kernel,
            cl_uint,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Size>,
            cl_uint,
            ffi.Pointer<cl_event>,
            ffi.Pointer<cl_event>)>>;
typedef OCL_CLENQUEUEREADBUFFER = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_command_queue,
            cl_mem,
            cl_bool,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<ffi.Void>,
            cl_uint,
            ffi.Pointer<cl_event>,
            ffi.Pointer<cl_event>)>>;
typedef OCL_CLENQUEUEUNMAPMEMOBJECT = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_command_queue, cl_mem, ffi.Pointer<ffi.Void>,
            cl_uint, ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>>;
typedef OCL_CLENQUEUEWRITEBUFFER = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_command_queue,
            cl_mem,
            cl_bool,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<ffi.Void>,
            cl_uint,
            ffi.Pointer<cl_event>,
            ffi.Pointer<cl_event>)>>;
typedef OCL_CLFINISH
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_command_queue)>>;
typedef OCL_CLFLUSH
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_command_queue)>>;
typedef OCL_CLGETDEVICEIDS = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_platform_id, cl_device_type, cl_uint,
            ffi.Pointer<cl_device_id>, ffi.Pointer<cl_uint>)>>;
typedef OCL_CLGETDEVICEINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_device_id, cl_device_info, ffi.Size,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLGETEVENTINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_event, cl_event_info, ffi.Size,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLGETEVENTPROFILINGINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_event, cl_profiling_info, ffi.Size,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLGETKERNELWORKGROUPINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_kernel, cl_device_id, cl_kernel_work_group_info,
            ffi.Size, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLGETPLATFORMIDS = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(
            cl_uint, ffi.Pointer<cl_platform_id>, ffi.Pointer<cl_uint>)>>;
typedef OCL_CLGETPLATFORMINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_platform_id, cl_platform_info, ffi.Size,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLGETPROGRAMBUILDINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_program, cl_device_id, cl_program_build_info,
            ffi.Size, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLGETPROGRAMINFO = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_program, cl_program_info, ffi.Size,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>;
typedef OCL_CLLINKPROGRAM = ffi.Pointer<
    ffi.NativeFunction<
        cl_program Function(
            cl_context,
            cl_uint,
            ffi.Pointer<cl_device_id>,
            ffi.Pointer<ffi.Char>,
            cl_uint,
            ffi.Pointer<cl_program>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<cl_int>)>>;
typedef OCL_CLRELEASECOMMANDQUEUE
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_command_queue)>>;
typedef OCL_CLRELEASECONTEXT
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_context)>>;
typedef OCL_CLRELEASEEVENT
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_event)>>;
typedef OCL_CLRELEASEKERNEL
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_kernel)>>;
typedef OCL_CLRELEASEMEMOBJECT
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_mem)>>;
typedef OCL_CLRELEASEPROGRAM
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_program)>>;
typedef OCL_CLSETKERNELARG = ffi.Pointer<
    ffi.NativeFunction<
        cl_int Function(cl_kernel, cl_uint, ffi.Size, ffi.Pointer<ffi.Void>)>>;
typedef OCL_CLUNLOADPLATFORMCOMPILER
    = ffi.Pointer<ffi.NativeFunction<cl_int Function(cl_platform_id)>>;
typedef OCL_CLWAITFOREVENTS = ffi.Pointer<
    ffi.NativeFunction<cl_int Function(cl_uint, ffi.Pointer<cl_event>)>>;

class objc_class extends ffi.Opaque {}

/// Represents an instance of a class.
class objc_object extends ffi.Struct {
  external Class isa;
}

/// An opaque type that represents an Objective-C class.
typedef Class = ffi.Pointer<objc_class>;

class objc_selector extends ffi.Opaque {}

/// An opaque type that represents a method selector.
typedef SEL = ffi.Pointer<objc_selector>;

/// A pointer to an instance of a class.
typedef id = ffi.Pointer<objc_object>;
typedef objc_objectptr_t = ffi.Pointer<ffi.Void>;

class objc_method extends ffi.Opaque {}

class objc_ivar extends ffi.Opaque {}

class objc_category extends ffi.Opaque {}

class objc_property extends ffi.Opaque {}

/// Defines a method
class objc_method_description extends ffi.Struct {
  /// < The name of the method
  external SEL name;

  /// < The types of the method arguments
  external ffi.Pointer<ffi.Char> types;
}

/// Defines a property attribute
class objc_property_attribute_t extends ffi.Struct {
  /// < The name of the attribute
  external ffi.Pointer<ffi.Char> name;

  /// < The value of the attribute (usually empty)
  external ffi.Pointer<ffi.Char> value;
}

/// An opaque type that represents an instance variable.
typedef Ivar = ffi.Pointer<objc_ivar>;

/// An opaque type that represents a method in a class definition.
typedef Method = ffi.Pointer<objc_method>;
typedef IMP = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef Protocol = objc_object;

/// An opaque type that represents an Objective-C declared property.
typedef objc_property_t = ffi.Pointer<objc_property>;
typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;

/// Policies related to associative references.
/// These are options to objc_setAssociatedObject()
typedef objc_AssociationPolicy = uintptr_t;
typedef uintptr_t = ffi.UnsignedLong;

/// Function type for a hook that intercepts class_getImageName().
///
/// @param cls The class whose image name is being looked up.
/// @param outImageName On return, the result of the image name lookup.
/// @return YES if an image name for this class was found, NO otherwise.
///
/// @see class_getImageName
/// @see objc_setHook_getImageName
typedef objc_hook_getImageName = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(Class, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;

/// Function type for a hook that assists objc_getClass() and related functions.
///
/// @param name The class name to look up.
/// @param outClass On return, the result of the class lookup.
/// @return YES if a class with this name was found, NO otherwise.
///
/// @see objc_getClass
/// @see objc_setHook_getClass
typedef objc_hook_getClass = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Class>)>>;

/// Function type for a function that is called when an image is loaded.
///
/// @param header The newly loaded header.
class mach_header extends ffi.Opaque {}

typedef objc_func_loadImage = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mach_header>)>>;

/// Function type for a hook that provides a name for lazily named classes.
///
/// @param cls The class to generate a name for.
/// @return The name of the class, or NULL if the name isn't known or can't me generated.
///
/// @see objc_setHook_lazyClassNamer
typedef objc_hook_lazyClassNamer
    = ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Class)>>;

class objc_method_list extends ffi.Opaque {}

class _RuneEntry extends ffi.Struct {
  @__darwin_rune_t()
  external int __min;

  @__darwin_rune_t()
  external int __max;

  @__darwin_rune_t()
  external int __map;

  external ffi.Pointer<__uint32_t> __types;
}

typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wchar_t = ffi.Int;

class _RuneRange extends ffi.Struct {
  @ffi.Int()
  external int __nranges;

  external ffi.Pointer<_RuneEntry> __ranges;
}

class _RuneCharClass extends ffi.Struct {
  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> __name;

  @__uint32_t()
  external int __mask;
}

class _RuneLocale extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __magic;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __encoding;

  external ffi.Pointer<
      ffi.NativeFunction<
          __darwin_rune_t Function(ffi.Pointer<ffi.Char>, __darwin_size_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sgetrune;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(__darwin_rune_t, ffi.Pointer<ffi.Char>,
              __darwin_size_t, ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sputrune;

  @__darwin_rune_t()
  external int __invalid_rune;

  @ffi.Array.multi([256])
  external ffi.Array<__uint32_t> __runetype;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __maplower;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __mapupper;

  external _RuneRange __runetype_ext;

  external _RuneRange __maplower_ext;

  external _RuneRange __mapupper_ext;

  external ffi.Pointer<ffi.Void> __variable;

  @ffi.Int()
  external int __variable_len;

  @ffi.Int()
  external int __ncharclasses;

  external ffi.Pointer<_RuneCharClass> __charclasses;
}

typedef __darwin_ct_rune_t = ffi.Int;

class lconv extends ffi.Struct {
  external ffi.Pointer<ffi.Char> decimal_point;

  external ffi.Pointer<ffi.Char> thousands_sep;

  external ffi.Pointer<ffi.Char> grouping;

  external ffi.Pointer<ffi.Char> int_curr_symbol;

  external ffi.Pointer<ffi.Char> currency_symbol;

  external ffi.Pointer<ffi.Char> mon_decimal_point;

  external ffi.Pointer<ffi.Char> mon_thousands_sep;

  external ffi.Pointer<ffi.Char> mon_grouping;

  external ffi.Pointer<ffi.Char> positive_sign;

  external ffi.Pointer<ffi.Char> negative_sign;

  @ffi.Char()
  external int int_frac_digits;

  @ffi.Char()
  external int frac_digits;

  @ffi.Char()
  external int p_cs_precedes;

  @ffi.Char()
  external int p_sep_by_space;

  @ffi.Char()
  external int n_cs_precedes;

  @ffi.Char()
  external int n_sep_by_space;

  @ffi.Char()
  external int p_sign_posn;

  @ffi.Char()
  external int n_sign_posn;

  @ffi.Char()
  external int int_p_cs_precedes;

  @ffi.Char()
  external int int_n_cs_precedes;

  @ffi.Char()
  external int int_p_sep_by_space;

  @ffi.Char()
  external int int_n_sep_by_space;

  @ffi.Char()
  external int int_p_sign_posn;

  @ffi.Char()
  external int int_n_sign_posn;
}

class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

class __darwin_arm_neon_state64 extends ffi.Opaque {}

class __darwin_arm_neon_state extends ffi.Opaque {}

class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;

class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef stack_t = __darwin_sigaltstack;

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

class wait extends ffi.Opaque {}

class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef intmax_t = ffi.Long;

class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef uintmax_t = ffi.UnsignedLong;

@ffi.Packed(2)
class wide extends ffi.Struct {
  @UInt32()
  external int lo;

  @SInt32()
  external int hi;
}

typedef UInt32 = ffi.UnsignedInt;
typedef SInt32 = ffi.Int;

@ffi.Packed(2)
class UnsignedWide extends ffi.Struct {
  @UInt32()
  external int lo;

  @UInt32()
  external int hi;
}

class Float80 extends ffi.Struct {
  @SInt16()
  external int exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

typedef SInt16 = ffi.Short;
typedef UInt16 = ffi.UnsignedShort;

class Float96 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<SInt16> exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

@ffi.Packed(2)
class Float32Point extends ffi.Struct {
  @Float32()
  external double x;

  @Float32()
  external double y;
}

typedef Float32 = ffi.Float;

@ffi.Packed(2)
class ProcessSerialNumber extends ffi.Struct {
  @UInt32()
  external int highLongOfPSN;

  @UInt32()
  external int lowLongOfPSN;
}

class Point extends ffi.Struct {
  @ffi.Short()
  external int v;

  @ffi.Short()
  external int h;
}

class Rect extends ffi.Struct {
  @ffi.Short()
  external int top;

  @ffi.Short()
  external int left;

  @ffi.Short()
  external int bottom;

  @ffi.Short()
  external int right;
}

@ffi.Packed(2)
class FixedPoint extends ffi.Struct {
  @Fixed()
  external int x;

  @Fixed()
  external int y;
}

typedef Fixed = SInt32;

@ffi.Packed(2)
class FixedRect extends ffi.Struct {
  @Fixed()
  external int left;

  @Fixed()
  external int top;

  @Fixed()
  external int right;

  @Fixed()
  external int bottom;
}

class TimeBaseRecord extends ffi.Opaque {}

@ffi.Packed(2)
class TimeRecord extends ffi.Struct {
  external CompTimeValue value;

  @TimeScale()
  external int scale;

  external TimeBase base;
}

typedef CompTimeValue = wide;
typedef TimeScale = SInt32;
typedef TimeBase = ffi.Pointer<TimeBaseRecord>;

class NumVersion extends ffi.Struct {
  @UInt8()
  external int nonRelRev;

  @UInt8()
  external int stage;

  @UInt8()
  external int minorAndBugRev;

  @UInt8()
  external int majorRev;
}

typedef UInt8 = ffi.UnsignedChar;

class NumVersionVariant extends ffi.Union {
  external NumVersion parts;

  @UInt32()
  external int whole;
}

class VersRec extends ffi.Struct {
  external NumVersion numericVersion;

  @ffi.Short()
  external int countryCode;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> shortVersion;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> reserved;
}

typedef ConstStr255Param = ffi.Pointer<ffi.UnsignedChar>;

class __CFString extends ffi.Opaque {}

typedef CFIndex = ffi.Long;

class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

class __CFNull extends ffi.Opaque {}

typedef CFTypeID = ffi.UnsignedLong;
typedef CFNullRef = ffi.Pointer<__CFNull>;

class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

typedef CFAllocatorRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFAllocatorAllocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFOptionFlags = ffi.UnsignedLong;
typedef CFAllocatorReallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
            CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorDeallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorPreferredSizeCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFIndex Function(CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef Boolean = ffi.UnsignedChar;
typedef CFHashCode = ffi.UnsignedLong;

abstract class ptrauth_key {
  static const int ptrauth_key_asia = 0;
  static const int ptrauth_key_asib = 1;
  static const int ptrauth_key_asda = 2;
  static const int ptrauth_key_asdb = 3;
  static const int ptrauth_key_process_independent_code = 0;
  static const int ptrauth_key_process_dependent_code = 1;
  static const int ptrauth_key_process_independent_data = 2;
  static const int ptrauth_key_process_dependent_data = 3;
  static const int ptrauth_key_function_pointer = 0;
  static const int ptrauth_key_return_address = 1;
  static const int ptrauth_key_frame_pointer = 3;
  static const int ptrauth_key_block_function = 0;
  static const int ptrauth_key_cxx_vtable_pointer = 2;
  static const int ptrauth_key_method_list_pointer = 2;
  static const int ptrauth_key_objc_isa_pointer = 2;
  static const int ptrauth_key_objc_super_pointer = 2;
  static const int ptrauth_key_block_descriptor_pointer = 2;
  static const int ptrauth_key_objc_sel_pointer = 3;
  static const int ptrauth_key_objc_class_ro_pointer = 2;
}

class CFArrayCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFArrayRetainCallBack retain;

  external CFArrayReleaseCallBack release;

  external CFArrayCopyDescriptionCallBack copyDescription;

  external CFArrayEqualCallBack equal;
}

typedef CFArrayRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFArrayEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFArray extends ffi.Opaque {}

typedef CFArrayRef = ffi.Pointer<__CFArray>;
typedef CFMutableArrayRef = ffi.Pointer<__CFArray>;
typedef CFArrayApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFComparatorFunction = ffi.Pointer<
    ffi.NativeFunction<
        CFComparisonResult Function(ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFComparisonResult = CFIndex;

class CFBagCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFBagRetainCallBack retain;

  external CFBagReleaseCallBack release;

  external CFBagCopyDescriptionCallBack copyDescription;

  external CFBagEqualCallBack equal;

  external CFBagHashCallBack hash;
}

typedef CFBagRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFBagEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFBagHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFBag extends ffi.Opaque {}

typedef CFBagRef = ffi.Pointer<__CFBag>;
typedef CFMutableBagRef = ffi.Pointer<__CFBag>;
typedef CFBagApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class CFBinaryHeapCompareContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class CFBinaryHeapCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          CFComparisonResult Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> compare;
}

class __CFBinaryHeap extends ffi.Opaque {}

typedef CFBinaryHeapRef = ffi.Pointer<__CFBinaryHeap>;
typedef CFBinaryHeapApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFBitVector extends ffi.Opaque {}

typedef CFBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFMutableBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFBit = UInt32;

abstract class __CFByteOrder {
  static const int CFByteOrderUnknown = 0;
  static const int CFByteOrderLittleEndian = 1;
  static const int CFByteOrderBigEndian = 2;
}

class CFSwappedFloat32 extends ffi.Struct {
  @ffi.Uint32()
  external int v;
}

class CFSwappedFloat64 extends ffi.Struct {
  @ffi.Uint64()
  external int v;
}

class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFMutableDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFDictionaryApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class __CFNotificationCenter extends ffi.Opaque {}

typedef CFNotificationCenterRef = ffi.Pointer<__CFNotificationCenter>;
typedef CFNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
            CFNotificationName, ffi.Pointer<ffi.Void>, CFDictionaryRef)>>;
typedef CFNotificationName = CFStringRef;
typedef CFNotificationSuspensionBehavior = CFIndex;

class __CFLocale extends ffi.Opaque {}

typedef CFLocaleRef = ffi.Pointer<__CFLocale>;
typedef CFLocaleIdentifier = CFStringRef;
typedef LangCode = SInt16;
typedef RegionCode = SInt16;
typedef CFLocaleLanguageDirection = CFIndex;
typedef CFLocaleKey = CFStringRef;
typedef CFCalendarIdentifier = CFStringRef;
typedef CFAbsoluteTime = CFTimeInterval;
typedef CFTimeInterval = ffi.Double;

class __CFDate extends ffi.Opaque {}

typedef CFDateRef = ffi.Pointer<__CFDate>;

class __CFTimeZone extends ffi.Opaque {}

class CFGregorianDate extends ffi.Struct {
  @SInt32()
  external int year;

  @SInt8()
  external int month;

  @SInt8()
  external int day;

  @SInt8()
  external int hour;

  @SInt8()
  external int minute;

  @ffi.Double()
  external double second;
}

typedef SInt8 = ffi.SignedChar;

class CFGregorianUnits extends ffi.Struct {
  @SInt32()
  external int years;

  @SInt32()
  external int months;

  @SInt32()
  external int days;

  @SInt32()
  external int hours;

  @SInt32()
  external int minutes;

  @ffi.Double()
  external double seconds;
}

typedef CFTimeZoneRef = ffi.Pointer<__CFTimeZone>;

class __CFData extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;
typedef CFMutableDataRef = ffi.Pointer<__CFData>;
typedef CFDataSearchFlags = CFOptionFlags;

class __CFCharacterSet extends ffi.Opaque {}

typedef CFCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef CFCharacterSetPredefinedSet = CFIndex;
typedef CFMutableCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef UniChar = UInt16;
typedef UTF32Char = UInt32;
typedef CFStringEncoding = UInt32;
typedef CFMutableStringRef = ffi.Pointer<__CFString>;
typedef StringPtr = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStringPtr = ffi.Pointer<ffi.UnsignedChar>;
typedef CFStringCompareFlags = CFOptionFlags;
typedef CFStringNormalizationForm = CFIndex;

class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UniChar> buffer;

  external CFStringRef theString;

  external ffi.Pointer<UniChar> directUniCharBuffer;

  external ffi.Pointer<ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @CFIndex()
  external int bufferedRangeStart;

  @CFIndex()
  external int bufferedRangeEnd;
}

typedef CFTimeZoneNameStyle = CFIndex;

class __CFCalendar extends ffi.Opaque {}

typedef CFCalendarRef = ffi.Pointer<__CFCalendar>;
typedef CFCalendarUnit = CFOptionFlags;

class __CFDateFormatter extends ffi.Opaque {}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;
typedef CFISO8601DateFormatOptions = CFOptionFlags;
typedef CFDateFormatterStyle = CFIndex;
typedef CFDateFormatterKey = CFStringRef;

class __CFError extends ffi.Opaque {}

typedef CFErrorDomain = CFStringRef;
typedef CFErrorRef = ffi.Pointer<__CFError>;

class __CFBoolean extends ffi.Opaque {}

typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

class __CFNumber extends ffi.Opaque {}

typedef CFNumberRef = ffi.Pointer<__CFNumber>;
typedef CFNumberType = CFIndex;

class __CFNumberFormatter extends ffi.Opaque {}

typedef CFNumberFormatterRef = ffi.Pointer<__CFNumberFormatter>;
typedef CFNumberFormatterStyle = CFIndex;
typedef CFNumberFormatterKey = CFStringRef;
typedef CFPropertyListRef = CFTypeRef;

class __CFURL extends ffi.Opaque {}

typedef CFURLRef = ffi.Pointer<__CFURL>;
typedef CFURLPathStyle = CFIndex;
typedef CFURLComponentType = CFIndex;

class FSRef extends ffi.Opaque {}

typedef CFURLBookmarkCreationOptions = CFOptionFlags;
typedef CFURLBookmarkResolutionOptions = CFOptionFlags;
typedef CFURLBookmarkFileCreationOptions = CFOptionFlags;

class mach_port_status extends ffi.Struct {
  @mach_port_rights_t()
  external int mps_pset;

  @mach_port_seqno_t()
  external int mps_seqno;

  @mach_port_mscount_t()
  external int mps_mscount;

  @mach_port_msgcount_t()
  external int mps_qlimit;

  @mach_port_msgcount_t()
  external int mps_msgcount;

  @mach_port_rights_t()
  external int mps_sorights;

  @boolean_t()
  external int mps_srights;

  @boolean_t()
  external int mps_pdrequest;

  @boolean_t()
  external int mps_nsrequest;

  @natural_t()
  external int mps_flags;
}

typedef mach_port_rights_t = natural_t;
typedef natural_t = __darwin_natural_t;
typedef mach_port_seqno_t = natural_t;
typedef mach_port_mscount_t = natural_t;
typedef mach_port_msgcount_t = natural_t;
typedef boolean_t = ffi.Int;

class mach_port_limits extends ffi.Struct {
  @mach_port_msgcount_t()
  external int mpl_qlimit;
}

class mach_port_info_ext extends ffi.Struct {
  external mach_port_status_t mpie_status;

  @mach_port_msgcount_t()
  external int mpie_boost_cnt;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint32> reserved;
}

typedef mach_port_status_t = mach_port_status;

class mach_port_guard_info extends ffi.Struct {
  @ffi.Uint64()
  external int mpgi_guard;
}

class mach_port_qos extends ffi.Opaque {}

class mach_service_port_info extends ffi.Struct {
  @ffi.Array.multi([255])
  external ffi.Array<ffi.Char> mspi_string_name;

  @ffi.Uint8()
  external int mspi_domain_type;
}

class mach_port_options extends ffi.Struct {
  @ffi.Uint32()
  external int flags;

  external mach_port_limits_t mpl;
}

typedef mach_port_limits_t = mach_port_limits;

abstract class mach_port_guard_exception_codes {
  static const int kGUARD_EXC_DESTROY = 1;
  static const int kGUARD_EXC_MOD_REFS = 2;
  static const int kGUARD_EXC_SET_CONTEXT = 4;
  static const int kGUARD_EXC_UNGUARDED = 8;
  static const int kGUARD_EXC_INCORRECT_GUARD = 16;
  static const int kGUARD_EXC_IMMOVABLE = 32;
  static const int kGUARD_EXC_STRICT_REPLY = 64;
  static const int kGUARD_EXC_MSG_FILTERED = 128;
  static const int kGUARD_EXC_INVALID_RIGHT = 256;
  static const int kGUARD_EXC_INVALID_NAME = 512;
  static const int kGUARD_EXC_INVALID_VALUE = 1024;
  static const int kGUARD_EXC_INVALID_ARGUMENT = 2048;
  static const int kGUARD_EXC_RIGHT_EXISTS = 4096;
  static const int kGUARD_EXC_KERN_NO_SPACE = 8192;
  static const int kGUARD_EXC_KERN_FAILURE = 16384;
  static const int kGUARD_EXC_KERN_RESOURCE = 32768;
  static const int kGUARD_EXC_SEND_INVALID_REPLY = 65536;
  static const int kGUARD_EXC_SEND_INVALID_VOUCHER = 131072;
  static const int kGUARD_EXC_SEND_INVALID_RIGHT = 262144;
  static const int kGUARD_EXC_RCV_INVALID_NAME = 524288;
  static const int kGUARD_EXC_RCV_GUARDED_DESC = 1048576;
  static const int kGUARD_EXC_MOD_REFS_NON_FATAL = 2097152;
  static const int kGUARD_EXC_IMMOVABLE_NON_FATAL = 4194304;
}

class __CFRunLoop extends ffi.Opaque {}

class __CFRunLoopSource extends ffi.Opaque {}

class __CFRunLoopObserver extends ffi.Opaque {}

class __CFRunLoopTimer extends ffi.Opaque {}

typedef CFRunLoopMode = CFStringRef;
typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;
typedef CFRunLoopRunResult = SInt32;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;
typedef CFRunLoopObserverRef = ffi.Pointer<__CFRunLoopObserver>;
typedef CFRunLoopTimerRef = ffi.Pointer<__CFRunLoopTimer>;

class CFRunLoopSourceContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> schedule;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> cancel;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      perform;
}

class CFRunLoopSourceContext1 extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void>)>> getPort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> perform;
}

class CFRunLoopObserverContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopObserverCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFRunLoopObserverRef, CFRunLoopActivity, ffi.Pointer<ffi.Void>)>>;
typedef CFRunLoopActivity = CFOptionFlags;

class CFRunLoopTimerContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopTimerCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFRunLoopTimerRef, ffi.Pointer<ffi.Void>)>>;

class __CFSocket extends ffi.Opaque {}

class CFSocketSignature extends ffi.Struct {
  @SInt32()
  external int protocolFamily;

  @SInt32()
  external int socketType;

  @SInt32()
  external int protocol;

  external CFDataRef address;
}

class CFSocketContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFSocketRef = ffi.Pointer<__CFSocket>;
typedef CFSocketCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFSocketRef, CFSocketCallBackType, CFDataRef,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSocketCallBackType = CFOptionFlags;
typedef CFSocketNativeHandle = ffi.Int;
typedef CFSocketError = CFIndex;

abstract class os_clockid_t {
  static const int OS_CLOCK_MACH_ABSOLUTE_TIME = 32;
}

class os_workgroup_attr_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Char> opaque;
}

class os_workgroup_interval_data_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> opaque;
}

class os_workgroup_join_token_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([36])
  external ffi.Array<ffi.Char> opaque;
}

class os_workgroup_s extends ffi.Opaque {}

typedef os_workgroup_t = ffi.Pointer<os_workgroup_s>;
typedef os_workgroup_join_token_t
    = ffi.Pointer<os_workgroup_join_token_opaque_s>;
typedef os_workgroup_working_arena_destructor_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef os_workgroup_index = ffi.Uint32;

class os_workgroup_max_parallel_threads_attr_s extends ffi.Opaque {}

typedef os_workgroup_mpt_attr_t
    = ffi.Pointer<os_workgroup_max_parallel_threads_attr_s>;
typedef os_workgroup_interval_t = os_workgroup_t;
typedef os_workgroup_interval_data_t
    = ffi.Pointer<os_workgroup_interval_data_opaque_s>;
typedef os_workgroup_parallel_t = os_workgroup_t;
typedef os_workgroup_attr_t = ffi.Pointer<os_workgroup_attr_opaque_s>;

class time_value extends ffi.Struct {
  @integer_t()
  external int seconds;

  @integer_t()
  external int microseconds;
}

typedef integer_t = ffi.Int;

class mach_timespec extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tv_sec;

  @clock_res_t()
  external int tv_nsec;
}

typedef clock_res_t = ffi.Int;
typedef dispatch_time_t = ffi.Uint64;

class dispatch_object_t extends ffi.Union {
  external ffi.Pointer<_os_object_s> _os_obj;

  external ffi.Pointer<dispatch_object_s> _do;

  external ffi.Pointer<dispatch_queue_s> _dq;

  external ffi.Pointer<dispatch_queue_attr_s> _dqa;

  external ffi.Pointer<dispatch_group_s> _dg;

  external ffi.Pointer<dispatch_source_s> _ds;

  external ffi.Pointer<dispatch_channel_s> _dch;

  external ffi.Pointer<dispatch_mach_s> _dm;

  external ffi.Pointer<dispatch_mach_msg_s> _dmsg;

  external ffi.Pointer<dispatch_semaphore_s> _dsema;

  external ffi.Pointer<dispatch_data_s> _ddata;

  external ffi.Pointer<dispatch_io_s> _dchannel;
}

class _os_object_s extends ffi.Opaque {}

class dispatch_object_s extends ffi.Opaque {}

class dispatch_queue_s extends ffi.Opaque {}

class dispatch_queue_attr_s extends ffi.Opaque {}

class dispatch_group_s extends ffi.Opaque {}

class dispatch_source_s extends ffi.Opaque {}

class dispatch_channel_s extends ffi.Opaque {}

class dispatch_mach_s extends ffi.Opaque {}

class dispatch_mach_msg_s extends ffi.Opaque {}

class dispatch_semaphore_s extends ffi.Opaque {}

class dispatch_data_s extends ffi.Opaque {}

class dispatch_io_s extends ffi.Opaque {}

typedef dispatch_function_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef dispatch_qos_class_t = qos_class_t;
typedef dispatch_queue_t = ffi.Pointer<dispatch_queue_s>;
typedef dispatch_queue_global_t = dispatch_queue_t;
typedef dispatch_queue_attr_t = ffi.Pointer<dispatch_queue_attr_s>;

abstract class dispatch_autorelease_frequency_t {
  static const int DISPATCH_AUTORELEASE_FREQUENCY_INHERIT = 0;
  static const int DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM = 1;
  static const int DISPATCH_AUTORELEASE_FREQUENCY_NEVER = 2;
}

abstract class dispatch_block_flags_t {
  static const int DISPATCH_BLOCK_BARRIER = 1;
  static const int DISPATCH_BLOCK_DETACHED = 2;
  static const int DISPATCH_BLOCK_ASSIGN_CURRENT = 4;
  static const int DISPATCH_BLOCK_NO_QOS_CLASS = 8;
  static const int DISPATCH_BLOCK_INHERIT_QOS_CLASS = 16;
  static const int DISPATCH_BLOCK_ENFORCE_QOS_CLASS = 32;
}

class mach_msg_type_descriptor_t extends ffi.Opaque {}

class mach_msg_port_descriptor_t extends ffi.Opaque {}

class mach_msg_ool_descriptor32_t extends ffi.Opaque {}

class mach_msg_ool_descriptor64_t extends ffi.Opaque {}

class mach_msg_ool_descriptor_t extends ffi.Opaque {}

class mach_msg_ool_ports_descriptor32_t extends ffi.Opaque {}

class mach_msg_ool_ports_descriptor64_t extends ffi.Opaque {}

class mach_msg_ool_ports_descriptor_t extends ffi.Opaque {}

class mach_msg_guarded_port_descriptor32_t extends ffi.Opaque {}

class mach_msg_guarded_port_descriptor64_t extends ffi.Opaque {}

class mach_msg_guarded_port_descriptor_t extends ffi.Opaque {}

class mach_msg_descriptor_t extends ffi.Opaque {}

class mach_msg_body_t extends ffi.Struct {
  @mach_msg_size_t()
  external int msgh_descriptor_count;
}

typedef mach_msg_size_t = natural_t;

class mach_msg_header_t extends ffi.Struct {
  @mach_msg_bits_t()
  external int msgh_bits;

  @mach_msg_size_t()
  external int msgh_size;

  @mach_port_t()
  external int msgh_remote_port;

  @mach_port_t()
  external int msgh_local_port;

  @mach_port_name_t()
  external int msgh_voucher_port;

  @mach_msg_id_t()
  external int msgh_id;
}

typedef mach_msg_bits_t = ffi.UnsignedInt;
typedef mach_port_name_t = natural_t;
typedef mach_msg_id_t = integer_t;

class mach_msg_base_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_body_t body;
}

class mach_msg_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;
}

typedef mach_msg_trailer_type_t = ffi.UnsignedInt;
typedef mach_msg_trailer_size_t = ffi.UnsignedInt;

class mach_msg_seqno_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;
}

class security_token_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> val;
}

class mach_msg_security_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;
}

class audit_token_t extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> val;
}

class mach_msg_audit_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;
}

@ffi.Packed(4)
class mach_msg_context_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;
}

typedef mach_port_context_t = vm_offset_t;
typedef vm_offset_t = uintptr_t;

class msg_labels_t extends ffi.Struct {
  @mach_port_name_t()
  external int sender;
}

@ffi.Packed(4)
class mach_msg_mac_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;

  @mach_msg_filter_id()
  external int msgh_ad;

  external msg_labels_t msgh_labels;
}

typedef mach_msg_filter_id = ffi.Int;

class mach_msg_empty_send_t extends ffi.Struct {
  external mach_msg_header_t header;
}

class mach_msg_empty_rcv_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_trailer_t trailer;
}

class mach_msg_empty_t extends ffi.Union {
  external mach_msg_empty_send_t send;

  external mach_msg_empty_rcv_t rcv;
}

typedef mach_msg_return_t = kern_return_t;
typedef kern_return_t = ffi.Int;
typedef mach_msg_option_t = integer_t;
typedef mach_msg_timeout_t = natural_t;

class dispatch_source_type_s extends ffi.Opaque {}

typedef dispatch_source_t = ffi.Pointer<dispatch_source_s>;
typedef dispatch_source_type_t = ffi.Pointer<dispatch_source_type_s>;
typedef dispatch_group_t = ffi.Pointer<dispatch_group_s>;
typedef dispatch_semaphore_t = ffi.Pointer<dispatch_semaphore_s>;
typedef dispatch_once_t = ffi.IntPtr;
typedef dispatch_data_t = ffi.Pointer<dispatch_data_s>;
typedef dispatch_io_t = ffi.Pointer<dispatch_io_s>;
typedef dispatch_io_close_flags_t = ffi.UnsignedLong;
typedef dispatch_fd_t = ffi.Int;
typedef dispatch_io_interval_flags_t = ffi.UnsignedLong;
typedef dispatch_workloop_t = dispatch_queue_t;

class CFStreamError extends ffi.Struct {
  @CFIndex()
  external int domain;

  @SInt32()
  external int error;
}

class CFStreamClientContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class __CFReadStream extends ffi.Opaque {}

class __CFWriteStream extends ffi.Opaque {}

typedef CFStreamPropertyKey = CFStringRef;
typedef CFReadStreamRef = ffi.Pointer<__CFReadStream>;
typedef CFWriteStreamRef = ffi.Pointer<__CFWriteStream>;
typedef CFStreamStatus = CFIndex;
typedef CFReadStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFReadStreamRef, CFStreamEventType, ffi.Pointer<ffi.Void>)>>;
typedef CFStreamEventType = CFOptionFlags;
typedef CFWriteStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFWriteStreamRef, CFStreamEventType, ffi.Pointer<ffi.Void>)>>;
typedef CFPropertyListFormat = CFIndex;

class CFSetCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFSetRetainCallBack retain;

  external CFSetReleaseCallBack release;

  external CFSetCopyDescriptionCallBack copyDescription;

  external CFSetEqualCallBack equal;

  external CFSetHashCallBack hash;
}

typedef CFSetRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFSetEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSetHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFSet extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;
typedef CFMutableSetRef = ffi.Pointer<__CFSet>;
typedef CFSetApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class CFTreeContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFTreeRetainCallBack retain;

  external CFTreeReleaseCallBack release;

  external CFTreeCopyDescriptionCallBack copyDescription;
}

typedef CFTreeRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

class __CFTree extends ffi.Opaque {}

typedef CFTreeRef = ffi.Pointer<__CFTree>;
typedef CFTreeApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFUUID extends ffi.Opaque {}

class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef CFUUIDRef = ffi.Pointer<__CFUUID>;

class __CFBundle extends ffi.Opaque {}

typedef CFBundleRef = ffi.Pointer<__CFBundle>;
typedef cpu_type_t = integer_t;
typedef CFPlugInRef = ffi.Pointer<__CFBundle>;
typedef CFBundleRefNum = ffi.Int;

class __CFMessagePort extends ffi.Opaque {}

class CFMessagePortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMessagePortRef = ffi.Pointer<__CFMessagePort>;
typedef CFMessagePortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(
            CFMessagePortRef, SInt32, CFDataRef, ffi.Pointer<ffi.Void>)>>;
typedef CFMessagePortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMessagePortRef, ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInFactoryFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef)>>;

class __CFPlugInInstance extends ffi.Opaque {}

typedef CFPlugInInstanceRef = ffi.Pointer<__CFPlugInInstance>;
typedef CFPlugInInstanceDeallocateInstanceDataFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInInstanceGetInterfaceFunction = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(CFPlugInInstanceRef, CFStringRef,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;

class __CFMachPort extends ffi.Opaque {}

class CFMachPortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMachPortRef = ffi.Pointer<__CFMachPort>;
typedef CFMachPortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>, CFIndex,
            ffi.Pointer<ffi.Void>)>>;
typedef CFMachPortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>)>>;

class __CFAttributedString extends ffi.Opaque {}

typedef CFAttributedStringRef = ffi.Pointer<__CFAttributedString>;
typedef CFMutableAttributedStringRef = ffi.Pointer<__CFAttributedString>;

class __CFURLEnumerator extends ffi.Opaque {}

typedef CFURLEnumeratorRef = ffi.Pointer<__CFURLEnumerator>;
typedef CFURLEnumeratorOptions = CFOptionFlags;
typedef CFURLEnumeratorResult = CFIndex;

class guid_t extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> g_guid;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> g_guid_asint;
}

@ffi.Packed(1)
class ntsid_t extends ffi.Struct {
  @u_int8_t()
  external int sid_kind;

  @u_int8_t()
  external int sid_authcount;

  @ffi.Array.multi([6])
  external ffi.Array<u_int8_t> sid_authority;

  @ffi.Array.multi([16])
  external ffi.Array<u_int32_t> sid_authorities;
}

typedef u_int8_t = ffi.UnsignedChar;
typedef u_int32_t = ffi.UnsignedInt;

class kauth_identity_extlookup extends ffi.Struct {
  @u_int32_t()
  external int el_seqno;

  @u_int32_t()
  external int el_result;

  @u_int32_t()
  external int el_flags;

  @__darwin_pid_t()
  external int el_info_pid;

  @u_int64_t()
  external int el_extend;

  @u_int32_t()
  external int el_info_reserved_1;

  @uid_t()
  external int el_uid;

  external guid_t el_uguid;

  @u_int32_t()
  external int el_uguid_valid;

  external ntsid_t el_usid;

  @u_int32_t()
  external int el_usid_valid;

  @gid_t()
  external int el_gid;

  external guid_t el_gguid;

  @u_int32_t()
  external int el_gguid_valid;

  external ntsid_t el_gsid;

  @u_int32_t()
  external int el_gsid_valid;

  @u_int32_t()
  external int el_member_valid;

  @u_int32_t()
  external int el_sup_grp_cnt;

  @ffi.Array.multi([16])
  external ffi.Array<gid_t> el_sup_groups;
}

typedef u_int64_t = ffi.UnsignedLongLong;

class kauth_cache_sizes extends ffi.Struct {
  @u_int32_t()
  external int kcs_group_size;

  @u_int32_t()
  external int kcs_id_size;
}

class kauth_ace extends ffi.Struct {
  external guid_t ace_applicable;

  @u_int32_t()
  external int ace_flags;

  @kauth_ace_rights_t()
  external int ace_rights;
}

typedef kauth_ace_rights_t = u_int32_t;

class kauth_acl extends ffi.Struct {
  @u_int32_t()
  external int acl_entrycount;

  @u_int32_t()
  external int acl_flags;

  @ffi.Array.multi([1])
  external ffi.Array<kauth_ace> acl_ace;
}

class kauth_filesec extends ffi.Struct {
  @u_int32_t()
  external int fsec_magic;

  external guid_t fsec_owner;

  external guid_t fsec_group;

  external kauth_acl fsec_acl;
}

abstract class acl_perm_t {
  static const int ACL_READ_DATA = 2;
  static const int ACL_LIST_DIRECTORY = 2;
  static const int ACL_WRITE_DATA = 4;
  static const int ACL_ADD_FILE = 4;
  static const int ACL_EXECUTE = 8;
  static const int ACL_SEARCH = 8;
  static const int ACL_DELETE = 16;
  static const int ACL_APPEND_DATA = 32;
  static const int ACL_ADD_SUBDIRECTORY = 32;
  static const int ACL_DELETE_CHILD = 64;
  static const int ACL_READ_ATTRIBUTES = 128;
  static const int ACL_WRITE_ATTRIBUTES = 256;
  static const int ACL_READ_EXTATTRIBUTES = 512;
  static const int ACL_WRITE_EXTATTRIBUTES = 1024;
  static const int ACL_READ_SECURITY = 2048;
  static const int ACL_WRITE_SECURITY = 4096;
  static const int ACL_CHANGE_OWNER = 8192;
  static const int ACL_SYNCHRONIZE = 1048576;
}

abstract class acl_tag_t {
  static const int ACL_UNDEFINED_TAG = 0;
  static const int ACL_EXTENDED_ALLOW = 1;
  static const int ACL_EXTENDED_DENY = 2;
}

abstract class acl_type_t {
  static const int ACL_TYPE_EXTENDED = 256;
  static const int ACL_TYPE_ACCESS = 0;
  static const int ACL_TYPE_DEFAULT = 1;
  static const int ACL_TYPE_AFS = 2;
  static const int ACL_TYPE_CODA = 3;
  static const int ACL_TYPE_NTFS = 4;
  static const int ACL_TYPE_NWFS = 5;
}

abstract class acl_entry_id_t {
  static const int ACL_FIRST_ENTRY = 0;
  static const int ACL_NEXT_ENTRY = -1;
  static const int ACL_LAST_ENTRY = -2;
}

abstract class acl_flag_t {
  static const int ACL_FLAG_DEFER_INHERIT = 1;
  static const int ACL_FLAG_NO_INHERIT = 131072;
  static const int ACL_ENTRY_INHERITED = 16;
  static const int ACL_ENTRY_FILE_INHERIT = 32;
  static const int ACL_ENTRY_DIRECTORY_INHERIT = 64;
  static const int ACL_ENTRY_LIMIT_INHERIT = 128;
  static const int ACL_ENTRY_ONLY_INHERIT = 256;
}

class _acl extends ffi.Opaque {}

class _acl_entry extends ffi.Opaque {}

class _acl_permset extends ffi.Opaque {}

class _acl_flagset extends ffi.Opaque {}

typedef acl_t = ffi.Pointer<_acl>;
typedef acl_entry_t = ffi.Pointer<_acl_entry>;
typedef acl_permset_t = ffi.Pointer<_acl_permset>;
typedef acl_permset_mask_t = u_int64_t;
typedef acl_flagset_t = ffi.Pointer<_acl_flagset>;

class __CFFileSecurity extends ffi.Opaque {}

typedef CFFileSecurityRef = ffi.Pointer<__CFFileSecurity>;
typedef CFFileSecurityClearOptions = CFOptionFlags;

class __CFStringTokenizer extends ffi.Opaque {}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;
typedef CFStringTokenizerTokenType = CFOptionFlags;

class __CFFileDescriptor extends ffi.Opaque {}

class CFFileDescriptorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFFileDescriptorRef = ffi.Pointer<__CFFileDescriptor>;
typedef CFFileDescriptorNativeDescriptor = ffi.Int;
typedef CFFileDescriptorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFFileDescriptorRef, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;

class __CFUserNotification extends ffi.Opaque {}

typedef CFUserNotificationRef = ffi.Pointer<__CFUserNotification>;
typedef CFUserNotificationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFUserNotificationRef, CFOptionFlags)>>;

class __CFXMLNode extends ffi.Opaque {}

class CFXMLElementInfo extends ffi.Struct {
  external CFDictionaryRef attributes;

  external CFArrayRef attributeOrder;

  @Boolean()
  external int isEmpty;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Char> _reserved;
}

class CFXMLProcessingInstructionInfo extends ffi.Struct {
  external CFStringRef dataString;
}

class CFXMLDocumentInfo extends ffi.Struct {
  external CFURLRef sourceURL;

  @CFStringEncoding()
  external int encoding;
}

class CFXMLExternalID extends ffi.Struct {
  external CFURLRef systemID;

  external CFStringRef publicID;
}

class CFXMLDocumentTypeInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLNotationInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLElementTypeDeclarationInfo extends ffi.Struct {
  external CFStringRef contentDescription;
}

class CFXMLAttributeDeclarationInfo extends ffi.Struct {
  external CFStringRef attributeName;

  external CFStringRef typeString;

  external CFStringRef defaultString;
}

class CFXMLAttributeListDeclarationInfo extends ffi.Struct {
  @CFIndex()
  external int numberOfAttributes;

  external ffi.Pointer<CFXMLAttributeDeclarationInfo> attributes;
}

class CFXMLEntityInfo extends ffi.Struct {
  @CFXMLEntityTypeCode()
  external int entityType;

  external CFStringRef replacementText;

  external CFXMLExternalID entityID;

  external CFStringRef notationName;
}

typedef CFXMLEntityTypeCode = CFIndex;

class CFXMLEntityReferenceInfo extends ffi.Struct {
  @CFXMLEntityTypeCode()
  external int entityType;
}

typedef CFXMLNodeRef = ffi.Pointer<__CFXMLNode>;
typedef CFXMLNodeTypeCode = CFIndex;
typedef CFXMLTreeRef = CFTreeRef;

class __CFXMLParser extends ffi.Opaque {}

class CFXMLParserCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFXMLParserCreateXMLStructureCallBack createXMLStructure;

  external CFXMLParserAddChildCallBack addChild;

  external CFXMLParserEndXMLStructureCallBack endXMLStructure;

  external CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;

  external CFXMLParserHandleErrorCallBack handleError;
}

typedef CFXMLParserCreateXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFXMLParserRef, CFXMLNodeRef, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserRef = ffi.Pointer<__CFXMLParser>;
typedef CFXMLParserAddChildCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFXMLParserRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserEndXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFXMLParserRef, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserResolveExternalEntityCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(CFXMLParserRef, ffi.Pointer<CFXMLExternalID>,
            ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserHandleErrorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(
            CFXMLParserRef, CFXMLParserStatusCode, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserStatusCode = CFIndex;

class CFXMLParserContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFXMLParserRetainCallBack retain;

  external CFXMLParserReleaseCallBack release;

  external CFXMLParserCopyDescriptionCallBack copyDescription;
}

typedef CFXMLParserRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

abstract class metalDeviceAttribute {
  static const int MTL_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 1;
  static const int MTL_DEVICE_ATTRIBUTE_UNIFIED_MEMORY = 2;
  static const int MTL_DEVICE_ATTRIBUTE_WARP_SIZE = 3;
  static const int MTL_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 4;
  static const int MTL_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 5;
  static const int MTL_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 6;
  static const int MTL_DEVICE_ATTRIBUTE_CLOCK_RATE = 7;
  static const int MTL_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8;
  static const int MTL_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9;
  static const int MTL_DEVICE_ATTRIBUTE_MAX_TRANSFER_RATE = 10;
  static const int MTL_DEVICE_ATTRIBUTE_HEADLESS = 11;
  static const int MTL_DEVICE_ATTRIBUTE_LOW_POWER = 12;
  static const int MTL_DEVICE_ATTRIBUTE_REMOVABLE = 13;
  static const int MTL_DEVICE_ATTRIBUTE_REGISTRY_ID = 14;
  static const int MTL_DEVICE_ATTRIBUTE_PHYSICAL_LOCATION = 15;
  static const int MTL_DEVICE_ATTRIBUTE_LOCATION_NUMBER = 16;
}

abstract class metalDeviceLocation {
  static const int MTL_DEVICE_LOCATION_BUILTIN = 0;
  static const int MTL_DEVICE_LOCATION_SLOT = 1;
  static const int MTL_DEVICE_LOCATION_EXTERNAL = 2;
  static const int MTL_DEVICE_LOCATION_UNSPECIFIED = -1;
}

class hc_metal extends ffi.Struct {
  external CFArrayRef devices;
}

class hc_device_param extends ffi.Struct {
  @ffi.Int()
  external int device_id;

  @ffi.Int()
  external int device_id_alias_cnt;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> device_id_alias_buf;

  @ffi.Int()
  external int pcie_domain;

  @ffi.Int()
  external int pcie_bus;

  @ffi.Int()
  external int pcie_device;

  @ffi.Int()
  external int pcie_function;

  @ffi.Bool()
  external bool skipped;

  @ffi.Bool()
  external bool skipped_warning;

  @u32()
  external int device_processors;

  @u64()
  external int device_maxmem_alloc;

  @u64()
  external int device_global_mem;

  @u64()
  external int device_available_mem;

  @ffi.Int()
  external int device_host_unified_memory;

  @u32()
  external int device_maxclock_frequency;

  @ffi.Size()
  external int device_maxworkgroup_size;

  @u64()
  external int device_local_mem_size;

  @ffi.Int()
  external int device_local_mem_type;

  external ffi.Pointer<ffi.Char> device_name;

  @ffi.Int()
  external int sm_major;

  @ffi.Int()
  external int sm_minor;

  @u32()
  external int kernel_exec_timeout;

  @u32()
  external int kernel_preferred_wgs_multiple;

  @ffi.Int32()
  external int st_status;

  @ffi.Int32()
  external int at_status;

  @ffi.Int()
  external int at_rc;

  @ffi.Int()
  external int vector_width;

  @u32()
  external int kernel_wgs1;

  @u32()
  external int kernel_wgs12;

  @u32()
  external int kernel_wgs2p;

  @u32()
  external int kernel_wgs2;

  @u32()
  external int kernel_wgs2e;

  @u32()
  external int kernel_wgs23;

  @u32()
  external int kernel_wgs3;

  @u32()
  external int kernel_wgs4;

  @u32()
  external int kernel_wgs_init2;

  @u32()
  external int kernel_wgs_loop2p;

  @u32()
  external int kernel_wgs_loop2;

  @u32()
  external int kernel_wgs_mp;

  @u32()
  external int kernel_wgs_mp_l;

  @u32()
  external int kernel_wgs_mp_r;

  @u32()
  external int kernel_wgs_amp;

  @u32()
  external int kernel_wgs_tm;

  @u32()
  external int kernel_wgs_memset;

  @u32()
  external int kernel_wgs_bzero;

  @u32()
  external int kernel_wgs_atinit;

  @u32()
  external int kernel_wgs_utf8toutf16le;

  @u32()
  external int kernel_wgs_decompress;

  @u32()
  external int kernel_wgs_aux1;

  @u32()
  external int kernel_wgs_aux2;

  @u32()
  external int kernel_wgs_aux3;

  @u32()
  external int kernel_wgs_aux4;

  @u32()
  external int kernel_preferred_wgs_multiple1;

  @u32()
  external int kernel_preferred_wgs_multiple12;

  @u32()
  external int kernel_preferred_wgs_multiple2p;

  @u32()
  external int kernel_preferred_wgs_multiple2;

  @u32()
  external int kernel_preferred_wgs_multiple2e;

  @u32()
  external int kernel_preferred_wgs_multiple23;

  @u32()
  external int kernel_preferred_wgs_multiple3;

  @u32()
  external int kernel_preferred_wgs_multiple4;

  @u32()
  external int kernel_preferred_wgs_multiple_init2;

  @u32()
  external int kernel_preferred_wgs_multiple_loop2p;

  @u32()
  external int kernel_preferred_wgs_multiple_loop2;

  @u32()
  external int kernel_preferred_wgs_multiple_mp;

  @u32()
  external int kernel_preferred_wgs_multiple_mp_l;

  @u32()
  external int kernel_preferred_wgs_multiple_mp_r;

  @u32()
  external int kernel_preferred_wgs_multiple_amp;

  @u32()
  external int kernel_preferred_wgs_multiple_tm;

  @u32()
  external int kernel_preferred_wgs_multiple_memset;

  @u32()
  external int kernel_preferred_wgs_multiple_bzero;

  @u32()
  external int kernel_preferred_wgs_multiple_atinit;

  @u32()
  external int kernel_preferred_wgs_multiple_utf8toutf16le;

  @u32()
  external int kernel_preferred_wgs_multiple_decompress;

  @u32()
  external int kernel_preferred_wgs_multiple_aux1;

  @u32()
  external int kernel_preferred_wgs_multiple_aux2;

  @u32()
  external int kernel_preferred_wgs_multiple_aux3;

  @u32()
  external int kernel_preferred_wgs_multiple_aux4;

  @u64()
  external int kernel_local_mem_size1;

  @u64()
  external int kernel_local_mem_size12;

  @u64()
  external int kernel_local_mem_size2p;

  @u64()
  external int kernel_local_mem_size2;

  @u64()
  external int kernel_local_mem_size2e;

  @u64()
  external int kernel_local_mem_size23;

  @u64()
  external int kernel_local_mem_size3;

  @u64()
  external int kernel_local_mem_size4;

  @u64()
  external int kernel_local_mem_size_init2;

  @u64()
  external int kernel_local_mem_size_loop2p;

  @u64()
  external int kernel_local_mem_size_loop2;

  @u64()
  external int kernel_local_mem_size_mp;

  @u64()
  external int kernel_local_mem_size_mp_l;

  @u64()
  external int kernel_local_mem_size_mp_r;

  @u64()
  external int kernel_local_mem_size_amp;

  @u64()
  external int kernel_local_mem_size_tm;

  @u64()
  external int kernel_local_mem_size_memset;

  @u64()
  external int kernel_local_mem_size_bzero;

  @u64()
  external int kernel_local_mem_size_atinit;

  @u64()
  external int kernel_local_mem_size_utf8toutf16le;

  @u64()
  external int kernel_local_mem_size_decompress;

  @u64()
  external int kernel_local_mem_size_aux1;

  @u64()
  external int kernel_local_mem_size_aux2;

  @u64()
  external int kernel_local_mem_size_aux3;

  @u64()
  external int kernel_local_mem_size_aux4;

  @u64()
  external int kernel_dynamic_local_mem_size1;

  @u64()
  external int kernel_dynamic_local_mem_size12;

  @u64()
  external int kernel_dynamic_local_mem_size2p;

  @u64()
  external int kernel_dynamic_local_mem_size2;

  @u64()
  external int kernel_dynamic_local_mem_size2e;

  @u64()
  external int kernel_dynamic_local_mem_size23;

  @u64()
  external int kernel_dynamic_local_mem_size3;

  @u64()
  external int kernel_dynamic_local_mem_size4;

  @u64()
  external int kernel_dynamic_local_mem_size_init2;

  @u64()
  external int kernel_dynamic_local_mem_size_loop2p;

  @u64()
  external int kernel_dynamic_local_mem_size_loop2;

  @u64()
  external int kernel_dynamic_local_mem_size_mp;

  @u64()
  external int kernel_dynamic_local_mem_size_mp_l;

  @u64()
  external int kernel_dynamic_local_mem_size_mp_r;

  @u64()
  external int kernel_dynamic_local_mem_size_amp;

  @u64()
  external int kernel_dynamic_local_mem_size_tm;

  @u64()
  external int kernel_dynamic_local_mem_size_memset;

  @u64()
  external int kernel_dynamic_local_mem_size_bzero;

  @u64()
  external int kernel_dynamic_local_mem_size_atinit;

  @u64()
  external int kernel_dynamic_local_mem_size_utf8toutf16le;

  @u64()
  external int kernel_dynamic_local_mem_size_decompress;

  @u64()
  external int kernel_dynamic_local_mem_size_aux1;

  @u64()
  external int kernel_dynamic_local_mem_size_aux2;

  @u64()
  external int kernel_dynamic_local_mem_size_aux3;

  @u64()
  external int kernel_dynamic_local_mem_size_aux4;

  @u32()
  external int kernel_accel;

  @u32()
  external int kernel_accel_prev;

  @u32()
  external int kernel_accel_min;

  @u32()
  external int kernel_accel_max;

  @u32()
  external int kernel_loops;

  @u32()
  external int kernel_loops_prev;

  @u32()
  external int kernel_loops_min;

  @u32()
  external int kernel_loops_max;

  @u32()
  external int kernel_loops_min_sav;

  @u32()
  external int kernel_loops_max_sav;

  @u32()
  external int kernel_threads;

  @u32()
  external int kernel_threads_prev;

  @u32()
  external int kernel_threads_min;

  @u32()
  external int kernel_threads_max;

  @u64()
  external int kernel_power;

  @u64()
  external int hardware_power;

  @u64()
  external int size_pws;

  @u64()
  external int size_pws_amp;

  @u64()
  external int size_pws_comp;

  @u64()
  external int size_pws_idx;

  @u64()
  external int size_pws_pre;

  @u64()
  external int size_pws_base;

  @u64()
  external int size_tmps;

  @u64()
  external int size_hooks;

  @u64()
  external int size_bfs;

  @u64()
  external int size_combs;

  @u64()
  external int size_rules;

  @u64()
  external int size_rules_c;

  @u64()
  external int size_root_css;

  @u64()
  external int size_markov_css;

  @u64()
  external int size_digests;

  @u64()
  external int size_salts;

  @u64()
  external int size_esalts;

  @u64()
  external int size_shown;

  @u64()
  external int size_results;

  @u64()
  external int size_plains;

  @u64()
  external int size_st_digests;

  @u64()
  external int size_st_salts;

  @u64()
  external int size_st_esalts;

  @u64()
  external int size_tm;

  @u64()
  external int size_kernel_params;

  @u64()
  external int extra_buffer_size;

  external ffi.Pointer<ffi.Char> scratch_buf;

  external HCFILE combs_fp;

  external ffi.Pointer<ffi.Int> combs_buf;

  external ffi.Pointer<ffi.Void> hooks_buf;

  external ffi.Pointer<ffi.Int> pws_idx;

  external ffi.Pointer<u32> pws_comp;

  @u64()
  external int pws_cnt;

  external ffi.Pointer<pw_pre_t> pws_pre_buf;

  @u64()
  external int pws_pre_cnt;

  external ffi.Pointer<pw_pre_t> pws_base_buf;

  @u64()
  external int pws_base_cnt;

  @u64()
  external int words_off;

  @u64()
  external int words_done;

  @u64()
  external int outerloop_pos;

  @u64()
  external int outerloop_left;

  @ffi.Double()
  external double outerloop_msec;

  @ffi.Double()
  external double outerloop_multi;

  @u32()
  external int innerloop_pos;

  @u32()
  external int innerloop_left;

  @u32()
  external int exec_pos;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Double> exec_msec;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev1;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev2p;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev2;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev2e;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev3;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev4;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_init2;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_loop2p;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_loop2;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_aux1;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_aux2;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_aux3;

  @ffi.Array.multi([10000])
  external ffi.Array<ffi.Double> exec_us_prev_aux4;

  @u32()
  external int speed_pos;

  @ffi.Array.multi([4096])
  external ffi.Array<u64> speed_cnt;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Double> speed_msec;

  @ffi.Bool()
  external bool speed_only_finish;

  external hc_timer_t timer_speed;

  @ffi.Bool()
  external bool use_opencl12;

  @ffi.Bool()
  external bool use_opencl20;

  @ffi.Bool()
  external bool use_opencl21;

  @ffi.Bool()
  external bool has_vadd;

  @ffi.Bool()
  external bool has_vaddc;

  @ffi.Bool()
  external bool has_vadd_co;

  @ffi.Bool()
  external bool has_vaddc_co;

  @ffi.Bool()
  external bool has_vsub;

  @ffi.Bool()
  external bool has_vsubb;

  @ffi.Bool()
  external bool has_vsub_co;

  @ffi.Bool()
  external bool has_vsubb_co;

  @ffi.Bool()
  external bool has_vadd3;

  @ffi.Bool()
  external bool has_vbfe;

  @ffi.Bool()
  external bool has_vperm;

  @ffi.Bool()
  external bool has_add;

  @ffi.Bool()
  external bool has_addc;

  @ffi.Bool()
  external bool has_sub;

  @ffi.Bool()
  external bool has_subc;

  @ffi.Bool()
  external bool has_bfe;

  @ffi.Bool()
  external bool has_lop3;

  @ffi.Bool()
  external bool has_mov64;

  @ffi.Bool()
  external bool has_prmt;

  @ffi.Double()
  external double spin_damp;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_mp;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_mp_r;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_mp_l;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_amp;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_tm;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_memset;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_bzero;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_atinit;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_utf8toutf16le;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> kernel_params_decompress;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_mp_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_mp_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_mp_r_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_mp_r_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_mp_l_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_mp_l_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_amp_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_amp_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_memset_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_memset_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_bzero_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_bzero_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_atinit_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_atinit_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_utf8toutf16le_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_utf8toutf16le_buf64;

  @ffi.Array.multi([64])
  external ffi.Array<u32> kernel_params_decompress_buf32;

  @ffi.Array.multi([64])
  external ffi.Array<u64> kernel_params_decompress_buf64;

  @ffi.Int()
  external int kernel_param;

  @ffi.Bool()
  external bool is_cuda;

  @ffi.Int()
  external int cuda_warp_size;

  @CUdevice()
  external int cuda_device;

  external CUcontext cuda_context;

  external CUstream cuda_stream;

  external CUevent cuda_event1;

  external CUevent cuda_event2;

  external CUevent cuda_event3;

  external CUmodule cuda_module;

  external CUmodule cuda_module_shared;

  external CUmodule cuda_module_mp;

  external CUmodule cuda_module_amp;

  external CUfunction cuda_function1;

  external CUfunction cuda_function12;

  external CUfunction cuda_function2p;

  external CUfunction cuda_function2;

  external CUfunction cuda_function2e;

  external CUfunction cuda_function23;

  external CUfunction cuda_function3;

  external CUfunction cuda_function4;

  external CUfunction cuda_function_init2;

  external CUfunction cuda_function_loop2p;

  external CUfunction cuda_function_loop2;

  external CUfunction cuda_function_mp;

  external CUfunction cuda_function_mp_l;

  external CUfunction cuda_function_mp_r;

  external CUfunction cuda_function_amp;

  external CUfunction cuda_function_tm;

  external CUfunction cuda_function_memset;

  external CUfunction cuda_function_bzero;

  external CUfunction cuda_function_atinit;

  external CUfunction cuda_function_utf8toutf16le;

  external CUfunction cuda_function_decompress;

  external CUfunction cuda_function_aux1;

  external CUfunction cuda_function_aux2;

  external CUfunction cuda_function_aux3;

  external CUfunction cuda_function_aux4;

  @CUdeviceptr()
  external int cuda_d_pws_buf;

  @CUdeviceptr()
  external int cuda_d_pws_amp_buf;

  @CUdeviceptr()
  external int cuda_d_pws_comp_buf;

  @CUdeviceptr()
  external int cuda_d_pws_idx;

  @CUdeviceptr()
  external int cuda_d_rules;

  @CUdeviceptr()
  external int cuda_d_rules_c;

  @CUdeviceptr()
  external int cuda_d_combs;

  @CUdeviceptr()
  external int cuda_d_combs_c;

  @CUdeviceptr()
  external int cuda_d_bfs;

  @CUdeviceptr()
  external int cuda_d_bfs_c;

  @CUdeviceptr()
  external int cuda_d_tm_c;

  @CUdeviceptr()
  external int cuda_d_bitmap_s1_a;

  @CUdeviceptr()
  external int cuda_d_bitmap_s1_b;

  @CUdeviceptr()
  external int cuda_d_bitmap_s1_c;

  @CUdeviceptr()
  external int cuda_d_bitmap_s1_d;

  @CUdeviceptr()
  external int cuda_d_bitmap_s2_a;

  @CUdeviceptr()
  external int cuda_d_bitmap_s2_b;

  @CUdeviceptr()
  external int cuda_d_bitmap_s2_c;

  @CUdeviceptr()
  external int cuda_d_bitmap_s2_d;

  @CUdeviceptr()
  external int cuda_d_plain_bufs;

  @CUdeviceptr()
  external int cuda_d_digests_buf;

  @CUdeviceptr()
  external int cuda_d_digests_shown;

  @CUdeviceptr()
  external int cuda_d_salt_bufs;

  @CUdeviceptr()
  external int cuda_d_esalt_bufs;

  @CUdeviceptr()
  external int cuda_d_tmps;

  @CUdeviceptr()
  external int cuda_d_hooks;

  @CUdeviceptr()
  external int cuda_d_result;

  @CUdeviceptr()
  external int cuda_d_extra0_buf;

  @CUdeviceptr()
  external int cuda_d_extra1_buf;

  @CUdeviceptr()
  external int cuda_d_extra2_buf;

  @CUdeviceptr()
  external int cuda_d_extra3_buf;

  @CUdeviceptr()
  external int cuda_d_root_css_buf;

  @CUdeviceptr()
  external int cuda_d_markov_css_buf;

  @CUdeviceptr()
  external int cuda_d_st_digests_buf;

  @CUdeviceptr()
  external int cuda_d_st_salts_buf;

  @CUdeviceptr()
  external int cuda_d_st_esalts_buf;

  @CUdeviceptr()
  external int cuda_d_kernel_param;

  @ffi.Bool()
  external bool is_hip;

  @ffi.Int()
  external int hip_warp_size;

  @hipDevice_t()
  external int hip_device;

  external hipCtx_t hip_context;

  external hipStream_t hip_stream;

  external hipEvent_t hip_event1;

  external hipEvent_t hip_event2;

  external hipEvent_t hip_event3;

  external hipModule_t hip_module;

  external hipModule_t hip_module_shared;

  external hipModule_t hip_module_mp;

  external hipModule_t hip_module_amp;

  external hipFunction_t hip_function1;

  external hipFunction_t hip_function12;

  external hipFunction_t hip_function2p;

  external hipFunction_t hip_function2;

  external hipFunction_t hip_function2e;

  external hipFunction_t hip_function23;

  external hipFunction_t hip_function3;

  external hipFunction_t hip_function4;

  external hipFunction_t hip_function_init2;

  external hipFunction_t hip_function_loop2p;

  external hipFunction_t hip_function_loop2;

  external hipFunction_t hip_function_mp;

  external hipFunction_t hip_function_mp_l;

  external hipFunction_t hip_function_mp_r;

  external hipFunction_t hip_function_amp;

  external hipFunction_t hip_function_tm;

  external hipFunction_t hip_function_memset;

  external hipFunction_t hip_function_bzero;

  external hipFunction_t hip_function_atinit;

  external hipFunction_t hip_function_utf8toutf16le;

  external hipFunction_t hip_function_decompress;

  external hipFunction_t hip_function_aux1;

  external hipFunction_t hip_function_aux2;

  external hipFunction_t hip_function_aux3;

  external hipFunction_t hip_function_aux4;

  external hipDeviceptr_t hip_d_pws_buf;

  external hipDeviceptr_t hip_d_pws_amp_buf;

  external hipDeviceptr_t hip_d_pws_comp_buf;

  external hipDeviceptr_t hip_d_pws_idx;

  external hipDeviceptr_t hip_d_rules;

  external hipDeviceptr_t hip_d_rules_c;

  external hipDeviceptr_t hip_d_combs;

  external hipDeviceptr_t hip_d_combs_c;

  external hipDeviceptr_t hip_d_bfs;

  external hipDeviceptr_t hip_d_bfs_c;

  external hipDeviceptr_t hip_d_tm_c;

  external hipDeviceptr_t hip_d_bitmap_s1_a;

  external hipDeviceptr_t hip_d_bitmap_s1_b;

  external hipDeviceptr_t hip_d_bitmap_s1_c;

  external hipDeviceptr_t hip_d_bitmap_s1_d;

  external hipDeviceptr_t hip_d_bitmap_s2_a;

  external hipDeviceptr_t hip_d_bitmap_s2_b;

  external hipDeviceptr_t hip_d_bitmap_s2_c;

  external hipDeviceptr_t hip_d_bitmap_s2_d;

  external hipDeviceptr_t hip_d_plain_bufs;

  external hipDeviceptr_t hip_d_digests_buf;

  external hipDeviceptr_t hip_d_digests_shown;

  external hipDeviceptr_t hip_d_salt_bufs;

  external hipDeviceptr_t hip_d_esalt_bufs;

  external hipDeviceptr_t hip_d_tmps;

  external hipDeviceptr_t hip_d_hooks;

  external hipDeviceptr_t hip_d_result;

  external hipDeviceptr_t hip_d_extra0_buf;

  external hipDeviceptr_t hip_d_extra1_buf;

  external hipDeviceptr_t hip_d_extra2_buf;

  external hipDeviceptr_t hip_d_extra3_buf;

  external hipDeviceptr_t hip_d_root_css_buf;

  external hipDeviceptr_t hip_d_markov_css_buf;

  external hipDeviceptr_t hip_d_st_digests_buf;

  external hipDeviceptr_t hip_d_st_salts_buf;

  external hipDeviceptr_t hip_d_st_esalts_buf;

  external hipDeviceptr_t hip_d_kernel_param;

  @ffi.Bool()
  external bool is_apple_silicon;

  @ffi.Bool()
  external bool is_metal;

  @ffi.Int()
  external int mtl_major;

  @ffi.Int()
  external int mtl_minor;

  @ffi.Int()
  external int device_physical_location;

  @ffi.Int()
  external int device_location_number;

  @ffi.Int()
  external int device_registryID;

  @ffi.Int()
  external int device_max_transfer_rate;

  @ffi.Int()
  external int device_is_headless;

  @ffi.Int()
  external int device_is_low_power;

  @ffi.Int()
  external int device_is_removable;

  @ffi.Int()
  external int metal_warp_size;

  external id metal_device;

  external id metal_command_queue;

  external id metal_library;

  external id metal_library_shared;

  external id metal_library_mp;

  external id metal_library_amp;

  external id metal_function1;

  external id metal_function12;

  external id metal_function2p;

  external id metal_function2;

  external id metal_function2e;

  external id metal_function23;

  external id metal_function3;

  external id metal_function4;

  external id metal_function_init2;

  external id metal_function_loop2p;

  external id metal_function_loop2;

  external id metal_function_mp;

  external id metal_function_mp_l;

  external id metal_function_mp_r;

  external id metal_function_amp;

  external id metal_function_tm;

  external id metal_function_memset;

  external id metal_function_bzero;

  external id metal_function_atinit;

  external id metal_function_utf8toutf16le;

  external id metal_function_decompress;

  external id metal_function_aux1;

  external id metal_function_aux2;

  external id metal_function_aux3;

  external id metal_function_aux4;

  external id metal_pipeline1;

  external id metal_pipeline12;

  external id metal_pipeline2p;

  external id metal_pipeline2;

  external id metal_pipeline2e;

  external id metal_pipeline23;

  external id metal_pipeline3;

  external id metal_pipeline4;

  external id metal_pipeline_init2;

  external id metal_pipeline_loop2p;

  external id metal_pipeline_loop2;

  external id metal_pipeline_mp;

  external id metal_pipeline_mp_l;

  external id metal_pipeline_mp_r;

  external id metal_pipeline_amp;

  external id metal_pipeline_tm;

  external id metal_pipeline_memset;

  external id metal_pipeline_bzero;

  external id metal_pipeline_atinit;

  external id metal_pipeline_utf8toutf16le;

  external id metal_pipeline_decompress;

  external id metal_pipeline_aux1;

  external id metal_pipeline_aux2;

  external id metal_pipeline_aux3;

  external id metal_pipeline_aux4;

  external id metal_d_pws_buf;

  external id metal_d_pws_amp_buf;

  external id metal_d_pws_comp_buf;

  external id metal_d_pws_idx;

  external id metal_d_rules;

  external id metal_d_rules_c;

  external id metal_d_combs;

  external id metal_d_combs_c;

  external id metal_d_bfs;

  external id metal_d_bfs_c;

  external id metal_d_tm_c;

  external id metal_d_bitmap_s1_a;

  external id metal_d_bitmap_s1_b;

  external id metal_d_bitmap_s1_c;

  external id metal_d_bitmap_s1_d;

  external id metal_d_bitmap_s2_a;

  external id metal_d_bitmap_s2_b;

  external id metal_d_bitmap_s2_c;

  external id metal_d_bitmap_s2_d;

  external id metal_d_plain_bufs;

  external id metal_d_digests_buf;

  external id metal_d_digests_shown;

  external id metal_d_salt_bufs;

  external id metal_d_esalt_bufs;

  external id metal_d_tmps;

  external id metal_d_hooks;

  external id metal_d_result;

  external id metal_d_extra0_buf;

  external id metal_d_extra1_buf;

  external id metal_d_extra2_buf;

  external id metal_d_extra3_buf;

  external id metal_d_root_css_buf;

  external id metal_d_markov_css_buf;

  external id metal_d_st_digests_buf;

  external id metal_d_st_salts_buf;

  external id metal_d_st_esalts_buf;

  external id metal_d_kernel_param;

  @ffi.Bool()
  external bool is_opencl;

  external ffi.Pointer<ffi.Char> opencl_driver_version;

  external ffi.Pointer<ffi.Char> opencl_device_vendor;

  external ffi.Pointer<ffi.Char> opencl_device_version;

  external ffi.Pointer<ffi.Char> opencl_device_c_version;

  @cl_device_type()
  external int opencl_device_type;

  @cl_uint()
  external int opencl_device_vendor_id;

  @u32()
  external int opencl_platform_id;

  @cl_uint()
  external int opencl_platform_vendor_id;

  external cl_device_id opencl_device;

  external cl_context opencl_context;

  external cl_command_queue opencl_command_queue;

  external cl_program opencl_program;

  external cl_program opencl_program_shared;

  external cl_program opencl_program_mp;

  external cl_program opencl_program_amp;

  external cl_kernel opencl_kernel1;

  external cl_kernel opencl_kernel12;

  external cl_kernel opencl_kernel2p;

  external cl_kernel opencl_kernel2;

  external cl_kernel opencl_kernel2e;

  external cl_kernel opencl_kernel23;

  external cl_kernel opencl_kernel3;

  external cl_kernel opencl_kernel4;

  external cl_kernel opencl_kernel_init2;

  external cl_kernel opencl_kernel_loop2p;

  external cl_kernel opencl_kernel_loop2;

  external cl_kernel opencl_kernel_mp;

  external cl_kernel opencl_kernel_mp_l;

  external cl_kernel opencl_kernel_mp_r;

  external cl_kernel opencl_kernel_amp;

  external cl_kernel opencl_kernel_tm;

  external cl_kernel opencl_kernel_memset;

  external cl_kernel opencl_kernel_bzero;

  external cl_kernel opencl_kernel_atinit;

  external cl_kernel opencl_kernel_utf8toutf16le;

  external cl_kernel opencl_kernel_decompress;

  external cl_kernel opencl_kernel_aux1;

  external cl_kernel opencl_kernel_aux2;

  external cl_kernel opencl_kernel_aux3;

  external cl_kernel opencl_kernel_aux4;

  external cl_mem opencl_d_pws_buf;

  external cl_mem opencl_d_pws_amp_buf;

  external cl_mem opencl_d_pws_comp_buf;

  external cl_mem opencl_d_pws_idx;

  external cl_mem opencl_d_rules;

  external cl_mem opencl_d_rules_c;

  external cl_mem opencl_d_combs;

  external cl_mem opencl_d_combs_c;

  external cl_mem opencl_d_bfs;

  external cl_mem opencl_d_bfs_c;

  external cl_mem opencl_d_tm_c;

  external cl_mem opencl_d_bitmap_s1_a;

  external cl_mem opencl_d_bitmap_s1_b;

  external cl_mem opencl_d_bitmap_s1_c;

  external cl_mem opencl_d_bitmap_s1_d;

  external cl_mem opencl_d_bitmap_s2_a;

  external cl_mem opencl_d_bitmap_s2_b;

  external cl_mem opencl_d_bitmap_s2_c;

  external cl_mem opencl_d_bitmap_s2_d;

  external cl_mem opencl_d_plain_bufs;

  external cl_mem opencl_d_digests_buf;

  external cl_mem opencl_d_digests_shown;

  external cl_mem opencl_d_salt_bufs;

  external cl_mem opencl_d_esalt_bufs;

  external cl_mem opencl_d_tmps;

  external cl_mem opencl_d_hooks;

  external cl_mem opencl_d_result;

  external cl_mem opencl_d_extra0_buf;

  external cl_mem opencl_d_extra1_buf;

  external cl_mem opencl_d_extra2_buf;

  external cl_mem opencl_d_extra3_buf;

  external cl_mem opencl_d_root_css_buf;

  external cl_mem opencl_d_markov_css_buf;

  external cl_mem opencl_d_st_digests_buf;

  external cl_mem opencl_d_st_salts_buf;

  external cl_mem opencl_d_st_esalts_buf;

  external cl_mem opencl_d_kernel_param;
}

typedef HCFILE = hc_fp;
typedef pw_pre_t = pw_pre;

class backend_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  @ffi.Bool()
  external bool memory_hit_warning;

  @ffi.Bool()
  external bool runtime_skip_warning;

  @ffi.Bool()
  external bool kernel_build_warning;

  @ffi.Bool()
  external bool kernel_create_warning;

  @ffi.Bool()
  external bool kernel_accel_warnings;

  @ffi.Bool()
  external bool extra_size_warning;

  @ffi.Bool()
  external bool mixed_warnings;

  @ffi.Bool()
  external bool self_test_warnings;

  external ffi.Pointer<ffi.Void> cuda;

  external ffi.Pointer<ffi.Void> hip;

  external ffi.Pointer<ffi.Void> mtl;

  external ffi.Pointer<ffi.Void> ocl;

  external ffi.Pointer<ffi.Void> nvrtc;

  external ffi.Pointer<ffi.Void> hiprtc;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> backend_device_from_cuda;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> backend_device_from_hip;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> backend_device_from_metal;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> backend_device_from_opencl;

  @ffi.Array.multi([16, 128])
  external ffi.Array<ffi.Array<ffi.Int>> backend_device_from_opencl_platform;

  @ffi.Int()
  external int backend_devices_cnt;

  @ffi.Int()
  external int backend_devices_active;

  @ffi.Int()
  external int cuda_devices_cnt;

  @ffi.Int()
  external int cuda_devices_active;

  @ffi.Int()
  external int hip_devices_cnt;

  @ffi.Int()
  external int hip_devices_active;

  @ffi.Int()
  external int metal_devices_cnt;

  @ffi.Int()
  external int metal_devices_active;

  @ffi.Int()
  external int opencl_devices_cnt;

  @ffi.Int()
  external int opencl_devices_active;

  @u64()
  external int backend_devices_filter;

  external ffi.Pointer<hc_device_param_t> devices_param;

  @u32()
  external int hardware_power_all;

  @u64()
  external int kernel_power_all;

  @u64()
  external int kernel_power_final;

  @ffi.Double()
  external double target_msec;

  @ffi.Bool()
  external bool need_adl;

  @ffi.Bool()
  external bool need_nvml;

  @ffi.Bool()
  external bool need_nvapi;

  @ffi.Bool()
  external bool need_sysfs_amdgpu;

  @ffi.Bool()
  external bool need_sysfs_cpu;

  @ffi.Bool()
  external bool need_iokit;

  @ffi.Int()
  external int comptime;

  @ffi.Int()
  external int force_jit_compilation;

  @ffi.Int()
  external int rc_cuda_init;

  @ffi.Int()
  external int rc_nvrtc_init;

  @ffi.Int()
  external int nvrtc_driver_version;

  @ffi.Int()
  external int cuda_driver_version;

  @ffi.Int()
  external int rc_hip_init;

  @ffi.Int()
  external int rc_hiprtc_init;

  @ffi.Int()
  external int hip_runtimeVersion;

  @ffi.Int()
  external int hip_driverVersion;

  @ffi.Int()
  external int rc_metal_init;

  @ffi.UnsignedInt()
  external int metal_runtimeVersion;

  external ffi.Pointer<ffi.Char> metal_runtimeVersionStr;

  external ffi.Pointer<cl_platform_id> opencl_platforms;

  @cl_uint()
  external int opencl_platforms_cnt;

  external ffi.Pointer<ffi.Pointer<cl_device_id>> opencl_platforms_devices;

  external ffi.Pointer<cl_uint> opencl_platforms_devices_cnt;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> opencl_platforms_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> opencl_platforms_vendor;

  external ffi.Pointer<cl_uint> opencl_platforms_vendor_id;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> opencl_platforms_version;

  @cl_device_type()
  external int opencl_device_types_filter;
}

typedef hc_device_param_t = hc_device_param;

abstract class kernel_workload {
  static const int KERNEL_ACCEL_MIN = 1;
  static const int KERNEL_ACCEL_MAX = 1024;
  static const int KERNEL_LOOPS_MIN = 1;
  static const int KERNEL_LOOPS_MAX = 1024;
  static const int KERNEL_THREADS_MIN = 1;
  static const int KERNEL_THREADS_MAX = 1024;
}

abstract class ADLSensorType {
  static const int SENSOR_MAXTYPES = 0;
  static const int PMLOG_CLK_GFXCLK = 1;
  static const int PMLOG_CLK_MEMCLK = 2;
  static const int PMLOG_CLK_SOCCLK = 3;
  static const int PMLOG_CLK_UVDCLK1 = 4;
  static const int PMLOG_CLK_UVDCLK2 = 5;
  static const int PMLOG_CLK_VCECLK = 6;
  static const int PMLOG_CLK_VCNCLK = 7;
  static const int PMLOG_TEMPERATURE_EDGE = 8;
  static const int PMLOG_TEMPERATURE_MEM = 9;
  static const int PMLOG_TEMPERATURE_VRVDDC = 10;
  static const int PMLOG_TEMPERATURE_VRMVDD = 11;
  static const int PMLOG_TEMPERATURE_LIQUID = 12;
  static const int PMLOG_TEMPERATURE_PLX = 13;
  static const int PMLOG_FAN_RPM = 14;
  static const int PMLOG_FAN_PERCENTAGE = 15;
  static const int PMLOG_SOC_VOLTAGE = 16;
  static const int PMLOG_SOC_POWER = 17;
  static const int PMLOG_SOC_CURRENT = 18;
  static const int PMLOG_INFO_ACTIVITY_GFX = 19;
  static const int PMLOG_INFO_ACTIVITY_MEM = 20;
  static const int PMLOG_GFX_VOLTAGE = 21;
  static const int PMLOG_MEM_VOLTAGE = 22;
  static const int PMLOG_ASIC_POWER = 23;
  static const int PMLOG_TEMPERATURE_VRSOC = 24;
  static const int PMLOG_TEMPERATURE_VRMVDD0 = 25;
  static const int PMLOG_TEMPERATURE_VRMVDD1 = 26;
  static const int PMLOG_TEMPERATURE_HOTSPOT = 27;
  static const int PMLOG_TEMPERATURE_GFX = 28;
  static const int PMLOG_TEMPERATURE_SOC = 29;
  static const int PMLOG_GFX_POWER = 30;
  static const int PMLOG_GFX_CURRENT = 31;
  static const int PMLOG_TEMPERATURE_CPU = 32;
  static const int PMLOG_CPU_POWER = 33;
  static const int PMLOG_CLK_CPUCLK = 34;
  static const int PMLOG_THROTTLER_STATUS = 35;
  static const int PMLOG_CLK_VCN1CLK1 = 36;
  static const int PMLOG_CLK_VCN1CLK2 = 37;
  static const int PMLOG_SMART_POWERSHIFT_CPU = 38;
  static const int PMLOG_SMART_POWERSHIFT_DGPU = 39;
  static const int PMLOG_BUS_SPEED = 40;
  static const int PMLOG_BUS_LANES = 41;
  static const int PMLOG_MAX_SENSORS_REAL = 42;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about the graphics adapter.
///
/// This structure is used to store various information about the graphics adapter.  This
/// information can be returned to the user. Alternatively, it can be used to access various driver calls to set
/// or fetch various settings upon the user's request.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class AdapterInfo extends ffi.Struct {
  /// Size of the structure.
  @ffi.Int()
  external int iSize;

  /// The ADL index handle. One GPU may be associated with one or two index handles
  @ffi.Int()
  external int iAdapterIndex;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> strUDID;

  /// The BUS number associated with this adapter.
  @ffi.Int()
  external int iBusNumber;

  /// The driver number associated with this adapter.
  @ffi.Int()
  external int iDeviceNumber;

  /// The function number.
  @ffi.Int()
  external int iFunctionNumber;

  /// The vendor ID associated with this adapter.
  @ffi.Int()
  external int iVendorID;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> strAdapterName;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> strDisplayName;

  /// Present or not; 1 if present and 0 if not present.It the logical adapter is present, the display name such as \\\\.\\Display1 can be found from OS
  @ffi.Int()
  external int iPresent;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about thermal controller.
///
/// This structure is used to store information about thermal controller.
/// This structure is used by ADL_PM_ThermalDevices_Enum.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLThermalControllerInfo extends ffi.Struct {
  /// Must be set to the size of the structure
  @ffi.Int()
  external int iSize;

  /// Possible valies: \ref ADL_DL_THERMAL_DOMAIN_OTHER or \ref ADL_DL_THERMAL_DOMAIN_GPU.
  @ffi.Int()
  external int iThermalDomain;

  /// GPU 0, 1, etc.
  @ffi.Int()
  external int iDomainIndex;

  /// Possible valies: \ref ADL_DL_THERMAL_FLAG_INTERRUPT or \ref ADL_DL_THERMAL_FLAG_FANCONTROL
  @ffi.Int()
  external int iFlags;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about thermal controller temperature.
///
/// This structure is used to store information about thermal controller temperature.
/// This structure is used by the ADL_PM_Temperature_Get() function.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLTemperature extends ffi.Struct {
  /// Must be set to the size of the structure
  @ffi.Int()
  external int iSize;

  /// Temperature in millidegrees Celsius.
  @ffi.Int()
  external int iTemperature;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about thermal controller fan speed.
///
/// This structure is used to store information about thermal controller fan speed.
/// This structure is used by the ADL_PM_FanSpeedInfo_Get() function.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLFanSpeedInfo extends ffi.Struct {
  /// Must be set to the size of the structure
  @ffi.Int()
  external int iSize;

  /// \ref define_fanctrl
  @ffi.Int()
  external int iFlags;

  /// Minimum possible fan speed value in percents.
  @ffi.Int()
  external int iMinPercent;

  /// Maximum possible fan speed value in percents.
  @ffi.Int()
  external int iMaxPercent;

  /// Minimum possible fan speed value in RPM.
  @ffi.Int()
  external int iMinRPM;

  /// Maximum possible fan speed value in RPM.
  @ffi.Int()
  external int iMaxRPM;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about fan speed reported by thermal controller.
///
/// This structure is used to store information about fan speed reported by thermal controller.
/// This structure is used by the ADL_Overdrive5_FanSpeed_Get() and ADL_Overdrive5_FanSpeed_Set() functions.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLFanSpeedValue extends ffi.Struct {
  /// Must be set to the size of the structure
  @ffi.Int()
  external int iSize;

  /// Possible valies: \ref ADL_DL_FANCTRL_SPEED_TYPE_PERCENT or \ref ADL_DL_FANCTRL_SPEED_TYPE_RPM
  @ffi.Int()
  external int iSpeedType;

  /// Fan speed value
  @ffi.Int()
  external int iFanSpeed;

  /// The only flag for now is: \ref ADL_DL_FANCTRL_FLAG_USER_DEFINED_SPEED
  @ffi.Int()
  external int iFlags;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about current power management related activity.
///
/// This structure is used to store information about current power management related activity.
/// This structure (Overdrive 5 interfaces) is used by the ADL_PM_CurrentActivity_Get() function.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLPMActivity extends ffi.Struct {
  /// Must be set to the size of the structure
  @ffi.Int()
  external int iSize;

  /// Current engine clock.
  @ffi.Int()
  external int iEngineClock;

  /// Current memory clock.
  @ffi.Int()
  external int iMemoryClock;

  /// Current core voltage.
  @ffi.Int()
  external int iVddc;

  /// GPU utilization.
  @ffi.Int()
  external int iActivityPercent;

  /// Performance level index.
  @ffi.Int()
  external int iCurrentPerformanceLevel;

  /// Current PCIE bus speed.
  @ffi.Int()
  external int iCurrentBusSpeed;

  /// Number of PCIE bus lanes.
  @ffi.Int()
  external int iCurrentBusLanes;

  /// Maximum number of PCIE bus lanes.
  @ffi.Int()
  external int iMaximumBusLanes;

  /// Reserved for future purposes.
  @ffi.Int()
  external int iReserved;
}

/// /////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing the range of Overdrive parameter.
///
/// This structure is used to store information about the range of Overdrive parameter.
/// This structure is used by ADLODParameters.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLODParameterRange extends ffi.Struct {
  /// Minimum parameter value.
  @ffi.Int()
  external int iMin;

  /// Maximum parameter value.
  @ffi.Int()
  external int iMax;

  /// Parameter step value.
  @ffi.Int()
  external int iStep;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive parameters.
///
/// This structure is used to store information about Overdrive parameters.
/// This structure is used by the ADL_Overdrive5_ODParameters_Get() function.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLODParameters extends ffi.Struct {
  /// Must be set to the size of the structure
  @ffi.Int()
  external int iSize;

  /// Number of standard performance states.
  @ffi.Int()
  external int iNumberOfPerformanceLevels;

  /// Indicates whether the GPU is capable to measure its activity.
  @ffi.Int()
  external int iActivityReportingSupported;

  /// Indicates whether the GPU supports discrete performance levels or performance range.
  @ffi.Int()
  external int iDiscretePerformanceLevels;

  /// Reserved for future use.
  @ffi.Int()
  external int iReserved;

  /// Engine clock range.
  external ADLODParameterRange sEngineClock;

  /// Memory clock range.
  external ADLODParameterRange sMemoryClock;

  /// Core voltage range.
  external ADLODParameterRange sVddc;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive 6 fan speed information
///
/// This structure is used to store information about Overdrive 6 fan speed information
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6FanSpeedInfo extends ffi.Struct {
  /// Contains a bitmap of the valid fan speed type flags.  Possible values: \ref ADL_OD6_FANSPEED_TYPE_PERCENT, \ref ADL_OD6_FANSPEED_TYPE_RPM, \ref ADL_OD6_FANSPEED_USER_DEFINED
  @ffi.Int()
  external int iSpeedType;

  /// Contains current fan speed in percent (if valid flag exists in iSpeedType)
  @ffi.Int()
  external int iFanSpeedPercent;

  /// Contains current fan speed in RPM (if valid flag exists in iSpeedType)
  @ffi.Int()
  external int iFanSpeedRPM;

  /// Value for future extension
  @ffi.Int()
  external int iExtValue;

  /// Mask for future extension
  @ffi.Int()
  external int iExtMask;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive 6 fan speed value
///
/// This structure is used to store information about Overdrive 6 fan speed value
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6FanSpeedValue extends ffi.Struct {
  /// Indicates the units of the fan speed.  Possible values: \ref ADL_OD6_FANSPEED_TYPE_PERCENT, \ref ADL_OD6_FANSPEED_TYPE_RPM
  @ffi.Int()
  external int iSpeedType;

  /// Fan speed value (units as indicated above)
  @ffi.Int()
  external int iFanSpeed;

  /// Value for future extension
  @ffi.Int()
  external int iExtValue;

  /// Mask for future extension
  @ffi.Int()
  external int iExtMask;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about current Overdrive 6 performance status.
///
/// This structure is used to store information about current Overdrive 6 performance status.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6CurrentStatus extends ffi.Struct {
  /// Current engine clock in 10 KHz.
  @ffi.Int()
  external int iEngineClock;

  /// Current memory clock in 10 KHz.
  @ffi.Int()
  external int iMemoryClock;

  /// Current GPU activity in percent.  This
  /// indicates how "busy" the GPU is.
  @ffi.Int()
  external int iActivityPercent;

  /// Not used.  Reserved for future use.
  @ffi.Int()
  external int iCurrentPerformanceLevel;

  /// Current PCI-E bus speed
  @ffi.Int()
  external int iCurrentBusSpeed;

  /// Current PCI-E bus # of lanes
  @ffi.Int()
  external int iCurrentBusLanes;

  /// Maximum possible PCI-E bus # of lanes
  @ffi.Int()
  external int iMaximumBusLanes;

  /// Value for future extension
  @ffi.Int()
  external int iExtValue;

  /// Mask for future extension
  @ffi.Int()
  external int iExtMask;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive 6 clock range
///
/// This structure is used to store information about Overdrive 6 clock range
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6ParameterRange extends ffi.Struct {
  /// The starting value of the clock range
  @ffi.Int()
  external int iMin;

  /// The ending value of the clock range
  @ffi.Int()
  external int iMax;

  /// The minimum increment between clock values
  @ffi.Int()
  external int iStep;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive 6 capabilities
///
/// This structure is used to store information about Overdrive 6 capabilities
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6Capabilities extends ffi.Struct {
  /// Contains a bitmap of the OD6 capability flags.  Possible values: \ref ADL_OD6_CAPABILITY_SCLK_CUSTOMIZATION,
  /// \ref ADL_OD6_CAPABILITY_MCLK_CUSTOMIZATION, \ref ADL_OD6_CAPABILITY_GPU_ACTIVITY_MONITOR
  @ffi.Int()
  external int iCapabilities;

  /// Contains a bitmap indicating the power states
  /// supported by OD6.  Currently only the performance state
  /// is supported. Possible Values: \ref ADL_OD6_SUPPORTEDSTATE_PERFORMANCE
  @ffi.Int()
  external int iSupportedStates;

  /// Number of levels. OD6 will always use 2 levels, which describe
  /// the minimum to maximum clock ranges.
  /// The 1st level indicates the minimum clocks, and the 2nd level
  /// indicates the maximum clocks.
  @ffi.Int()
  external int iNumberOfPerformanceLevels;

  /// Contains the hard limits of the sclk range.  Overdrive
  /// clocks cannot be set outside this range.
  external ADLOD6ParameterRange sEngineClockRange;

  /// Contains the hard limits of the mclk range.  Overdrive
  /// clocks cannot be set outside this range.
  external ADLOD6ParameterRange sMemoryClockRange;

  /// Value for future extension
  @ffi.Int()
  external int iExtValue;

  /// Mask for future extension
  @ffi.Int()
  external int iExtMask;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive level.
///
/// This structure is used to store information about Overdrive level.
/// This structure is used by ADLODPerformanceLevels.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLODPerformanceLevel extends ffi.Struct {
  /// Engine clock.
  @ffi.Int()
  external int iEngineClock;

  /// Memory clock.
  @ffi.Int()
  external int iMemoryClock;

  /// Core voltage.
  @ffi.Int()
  external int iVddc;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive 6 clock values.
///
/// This structure is used to store information about Overdrive 6 clock values.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6PerformanceLevel extends ffi.Struct {
  /// Engine (core) clock.
  @ffi.Int()
  external int iEngineClock;

  /// Memory clock.
  @ffi.Int()
  external int iMemoryClock;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive 6 clocks.
///
/// This structure is used to store information about Overdrive 6 clocks.  This is a
/// variable-sized structure.  iNumberOfPerformanceLevels indicate how many elements
/// are contained in the aLevels array.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLOD6StateInfo extends ffi.Struct {
  /// Number of levels.  OD6 uses clock ranges instead of discrete performance levels.
  /// iNumberOfPerformanceLevels is always 2.  The 1st level indicates the minimum clocks
  /// in the range.  The 2nd level indicates the maximum clocks in the range.
  @ffi.Int()
  external int iNumberOfPerformanceLevels;

  /// Value for future extension
  @ffi.Int()
  external int iExtValue;

  /// Mask for future extension
  @ffi.Int()
  external int iExtMask;

  @ffi.Array.multi([1])
  external ffi.Array<ADLOD6PerformanceLevel> aLevels;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Overdrive performance levels.
///
/// This structure is used to store information about Overdrive performance levels.
/// This structure is used by the ADL_Overdrive5_ODPerformanceLevels_Get() and ADL_Overdrive5_ODPerformanceLevels_Set() functions.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLODPerformanceLevels extends ffi.Struct {
  /// Must be set to sizeof( \ref ADLODPerformanceLevels ) + sizeof( \ref ADLODPerformanceLevel ) * (ADLODParameters.iNumberOfPerformanceLevels - 1)
  @ffi.Int()
  external int iSize;

  @ffi.Int()
  external int iReserved;

  @ffi.Array.multi([1])
  external ffi.Array<ADLODPerformanceLevel> aLevels;
}

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about Performance Metrics data
///
/// This structure is used to store information about Performance Metrics data output
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
class ADLSingleSensorData extends ffi.Struct {
  @ffi.Int()
  external int supported;

  @ffi.Int()
  external int value;
}

class ADLPMLogDataOutput extends ffi.Struct {
  @ffi.Int()
  external int size;

  @ffi.Array.multi([256])
  external ffi.Array<ADLSingleSensorData> sensors;
}

class hm_adl_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external ADL_ADAPTER_ACTIVE_GET ADL_Adapter_Active_Get;

  external ADL_ADAPTER_ADAPTERINFO_GET ADL_Adapter_AdapterInfo_Get;

  external ADL_ADAPTER_NUMBEROFADAPTERS_GET ADL_Adapter_NumberOfAdapters_Get;

  external ADL_MAIN_CONTROL_CREATE ADL_Main_Control_Create;

  external ADL_MAIN_CONTROL_DESTROY ADL_Main_Control_Destroy;

  external ADL_OVERDRIVE5_CURRENTACTIVITY_GET
      ADL_Overdrive5_CurrentActivity_Get;

  external ADL_OVERDRIVE5_FANSPEEDINFO_GET ADL_Overdrive5_FanSpeedInfo_Get;

  external ADL_OVERDRIVE5_FANSPEED_GET ADL_Overdrive5_FanSpeed_Get;

  external ADL_OVERDRIVE5_ODPARAMETERS_GET ADL_Overdrive5_ODParameters_Get;

  external ADL_OVERDRIVE5_ODPERFORMANCELEVELS_GET
      ADL_Overdrive5_ODPerformanceLevels_Get;

  external ADL_OVERDRIVE5_TEMPERATURE_GET ADL_Overdrive5_Temperature_Get;

  external ADL_OVERDRIVE5_THERMALDEVICES_ENUM
      ADL_Overdrive5_ThermalDevices_Enum;

  external ADL_OVERDRIVE6_CAPABILITIES_GET ADL_Overdrive6_Capabilities_Get;

  external ADL_OVERDRIVE6_CURRENTSTATUS_GET ADL_Overdrive6_CurrentStatus_Get;

  external ADL_OVERDRIVE6_FANSPEED_GET ADL_Overdrive6_FanSpeed_Get;

  external ADL_OVERDRIVE6_STATEINFO_GET ADL_Overdrive6_StateInfo_Get;

  external ADL_OVERDRIVE6_TEMPERATURE_GET ADL_Overdrive6_Temperature_Get;

  external ADL_OVERDRIVE_CAPS ADL_Overdrive_Caps;

  external ADL2_OVERDRIVE_CAPS ADL2_Overdrive_Caps;

  external ADL2_NEW_QUERYPMLOGDATA_GET ADL2_New_QueryPMLogData_Get;
}

typedef ADL_ADAPTER_ACTIVE_GET = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>;
typedef ADL_ADAPTER_ADAPTERINFO_GET
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(LPAdapterInfo, ffi.Int)>>;

/// //////////////////////////////////////////////////////////////////////////////////////////
/// \brief Structure containing information about the graphics adapter.
///
/// This structure is used to store various information about the graphics adapter.  This
/// information can be returned to the user. Alternatively, it can be used to access various driver calls to set
/// or fetch various settings upon the user's request.
/// \nosubgrouping
/// /////////////////////////////////////////////////////////////////////////////////////////
typedef LPAdapterInfo = ffi.Pointer<AdapterInfo>;
typedef ADL_ADAPTER_NUMBEROFADAPTERS_GET
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>;
typedef ADL_MAIN_CONTROL_CREATE = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ADL_MAIN_MALLOC_CALLBACK, ffi.Int)>>;
typedef ADL_MAIN_MALLOC_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>;
typedef ADL_MAIN_CONTROL_DESTROY
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef ADL_OVERDRIVE5_CURRENTACTIVITY_GET = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ADLPMActivity>)>>;
typedef ADL_OVERDRIVE5_FANSPEEDINFO_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<ADLFanSpeedInfo>)>>;
typedef ADL_OVERDRIVE5_FANSPEED_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<ADLFanSpeedValue>)>>;
typedef ADL_OVERDRIVE5_ODPARAMETERS_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Pointer<ADLODParameters>)>>;
typedef ADL_OVERDRIVE5_ODPERFORMANCELEVELS_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Int, ffi.Int, ffi.Pointer<ADLODPerformanceLevels>)>>;
typedef ADL_OVERDRIVE5_TEMPERATURE_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<ADLTemperature>)>>;
typedef ADL_OVERDRIVE5_THERMALDEVICES_ENUM = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Int, ffi.Int, ffi.Pointer<ADLThermalControllerInfo>)>>;
typedef ADL_OVERDRIVE6_CAPABILITIES_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Pointer<ADLOD6Capabilities>)>>;
typedef ADL_OVERDRIVE6_CURRENTSTATUS_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Pointer<ADLOD6CurrentStatus>)>>;
typedef ADL_OVERDRIVE6_FANSPEED_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Pointer<ADLOD6FanSpeedInfo>)>>;
typedef ADL_OVERDRIVE6_STATEINFO_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<ADLOD6StateInfo>)>>;
typedef ADL_OVERDRIVE6_TEMPERATURE_GET = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>;
typedef ADL_OVERDRIVE_CAPS = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>)>>;
typedef ADL2_OVERDRIVE_CAPS = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ADL_CONTEXT_HANDLE, ffi.Int, ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>;

/// \brief Handle to ADL client context.
///
/// ADL clients obtain context handle from initial call to \ref ADL2_Main_Control_Create.
/// Clients have to pass the handle to each subsequent ADL call and finally destroy
/// the context with call to \ref ADL2_Main_Control_Destroy
/// \nosubgrouping
typedef ADL_CONTEXT_HANDLE = ffi.Pointer<ffi.Void>;
typedef ADL2_NEW_QUERYPMLOGDATA_GET = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ADL_CONTEXT_HANDLE, ffi.Int, ffi.Pointer<ADLPMLogDataOutput>)>>;

class NvPhysicalGpuHandle__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

abstract class _NvAPI_Status {
  static const int NVAPI_OK = 0;
  static const int NVAPI_ERROR = -1;
  static const int NVAPI_LIBRARY_NOT_FOUND = -2;
  static const int NVAPI_NO_IMPLEMENTATION = -3;
  static const int NVAPI_API_NOT_INITIALIZED = -4;
  static const int NVAPI_INVALID_ARGUMENT = -5;
  static const int NVAPI_NVIDIA_DEVICE_NOT_FOUND = -6;
  static const int NVAPI_END_ENUMERATION = -7;
  static const int NVAPI_INVALID_HANDLE = -8;
  static const int NVAPI_INCOMPATIBLE_STRUCT_VERSION = -9;
  static const int NVAPI_HANDLE_INVALIDATED = -10;
  static const int NVAPI_OPENGL_CONTEXT_NOT_CURRENT = -11;
  static const int NVAPI_INVALID_POINTER = -14;
  static const int NVAPI_NO_GL_EXPERT = -12;
  static const int NVAPI_INSTRUMENTATION_DISABLED = -13;
  static const int NVAPI_NO_GL_NSIGHT = -15;
  static const int NVAPI_EXPECTED_LOGICAL_GPU_HANDLE = -100;
  static const int NVAPI_EXPECTED_PHYSICAL_GPU_HANDLE = -101;
  static const int NVAPI_EXPECTED_DISPLAY_HANDLE = -102;
  static const int NVAPI_INVALID_COMBINATION = -103;
  static const int NVAPI_NOT_SUPPORTED = -104;
  static const int NVAPI_PORTID_NOT_FOUND = -105;
  static const int NVAPI_EXPECTED_UNATTACHED_DISPLAY_HANDLE = -106;
  static const int NVAPI_INVALID_PERF_LEVEL = -107;
  static const int NVAPI_DEVICE_BUSY = -108;
  static const int NVAPI_NV_PERSIST_FILE_NOT_FOUND = -109;
  static const int NVAPI_PERSIST_DATA_NOT_FOUND = -110;
  static const int NVAPI_EXPECTED_TV_DISPLAY = -111;
  static const int NVAPI_EXPECTED_TV_DISPLAY_ON_DCONNECTOR = -112;
  static const int NVAPI_NO_ACTIVE_SLI_TOPOLOGY = -113;
  static const int NVAPI_SLI_RENDERING_MODE_NOTALLOWED = -114;
  static const int NVAPI_EXPECTED_DIGITAL_FLAT_PANEL = -115;
  static const int NVAPI_ARGUMENT_EXCEED_MAX_SIZE = -116;
  static const int NVAPI_DEVICE_SWITCHING_NOT_ALLOWED = -117;
  static const int NVAPI_TESTING_CLOCKS_NOT_SUPPORTED = -118;
  static const int NVAPI_UNKNOWN_UNDERSCAN_CONFIG = -119;
  static const int NVAPI_TIMEOUT_RECONFIGURING_GPU_TOPO = -120;
  static const int NVAPI_DATA_NOT_FOUND = -121;
  static const int NVAPI_EXPECTED_ANALOG_DISPLAY = -122;
  static const int NVAPI_NO_VIDLINK = -123;
  static const int NVAPI_REQUIRES_REBOOT = -124;
  static const int NVAPI_INVALID_HYBRID_MODE = -125;
  static const int NVAPI_MIXED_TARGET_TYPES = -126;
  static const int NVAPI_SYSWOW64_NOT_SUPPORTED = -127;
  static const int NVAPI_IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED = -128;
  static const int NVAPI_REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS = -129;
  static const int NVAPI_OUT_OF_MEMORY = -130;
  static const int NVAPI_WAS_STILL_DRAWING = -131;
  static const int NVAPI_FILE_NOT_FOUND = -132;
  static const int NVAPI_TOO_MANY_UNIQUE_STATE_OBJECTS = -133;
  static const int NVAPI_INVALID_CALL = -134;
  static const int NVAPI_D3D10_1_LIBRARY_NOT_FOUND = -135;
  static const int NVAPI_FUNCTION_NOT_FOUND = -136;
  static const int NVAPI_INVALID_USER_PRIVILEGE = -137;
  static const int NVAPI_EXPECTED_NON_PRIMARY_DISPLAY_HANDLE = -138;
  static const int NVAPI_EXPECTED_COMPUTE_GPU_HANDLE = -139;
  static const int NVAPI_STEREO_NOT_INITIALIZED = -140;
  static const int NVAPI_STEREO_REGISTRY_ACCESS_FAILED = -141;
  static const int NVAPI_STEREO_REGISTRY_PROFILE_TYPE_NOT_SUPPORTED = -142;
  static const int NVAPI_STEREO_REGISTRY_VALUE_NOT_SUPPORTED = -143;
  static const int NVAPI_STEREO_NOT_ENABLED = -144;
  static const int NVAPI_STEREO_NOT_TURNED_ON = -145;
  static const int NVAPI_STEREO_INVALID_DEVICE_INTERFACE = -146;
  static const int NVAPI_STEREO_PARAMETER_OUT_OF_RANGE = -147;
  static const int NVAPI_STEREO_FRUSTUM_ADJUST_MODE_NOT_SUPPORTED = -148;
  static const int NVAPI_TOPO_NOT_POSSIBLE = -149;
  static const int NVAPI_MODE_CHANGE_FAILED = -150;
  static const int NVAPI_D3D11_LIBRARY_NOT_FOUND = -151;
  static const int NVAPI_INVALID_ADDRESS = -152;
  static const int NVAPI_STRING_TOO_SMALL = -153;
  static const int NVAPI_MATCHING_DEVICE_NOT_FOUND = -154;
  static const int NVAPI_DRIVER_RUNNING = -155;
  static const int NVAPI_DRIVER_NOTRUNNING = -156;
  static const int NVAPI_ERROR_DRIVER_RELOAD_REQUIRED = -157;
  static const int NVAPI_SET_NOT_ALLOWED = -158;
  static const int NVAPI_ADVANCED_DISPLAY_TOPOLOGY_REQUIRED = -159;
  static const int NVAPI_SETTING_NOT_FOUND = -160;
  static const int NVAPI_SETTING_SIZE_TOO_LARGE = -161;
  static const int NVAPI_TOO_MANY_SETTINGS_IN_PROFILE = -162;
  static const int NVAPI_PROFILE_NOT_FOUND = -163;
  static const int NVAPI_PROFILE_NAME_IN_USE = -164;
  static const int NVAPI_PROFILE_NAME_EMPTY = -165;
  static const int NVAPI_EXECUTABLE_NOT_FOUND = -166;
  static const int NVAPI_EXECUTABLE_ALREADY_IN_USE = -167;
  static const int NVAPI_DATATYPE_MISMATCH = -168;
  static const int NVAPI_PROFILE_REMOVED = -169;
  static const int NVAPI_UNREGISTERED_RESOURCE = -170;
  static const int NVAPI_ID_OUT_OF_RANGE = -171;
  static const int NVAPI_DISPLAYCONFIG_VALIDATION_FAILED = -172;
  static const int NVAPI_DPMST_CHANGED = -173;
  static const int NVAPI_INSUFFICIENT_BUFFER = -174;
  static const int NVAPI_ACCESS_DENIED = -175;
  static const int NVAPI_MOSAIC_NOT_ACTIVE = -176;
  static const int NVAPI_SHARE_RESOURCE_RELOCATED = -177;
  static const int NVAPI_REQUEST_USER_TO_DISABLE_DWM = -178;
  static const int NVAPI_D3D_DEVICE_LOST = -179;
  static const int NVAPI_INVALID_CONFIGURATION = -180;
  static const int NVAPI_STEREO_HANDSHAKE_NOT_DONE = -181;
  static const int NVAPI_EXECUTABLE_PATH_IS_AMBIGUOUS = -182;
  static const int NVAPI_DEFAULT_STEREO_PROFILE_IS_NOT_DEFINED = -183;
  static const int NVAPI_DEFAULT_STEREO_PROFILE_DOES_NOT_EXIST = -184;
  static const int NVAPI_CLUSTER_ALREADY_EXISTS = -185;
  static const int NVAPI_DPMST_DISPLAY_ID_EXPECTED = -186;
  static const int NVAPI_INVALID_DISPLAY_ID = -187;
  static const int NVAPI_STREAM_IS_OUT_OF_SYNC = -188;
  static const int NVAPI_INCOMPATIBLE_AUDIO_DRIVER = -189;
  static const int NVAPI_VALUE_ALREADY_SET = -190;
  static const int NVAPI_TIMEOUT = -191;
  static const int NVAPI_GPU_WORKSTATION_FEATURE_INCOMPLETE = -192;
  static const int NVAPI_STEREO_INIT_ACTIVATION_NOT_DONE = -193;
  static const int NVAPI_SYNC_NOT_ACTIVE = -194;
  static const int NVAPI_SYNC_MASTER_NOT_FOUND = -195;
  static const int NVAPI_INVALID_SYNC_TOPOLOGY = -196;
  static const int NVAPI_ECID_SIGN_ALGO_UNSUPPORTED = -197;
  static const int NVAPI_ECID_KEY_VERIFICATION_FAILED = -198;
  static const int NVAPI_FIRMWARE_OUT_OF_DATE = -199;
  static const int NVAPI_FIRMWARE_REVISION_NOT_SUPPORTED = -200;
}

class struct_NV_GPU_PERF_POLICIES_INFO_PARAMS_V1 extends ffi.Struct {
  @NvU32()
  external int version;

  @NvU32()
  external int a;

  @NvU32()
  external int info_value;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.UnsignedChar> x;
}

typedef NvU32 = ffi.UnsignedInt;

class struct_NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1 extends ffi.Struct {
  @NvU32()
  external int version;

  @NvU32()
  external int info_value;

  @NvU32()
  external int a;

  @NvU32()
  external int b;

  @NvU32()
  external int throttle;

  @ffi.Array.multi([1340])
  external ffi.Array<ffi.UnsignedChar> x;
}

class struct_NvLevel extends ffi.Struct {
  @NvS32()
  external int Level;

  @NvS32()
  external int Policy;
}

typedef NvS32 = ffi.Int;
typedef NvPhysicalGpuHandle = ffi.Pointer<NvPhysicalGpuHandle__>;
typedef NV_GPU_PERF_POLICIES_INFO_PARAMS_V1
    = struct_NV_GPU_PERF_POLICIES_INFO_PARAMS_V1;
typedef NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1
    = struct_NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1;

class hm_nvapi_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external NVAPI_QUERYINTERFACE nvapi_QueryInterface;

  external NVAPI_INITIALIZE NvAPI_Initialize;

  external NVAPI_UNLOAD NvAPI_Unload;

  external NVAPI_GETERRORMESSAGE NvAPI_GetErrorMessage;

  external NVAPI_ENUMPHYSICALGPUS NvAPI_EnumPhysicalGPUs;

  external NVAPI_GPU_GETPERFPOLICIESINFO NvAPI_GPU_GetPerfPoliciesInfo;

  external NVAPI_GPU_GETPERFPOLICIESSTATUS NvAPI_GPU_GetPerfPoliciesStatus;

  external NVAPI_GPU_GETBUSID NvAPI_GPU_GetBusId;

  external NVAPI_GPU_GETBUSSLOTID NvAPI_GPU_GetBusSlotId;
}

typedef NVAPI_QUERYINTERFACE = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.UnsignedInt)>>;
typedef NVAPI_INITIALIZE = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef NVAPI_UNLOAD = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef NVAPI_GETERRORMESSAGE = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Int32, ffi.Pointer<ffi.Char>)>>;
typedef NVAPI_ENUMPHYSICALGPUS = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<NvPhysicalGpuHandle>, ffi.Pointer<NvU32>)>>;
typedef NVAPI_GPU_GETPERFPOLICIESINFO = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(NvPhysicalGpuHandle,
            ffi.Pointer<NV_GPU_PERF_POLICIES_INFO_PARAMS_V1>)>>;
typedef NVAPI_GPU_GETPERFPOLICIESSTATUS = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(NvPhysicalGpuHandle,
            ffi.Pointer<NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1>)>>;
typedef NVAPI_GPU_GETBUSID = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(NvPhysicalGpuHandle, ffi.Pointer<NvU32>)>>;
typedef NVAPI_GPU_GETBUSSLOTID = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(NvPhysicalGpuHandle, ffi.Pointer<NvU32>)>>;
typedef NVAPI_PTR = hm_nvapi_lib_t;
typedef hm_nvapi_lib_t = hm_nvapi_lib;

class nvmlDevice_st extends ffi.Opaque {}

class nvmlPciInfo_st extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> busId;

  /// !< The PCI domain on which the device's bus resides, 0 to 0xffff
  @ffi.UnsignedInt()
  external int domain;

  /// !< The bus on which the device resides, 0 to 0xff
  @ffi.UnsignedInt()
  external int bus;

  /// !< The device's id on the bus, 0 to 31
  @ffi.UnsignedInt()
  external int device;

  /// !< The combined 16-bit device id and 16-bit vendor id
  @ffi.UnsignedInt()
  external int pciDeviceId;

  /// !< The 32-bit Sub System Device ID
  @ffi.UnsignedInt()
  external int pciSubSystemId;

  @ffi.UnsignedInt()
  external int reserved0;

  @ffi.UnsignedInt()
  external int reserved1;

  @ffi.UnsignedInt()
  external int reserved2;

  @ffi.UnsignedInt()
  external int reserved3;
}

class nvmlUtilization_st extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gpu;

  @ffi.UnsignedInt()
  external int memory;
}

abstract class nvmlTemperatureSensors_enum {
  static const int NVML_TEMPERATURE_GPU = 0;
}

abstract class nvmlReturn_enum {
  static const int NVML_SUCCESS = 0;
  static const int NVML_ERROR_UNINITIALIZED = 1;
  static const int NVML_ERROR_INVALID_ARGUMENT = 2;
  static const int NVML_ERROR_NOT_SUPPORTED = 3;
  static const int NVML_ERROR_NO_PERMISSION = 4;
  static const int NVML_ERROR_ALREADY_INITIALIZED = 5;
  static const int NVML_ERROR_NOT_FOUND = 6;
  static const int NVML_ERROR_INSUFFICIENT_SIZE = 7;
  static const int NVML_ERROR_INSUFFICIENT_POWER = 8;
  static const int NVML_ERROR_DRIVER_NOT_LOADED = 9;
  static const int NVML_ERROR_TIMEOUT = 10;
  static const int NVML_ERROR_UNKNOWN = 999;
}

abstract class nvmlClockType_enum {
  static const int NVML_CLOCK_GRAPHICS = 0;
  static const int NVML_CLOCK_SM = 1;
  static const int NVML_CLOCK_MEM = 2;
}

abstract class nvmlTemperatureThresholds_enum {
  static const int NVML_TEMPERATURE_THRESHOLD_SHUTDOWN = 0;
  static const int NVML_TEMPERATURE_THRESHOLD_SLOWDOWN = 1;
  static const int NVML_TEMPERATURE_THRESHOLD_COUNT = 2;
}

/// Compute mode.
///
/// NVML_COMPUTEMODE_EXCLUSIVE_PROCESS was added in CUDA 4.0.
/// Earlier CUDA versions supported a single exclusive mode,
/// which is equivalent to NVML_COMPUTEMODE_EXCLUSIVE_THREAD in CUDA 4.0 and beyond.
abstract class nvmlComputeMode_enum {
  /// !< Default compute mode -- multiple contexts per device
  static const int NVML_COMPUTEMODE_DEFAULT = 0;

  /// !< Compute-exclusive-thread mode -- only one context per device, usable from one thread at a time
  static const int NVML_COMPUTEMODE_EXCLUSIVE_THREAD = 1;

  /// !< Compute-prohibited mode -- no contexts per device
  static const int NVML_COMPUTEMODE_PROHIBITED = 2;

  /// !< Compute-exclusive-process mode -- only one context per device, usable from multiple threads at a time
  static const int NVML_COMPUTEMODE_EXCLUSIVE_PROCESS = 3;
  static const int NVML_COMPUTEMODE_COUNT = 4;
}

/// GPU Operation Mode
///
/// GOM allows to reduce power usage and optimize GPU throughput by disabling GPU features.
///
/// Each GOM is designed to meet specific user needs.
abstract class nvmlGom_enum {
  /// !< Everything is enabled and running at full speed
  static const int NVML_GOM_ALL_ON = 0;

  /// !< Designed for running only compute tasks. Graphics operations
  /// !< are not allowed
  static const int NVML_GOM_COMPUTE = 1;

  /// !< Designed for running graphics applications that don't require
  /// !< high bandwidth double precision
  static const int NVML_GOM_LOW_DP = 2;
}

class hm_nvml_lib extends ffi.Struct {
  external hc_dynlib_t lib;

  external NVML_ERROR_STRING nvmlErrorString;

  external NVML_INIT nvmlInit;

  external NVML_SHUTDOWN nvmlShutdown;

  external NVML_DEVICE_GET_COUNT nvmlDeviceGetCount;

  external NVML_DEVICE_GET_NAME nvmlDeviceGetName;

  external NVML_DEVICE_GET_HANDLE_BY_INDEX nvmlDeviceGetHandleByIndex;

  external NVML_DEVICE_GET_TEMPERATURE nvmlDeviceGetTemperature;

  external NVML_DEVICE_GET_FAN_SPEED nvmlDeviceGetFanSpeed;

  external NVML_DEVICE_GET_UTILIZATION_RATES nvmlDeviceGetUtilizationRates;

  external NVML_DEVICE_GET_CLOCKINFO nvmlDeviceGetClockInfo;

  external NVML_DEVICE_GET_THRESHOLD nvmlDeviceGetTemperatureThreshold;

  external NVML_DEVICE_GET_CURRPCIELINKGENERATION
      nvmlDeviceGetCurrPcieLinkGeneration;

  external NVML_DEVICE_GET_CURRPCIELINKWIDTH nvmlDeviceGetCurrPcieLinkWidth;

  external NVML_DEVICE_GET_CURRENTCLOCKSTHROTTLEREASONS
      nvmlDeviceGetCurrentClocksThrottleReasons;

  external NVML_DEVICE_GET_SUPPORTEDCLOCKSTHROTTLEREASONS
      nvmlDeviceGetSupportedClocksThrottleReasons;

  external NVML_DEVICE_GET_PCIINFO nvmlDeviceGetPciInfo;
}

typedef NVML_ERROR_STRING = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>;
typedef NVML_INIT = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef NVML_SHUTDOWN = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef NVML_DEVICE_GET_COUNT = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_NAME = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            nvmlDevice_t, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>;

/// Declarations from nvml.h
typedef nvmlDevice_t = ffi.Pointer<nvmlDevice_st>;
typedef NVML_DEVICE_GET_HANDLE_BY_INDEX = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.UnsignedInt, ffi.Pointer<nvmlDevice_t>)>>;
typedef NVML_DEVICE_GET_TEMPERATURE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            nvmlDevice_t, ffi.Int32, ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_FAN_SPEED = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_UTILIZATION_RATES = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<nvmlUtilization_t>)>>;
typedef nvmlUtilization_t = nvmlUtilization_st;
typedef NVML_DEVICE_GET_CLOCKINFO = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            nvmlDevice_t, ffi.Int32, ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_THRESHOLD = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            nvmlDevice_t, ffi.Int32, ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_CURRPCIELINKGENERATION = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_CURRPCIELINKWIDTH = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<ffi.UnsignedInt>)>>;
typedef NVML_DEVICE_GET_CURRENTCLOCKSTHROTTLEREASONS = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<ffi.UnsignedLongLong>)>>;
typedef NVML_DEVICE_GET_SUPPORTEDCLOCKSTHROTTLEREASONS = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<ffi.UnsignedLongLong>)>>;
typedef NVML_DEVICE_GET_PCIINFO = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(nvmlDevice_t, ffi.Pointer<nvmlPciInfo_t>)>>;
typedef nvmlPciInfo_t = nvmlPciInfo_st;
typedef NVML_PTR = hm_nvml_lib_t;
typedef hm_nvml_lib_t = hm_nvml_lib;

class hm_sysfs_amdgpu_lib extends ffi.Struct {
  external SYSFS_AMDGPU_LIB lib;
}

typedef SYSFS_AMDGPU_LIB = ffi.Pointer<ffi.Void>;

class hm_sysfs_cpu_lib extends ffi.Struct {
  external SYSFS_CPU_LIB lib;
}

typedef SYSFS_CPU_LIB = ffi.Pointer<ffi.Void>;

class proc_stat_t extends ffi.Struct {
  @ffi.UnsignedLong()
  external int user;

  @ffi.UnsignedLong()
  external int nice;

  @ffi.UnsignedLong()
  external int system;

  @ffi.UnsignedLong()
  external int idle;

  @ffi.UnsignedLong()
  external int iowait;

  @ffi.UnsignedLong()
  external int irq;

  @ffi.UnsignedLong()
  external int softirq;

  @ffi.UnsignedLong()
  external int steal;

  @ffi.UnsignedLong()
  external int guest;

  @ffi.UnsignedLong()
  external int guest_nice;
}

class vm_statistics extends ffi.Struct {
  @natural_t()
  external int free_count;

  @natural_t()
  external int active_count;

  @natural_t()
  external int inactive_count;

  @natural_t()
  external int wire_count;

  @natural_t()
  external int zero_fill_count;

  @natural_t()
  external int reactivations;

  @natural_t()
  external int pageins;

  @natural_t()
  external int pageouts;

  @natural_t()
  external int faults;

  @natural_t()
  external int cow_faults;

  @natural_t()
  external int lookups;

  @natural_t()
  external int hits;

  @natural_t()
  external int purgeable_count;

  @natural_t()
  external int purges;

  @natural_t()
  external int speculative_count;
}

class vm_statistics64 extends ffi.Struct {
  @natural_t()
  external int free_count;

  @natural_t()
  external int active_count;

  @natural_t()
  external int inactive_count;

  @natural_t()
  external int wire_count;

  @ffi.Uint64()
  external int zero_fill_count;

  @ffi.Uint64()
  external int reactivations;

  @ffi.Uint64()
  external int pageins;

  @ffi.Uint64()
  external int pageouts;

  @ffi.Uint64()
  external int faults;

  @ffi.Uint64()
  external int cow_faults;

  @ffi.Uint64()
  external int lookups;

  @ffi.Uint64()
  external int hits;

  @ffi.Uint64()
  external int purges;

  @natural_t()
  external int purgeable_count;

  @natural_t()
  external int speculative_count;

  @ffi.Uint64()
  external int decompressions;

  @ffi.Uint64()
  external int compressions;

  @ffi.Uint64()
  external int swapins;

  @ffi.Uint64()
  external int swapouts;

  @natural_t()
  external int compressor_page_count;

  @natural_t()
  external int throttled_count;

  @natural_t()
  external int external_page_count;

  @natural_t()
  external int internal_page_count;

  @ffi.Uint64()
  external int total_uncompressed_pages_in_compressor;
}

class vm_extmod_statistics extends ffi.Struct {
  @ffi.Int64()
  external int task_for_pid_count;

  @ffi.Int64()
  external int task_for_pid_caller_count;

  @ffi.Int64()
  external int thread_creation_count;

  @ffi.Int64()
  external int thread_creation_caller_count;

  @ffi.Int64()
  external int thread_set_state_count;

  @ffi.Int64()
  external int thread_set_state_caller_count;
}

class vm_purgeable_stat extends ffi.Struct {
  @ffi.Uint64()
  external int count;

  @ffi.Uint64()
  external int size;
}

class vm_purgeable_info extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<vm_purgeable_stat_t> fifo_data;

  external vm_purgeable_stat_t obsolete_data;

  @ffi.Array.multi([8])
  external ffi.Array<vm_purgeable_stat_t> lifo_data;
}

typedef vm_purgeable_stat_t = vm_purgeable_stat;

abstract class virtual_memory_guard_exception_codes {
  static const int kGUARD_EXC_DEALLOC_GAP = 1;
}

class host_can_has_debugger_info extends ffi.Struct {
  @boolean_t()
  external int can_has_debugger;
}

@ffi.Packed(4)
class host_basic_info extends ffi.Struct {
  @integer_t()
  external int max_cpus;

  @integer_t()
  external int avail_cpus;

  @natural_t()
  external int memory_size;

  @cpu_type_t()
  external int cpu_type;

  @cpu_subtype_t()
  external int cpu_subtype;

  @cpu_threadtype_t()
  external int cpu_threadtype;

  @integer_t()
  external int physical_cpu;

  @integer_t()
  external int physical_cpu_max;

  @integer_t()
  external int logical_cpu;

  @integer_t()
  external int logical_cpu_max;

  @ffi.Uint64()
  external int max_mem;
}

typedef cpu_subtype_t = integer_t;
typedef cpu_threadtype_t = integer_t;

class host_sched_info extends ffi.Struct {
  @integer_t()
  external int min_timeout;

  @integer_t()
  external int min_quantum;
}

class kernel_resource_sizes extends ffi.Struct {
  @natural_t()
  external int task;

  @natural_t()
  external int thread;

  @natural_t()
  external int port;

  @natural_t()
  external int memory_region;

  @natural_t()
  external int memory_object;
}

class host_priority_info extends ffi.Struct {
  @integer_t()
  external int kernel_priority;

  @integer_t()
  external int system_priority;

  @integer_t()
  external int server_priority;

  @integer_t()
  external int user_priority;

  @integer_t()
  external int depress_priority;

  @integer_t()
  external int idle_priority;

  @integer_t()
  external int minimum_priority;

  @integer_t()
  external int maximum_priority;
}

class host_load_info extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<integer_t> avenrun;

  @ffi.Array.multi([3])
  external ffi.Array<integer_t> mach_factor;
}

class host_cpu_load_info extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<natural_t> cpu_ticks;
}

class host_preferred_user_arch extends ffi.Struct {
  @cpu_type_t()
  external int cpu_type;

  @cpu_subtype_t()
  external int cpu_subtype;
}

class memory_object_perf_info extends ffi.Struct {
  @memory_object_cluster_size_t()
  external int cluster_size;

  @boolean_t()
  external int may_cache;
}

typedef memory_object_cluster_size_t = natural_t;

class memory_object_attr_info extends ffi.Struct {
  @memory_object_copy_strategy_t()
  external int copy_strategy;

  @memory_object_cluster_size_t()
  external int cluster_size;

  @boolean_t()
  external int may_cache_object;

  @boolean_t()
  external int temporary;
}

typedef memory_object_copy_strategy_t = ffi.Int;

class memory_object_behave_info extends ffi.Struct {
  @memory_object_copy_strategy_t()
  external int copy_strategy;

  @boolean_t()
  external int temporary;

  @boolean_t()
  external int invalidate;

  @boolean_t()
  external int silent_overwrite;

  @boolean_t()
  external int advisory_pageout;
}

class arm_state_hdr extends ffi.Struct {
  @ffi.Uint32()
  external int flavor;

  @ffi.Uint32()
  external int count;
}

class arm_unified_thread_state extends ffi.Struct {
  external arm_state_hdr_t ash;

  external UnnamedUnion1 uts;
}

typedef arm_state_hdr_t = arm_state_hdr;

class UnnamedUnion1 extends ffi.Union {
  external arm_thread_state32_t ts_32;

  external arm_thread_state64_t ts_64;
}

typedef arm_thread_state32_t = __darwin_arm_thread_state;
typedef arm_thread_state64_t = __darwin_arm_thread_state64;

class ipc_info_space extends ffi.Struct {
  @natural_t()
  external int iis_genno_mask;

  @natural_t()
  external int iis_table_size;

  @natural_t()
  external int iis_table_next;

  @natural_t()
  external int iis_tree_size;

  @natural_t()
  external int iis_tree_small;

  @natural_t()
  external int iis_tree_hash;
}

class ipc_info_space_basic extends ffi.Struct {
  @natural_t()
  external int iisb_genno_mask;

  @natural_t()
  external int iisb_table_size;

  @natural_t()
  external int iisb_table_next;

  @natural_t()
  external int iisb_table_inuse;

  @ffi.Array.multi([2])
  external ffi.Array<natural_t> iisb_reserved;
}

class ipc_info_name extends ffi.Struct {
  @mach_port_name_t()
  external int iin_name;

  @integer_t()
  external int iin_collision;

  @mach_port_type_t()
  external int iin_type;

  @mach_port_urefs_t()
  external int iin_urefs;

  @natural_t()
  external int iin_object;

  @natural_t()
  external int iin_next;

  @natural_t()
  external int iin_hash;
}

typedef mach_port_type_t = natural_t;
typedef mach_port_urefs_t = natural_t;

class ipc_info_tree_name extends ffi.Struct {
  external ipc_info_name_t iitn_name;

  @mach_port_name_t()
  external int iitn_lchild;

  @mach_port_name_t()
  external int iitn_rchild;
}

typedef ipc_info_name_t = ipc_info_name;

class ipc_info_port extends ffi.Struct {
  @natural_t()
  external int iip_port_object;

  @natural_t()
  external int iip_receiver_object;
}

class mach_voucher_attr_recipe_data extends ffi.Opaque {}

class processor_cpu_stat extends ffi.Struct {
  @ffi.Uint32()
  external int irq_ex_cnt;

  @ffi.Uint32()
  external int ipi_cnt;

  @ffi.Uint32()
  external int timer_cnt;

  @ffi.Uint32()
  external int undef_ex_cnt;

  @ffi.Uint32()
  external int unaligned_cnt;

  @ffi.Uint32()
  external int vfp_cnt;

  @ffi.Uint32()
  external int vfp_shortv_cnt;

  @ffi.Uint32()
  external int data_ex_cnt;

  @ffi.Uint32()
  external int instr_ex_cnt;
}

@ffi.Packed(4)
class processor_cpu_stat64 extends ffi.Struct {
  @ffi.Uint64()
  external int irq_ex_cnt;

  @ffi.Uint64()
  external int ipi_cnt;

  @ffi.Uint64()
  external int timer_cnt;

  @ffi.Uint64()
  external int undef_ex_cnt;

  @ffi.Uint64()
  external int unaligned_cnt;

  @ffi.Uint64()
  external int vfp_cnt;

  @ffi.Uint64()
  external int vfp_shortv_cnt;

  @ffi.Uint64()
  external int data_ex_cnt;

  @ffi.Uint64()
  external int instr_ex_cnt;

  @ffi.Uint64()
  external int pmi_cnt;
}

class processor_basic_info extends ffi.Struct {
  @cpu_type_t()
  external int cpu_type;

  @cpu_subtype_t()
  external int cpu_subtype;

  @boolean_t()
  external int running;

  @ffi.Int()
  external int slot_num;

  @boolean_t()
  external int is_master;
}

class processor_cpu_load_info extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> cpu_ticks;
}

class processor_set_basic_info extends ffi.Struct {
  @ffi.Int()
  external int processor_count;

  @ffi.Int()
  external int default_policy;
}

class processor_set_load_info extends ffi.Struct {
  @ffi.Int()
  external int task_count;

  @ffi.Int()
  external int thread_count;

  @integer_t()
  external int load_average;

  @integer_t()
  external int mach_factor;
}

class policy_timeshare_base extends ffi.Struct {
  @integer_t()
  external int base_priority;
}

class policy_timeshare_limit extends ffi.Struct {
  @integer_t()
  external int max_priority;
}

class policy_timeshare_info extends ffi.Struct {
  @integer_t()
  external int max_priority;

  @integer_t()
  external int base_priority;

  @integer_t()
  external int cur_priority;

  @boolean_t()
  external int depressed;

  @integer_t()
  external int depress_priority;
}

class policy_rr_base extends ffi.Struct {
  @integer_t()
  external int base_priority;

  @integer_t()
  external int quantum;
}

class policy_rr_limit extends ffi.Struct {
  @integer_t()
  external int max_priority;
}

class policy_rr_info extends ffi.Struct {
  @integer_t()
  external int max_priority;

  @integer_t()
  external int base_priority;

  @integer_t()
  external int quantum;

  @boolean_t()
  external int depressed;

  @integer_t()
  external int depress_priority;
}

class policy_fifo_base extends ffi.Struct {
  @integer_t()
  external int base_priority;
}

class policy_fifo_limit extends ffi.Struct {
  @integer_t()
  external int max_priority;
}

class policy_fifo_info extends ffi.Struct {
  @integer_t()
  external int max_priority;

  @integer_t()
  external int base_priority;

  @boolean_t()
  external int depressed;

  @integer_t()
  external int depress_priority;
}

class policy_bases extends ffi.Struct {
  external policy_timeshare_base_data_t ts;

  external policy_rr_base_data_t rr;

  external policy_fifo_base_data_t fifo;
}

typedef policy_timeshare_base_data_t = policy_timeshare_base;
typedef policy_rr_base_data_t = policy_rr_base;
typedef policy_fifo_base_data_t = policy_fifo_base;

class policy_limits extends ffi.Struct {
  external policy_timeshare_limit_data_t ts;

  external policy_rr_limit_data_t rr;

  external policy_fifo_limit_data_t fifo;
}

typedef policy_timeshare_limit_data_t = policy_timeshare_limit;
typedef policy_rr_limit_data_t = policy_rr_limit;
typedef policy_fifo_limit_data_t = policy_fifo_limit;

class policy_infos extends ffi.Struct {
  external policy_timeshare_info_data_t ts;

  external policy_rr_info_data_t rr;

  external policy_fifo_info_data_t fifo;
}

typedef policy_timeshare_info_data_t = policy_timeshare_info;
typedef policy_rr_info_data_t = policy_rr_info;
typedef policy_fifo_info_data_t = policy_fifo_info;

class task_basic_info_32 extends ffi.Struct {
  @integer_t()
  external int suspend_count;

  @natural_t()
  external int virtual_size;

  @natural_t()
  external int resident_size;

  external time_value_t user_time;

  external time_value_t system_time;

  @policy_t()
  external int policy;
}

typedef time_value_t = time_value;
typedef policy_t = ffi.Int;

@ffi.Packed(4)
class task_basic_info_64 extends ffi.Struct {
  @integer_t()
  external int suspend_count;

  @mach_vm_size_t()
  external int virtual_size;

  @mach_vm_size_t()
  external int resident_size;

  external time_value_t user_time;

  external time_value_t system_time;

  @policy_t()
  external int policy;
}

typedef mach_vm_size_t = ffi.Uint64;

@ffi.Packed(4)
class task_basic_info extends ffi.Struct {
  @integer_t()
  external int suspend_count;

  @vm_size_t()
  external int virtual_size;

  @vm_size_t()
  external int resident_size;

  external time_value_t user_time;

  external time_value_t system_time;

  @policy_t()
  external int policy;
}

typedef vm_size_t = uintptr_t;

class task_events_info extends ffi.Struct {
  @integer_t()
  external int faults;

  @integer_t()
  external int pageins;

  @integer_t()
  external int cow_faults;

  @integer_t()
  external int messages_sent;

  @integer_t()
  external int messages_received;

  @integer_t()
  external int syscalls_mach;

  @integer_t()
  external int syscalls_unix;

  @integer_t()
  external int csw;
}

class task_thread_times_info extends ffi.Struct {
  external time_value_t user_time;

  external time_value_t system_time;
}

@ffi.Packed(4)
class task_absolutetime_info extends ffi.Struct {
  @ffi.Uint64()
  external int total_user;

  @ffi.Uint64()
  external int total_system;

  @ffi.Uint64()
  external int threads_user;

  @ffi.Uint64()
  external int threads_system;
}

@ffi.Packed(4)
class task_kernelmemory_info extends ffi.Struct {
  @ffi.Uint64()
  external int total_palloc;

  @ffi.Uint64()
  external int total_pfree;

  @ffi.Uint64()
  external int total_salloc;

  @ffi.Uint64()
  external int total_sfree;
}

class task_affinity_tag_info extends ffi.Struct {
  @integer_t()
  external int set_count;

  @integer_t()
  external int min;

  @integer_t()
  external int max;

  @integer_t()
  external int task_count;
}

@ffi.Packed(4)
class task_dyld_info extends ffi.Struct {
  @mach_vm_address_t()
  external int all_image_info_addr;

  @mach_vm_size_t()
  external int all_image_info_size;

  @integer_t()
  external int all_image_info_format;
}

typedef mach_vm_address_t = ffi.Uint64;

@ffi.Packed(4)
class task_basic_info_64_2 extends ffi.Struct {
  @integer_t()
  external int suspend_count;

  @mach_vm_size_t()
  external int virtual_size;

  @mach_vm_size_t()
  external int resident_size;

  external time_value_t user_time;

  external time_value_t system_time;

  @policy_t()
  external int policy;
}

@ffi.Packed(4)
class task_extmod_info extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> task_uuid;

  external vm_extmod_statistics_data_t extmod_statistics;
}

typedef vm_extmod_statistics_data_t = vm_extmod_statistics;

@ffi.Packed(4)
class mach_task_basic_info extends ffi.Struct {
  @mach_vm_size_t()
  external int virtual_size;

  @mach_vm_size_t()
  external int resident_size;

  @mach_vm_size_t()
  external int resident_size_max;

  external time_value_t user_time;

  external time_value_t system_time;

  @policy_t()
  external int policy;

  @integer_t()
  external int suspend_count;
}

@ffi.Packed(4)
class task_power_info extends ffi.Struct {
  @ffi.Uint64()
  external int total_user;

  @ffi.Uint64()
  external int total_system;

  @ffi.Uint64()
  external int task_interrupt_wakeups;

  @ffi.Uint64()
  external int task_platform_idle_wakeups;

  @ffi.Uint64()
  external int task_timer_wakeups_bin_1;

  @ffi.Uint64()
  external int task_timer_wakeups_bin_2;
}

@ffi.Packed(4)
class task_vm_info extends ffi.Struct {
  @mach_vm_size_t()
  external int virtual_size;

  @integer_t()
  external int region_count;

  @integer_t()
  external int page_size;

  @mach_vm_size_t()
  external int resident_size;

  @mach_vm_size_t()
  external int resident_size_peak;

  @mach_vm_size_t()
  external int device;

  @mach_vm_size_t()
  external int device_peak;

  @mach_vm_size_t()
  external int internal;

  @mach_vm_size_t()
  external int internal_peak;

  @mach_vm_size_t()
  external int external1;

  @mach_vm_size_t()
  external int external_peak;

  @mach_vm_size_t()
  external int reusable;

  @mach_vm_size_t()
  external int reusable_peak;

  @mach_vm_size_t()
  external int purgeable_volatile_pmap;

  @mach_vm_size_t()
  external int purgeable_volatile_resident;

  @mach_vm_size_t()
  external int purgeable_volatile_virtual;

  @mach_vm_size_t()
  external int compressed;

  @mach_vm_size_t()
  external int compressed_peak;

  @mach_vm_size_t()
  external int compressed_lifetime;

  @mach_vm_size_t()
  external int phys_footprint;

  @mach_vm_address_t()
  external int min_address;

  @mach_vm_address_t()
  external int max_address;

  @ffi.Int64()
  external int ledger_phys_footprint_peak;

  @ffi.Int64()
  external int ledger_purgeable_nonvolatile;

  @ffi.Int64()
  external int ledger_purgeable_novolatile_compressed;

  @ffi.Int64()
  external int ledger_purgeable_volatile;

  @ffi.Int64()
  external int ledger_purgeable_volatile_compressed;

  @ffi.Int64()
  external int ledger_tag_network_nonvolatile;

  @ffi.Int64()
  external int ledger_tag_network_nonvolatile_compressed;

  @ffi.Int64()
  external int ledger_tag_network_volatile;

  @ffi.Int64()
  external int ledger_tag_network_volatile_compressed;

  @ffi.Int64()
  external int ledger_tag_media_footprint;

  @ffi.Int64()
  external int ledger_tag_media_footprint_compressed;

  @ffi.Int64()
  external int ledger_tag_media_nofootprint;

  @ffi.Int64()
  external int ledger_tag_media_nofootprint_compressed;

  @ffi.Int64()
  external int ledger_tag_graphics_footprint;

  @ffi.Int64()
  external int ledger_tag_graphics_footprint_compressed;

  @ffi.Int64()
  external int ledger_tag_graphics_nofootprint;

  @ffi.Int64()
  external int ledger_tag_graphics_nofootprint_compressed;

  @ffi.Int64()
  external int ledger_tag_neural_footprint;

  @ffi.Int64()
  external int ledger_tag_neural_footprint_compressed;

  @ffi.Int64()
  external int ledger_tag_neural_nofootprint;

  @ffi.Int64()
  external int ledger_tag_neural_nofootprint_compressed;

  @ffi.Uint64()
  external int limit_bytes_remaining;

  @integer_t()
  external int decompressions;

  @ffi.Int64()
  external int ledger_swapins;
}

@ffi.Packed(4)
class task_trace_memory_info extends ffi.Struct {
  @ffi.Uint64()
  external int user_memory_address;

  @ffi.Uint64()
  external int buffer_size;

  @ffi.Uint64()
  external int mailbox_array_size;
}

@ffi.Packed(4)
class task_wait_state_info extends ffi.Struct {
  @ffi.Uint64()
  external int total_wait_state_time;

  @ffi.Uint64()
  external int total_wait_sfi_state_time;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> _reserved;
}

@ffi.Packed(4)
class gpu_energy_data extends ffi.Struct {
  @ffi.Uint64()
  external int task_gpu_utilisation;

  @ffi.Uint64()
  external int task_gpu_stat_reserved0;

  @ffi.Uint64()
  external int task_gpu_stat_reserved1;

  @ffi.Uint64()
  external int task_gpu_stat_reserved2;
}

@ffi.Packed(4)
class task_power_info_v2 extends ffi.Struct {
  external task_power_info_data_t cpu_energy;

  external gpu_energy_data gpu_energy;

  @ffi.Uint64()
  external int task_energy;

  @ffi.Uint64()
  external int task_ptime;

  @ffi.Uint64()
  external int task_pset_switches;
}

typedef task_power_info_data_t = task_power_info;

class task_flags_info extends ffi.Struct {
  @ffi.Uint32()
  external int flags;
}

abstract class task_inspect_flavor {
  static const int TASK_INSPECT_BASIC_COUNTS = 1;
}

class task_inspect_basic_counts extends ffi.Struct {
  @ffi.Uint64()
  external int instructions;

  @ffi.Uint64()
  external int cycles;
}

abstract class task_role {
  static const int TASK_RENICED = -1;
  static const int TASK_UNSPECIFIED = 0;
  static const int TASK_FOREGROUND_APPLICATION = 1;
  static const int TASK_BACKGROUND_APPLICATION = 2;
  static const int TASK_CONTROL_APPLICATION = 3;
  static const int TASK_GRAPHICS_SERVER = 4;
  static const int TASK_THROTTLE_APPLICATION = 5;
  static const int TASK_NONUI_APPLICATION = 6;
  static const int TASK_DEFAULT_APPLICATION = 7;
  static const int TASK_DARWINBG_APPLICATION = 8;
}

class task_category_policy extends ffi.Struct {
  @ffi.Int32()
  external int role;
}

abstract class task_latency_qos {
  static const int LATENCY_QOS_TIER_UNSPECIFIED = 0;
  static const int LATENCY_QOS_TIER_0 = 16711681;
  static const int LATENCY_QOS_TIER_1 = 16711682;
  static const int LATENCY_QOS_TIER_2 = 16711683;
  static const int LATENCY_QOS_TIER_3 = 16711684;
  static const int LATENCY_QOS_TIER_4 = 16711685;
  static const int LATENCY_QOS_TIER_5 = 16711686;
}

abstract class task_throughput_qos {
  static const int THROUGHPUT_QOS_TIER_UNSPECIFIED = 0;
  static const int THROUGHPUT_QOS_TIER_0 = 16646145;
  static const int THROUGHPUT_QOS_TIER_1 = 16646146;
  static const int THROUGHPUT_QOS_TIER_2 = 16646147;
  static const int THROUGHPUT_QOS_TIER_3 = 16646148;
  static const int THROUGHPUT_QOS_TIER_4 = 16646149;
  static const int THROUGHPUT_QOS_TIER_5 = 16646150;
}

class task_qos_policy extends ffi.Struct {
  @task_latency_qos_t()
  external int task_latency_qos_tier;

  @task_throughput_qos_t()
  external int task_throughput_qos_tier;
}

typedef task_latency_qos_t = integer_t;
typedef task_throughput_qos_t = integer_t;

class thread_basic_info extends ffi.Struct {
  external time_value_t user_time;

  external time_value_t system_time;

  @integer_t()
  external int cpu_usage;

  @policy_t()
  external int policy;

  @integer_t()
  external int run_state;

  @integer_t()
  external int flags;

  @integer_t()
  external int suspend_count;

  @integer_t()
  external int sleep_time;
}

class thread_identifier_info extends ffi.Struct {
  @ffi.Uint64()
  external int thread_id;

  @ffi.Uint64()
  external int thread_handle;

  @ffi.Uint64()
  external int dispatch_qaddr;
}

class thread_extended_info extends ffi.Struct {
  @ffi.Uint64()
  external int pth_user_time;

  @ffi.Uint64()
  external int pth_system_time;

  @ffi.Int32()
  external int pth_cpu_usage;

  @ffi.Int32()
  external int pth_policy;

  @ffi.Int32()
  external int pth_run_state;

  @ffi.Int32()
  external int pth_flags;

  @ffi.Int32()
  external int pth_sleep_time;

  @ffi.Int32()
  external int pth_curpri;

  @ffi.Int32()
  external int pth_priority;

  @ffi.Int32()
  external int pth_maxpriority;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> pth_name;
}

class io_stat_entry extends ffi.Struct {
  @ffi.Uint64()
  external int count;

  @ffi.Uint64()
  external int size;
}

class io_stat_info extends ffi.Struct {
  external io_stat_entry disk_reads;

  @ffi.Array.multi([4])
  external ffi.Array<io_stat_entry> io_priority;

  external io_stat_entry paging;

  external io_stat_entry metadata;

  external io_stat_entry total_io;
}

class thread_standard_policy extends ffi.Struct {
  @natural_t()
  external int no_data;
}

class thread_extended_policy extends ffi.Struct {
  @boolean_t()
  external int timeshare;
}

class thread_time_constraint_policy extends ffi.Struct {
  @ffi.Uint32()
  external int period;

  @ffi.Uint32()
  external int computation;

  @ffi.Uint32()
  external int constraint;

  @boolean_t()
  external int preemptible;
}

class thread_precedence_policy extends ffi.Struct {
  @integer_t()
  external int importance;
}

class thread_affinity_policy extends ffi.Struct {
  @integer_t()
  external int affinity_tag;
}

class thread_background_policy extends ffi.Struct {
  @integer_t()
  external int priority;
}

class thread_latency_qos_policy extends ffi.Struct {
  @thread_latency_qos_t()
  external int thread_latency_qos_tier;
}

typedef thread_latency_qos_t = integer_t;

class thread_throughput_qos_policy extends ffi.Struct {
  @thread_throughput_qos_t()
  external int thread_throughput_qos_tier;
}

typedef thread_throughput_qos_t = integer_t;

@ffi.Packed(4)
class vm_region_basic_info_64 extends ffi.Struct {
  @vm_prot_t()
  external int protection;

  @vm_prot_t()
  external int max_protection;

  @vm_inherit_t()
  external int inheritance;

  @boolean_t()
  external int shared;

  @boolean_t()
  external int reserved;

  @memory_object_offset_t()
  external int offset;

  @vm_behavior_t()
  external int behavior;

  @ffi.UnsignedShort()
  external int user_wired_count;
}

typedef vm_prot_t = ffi.Int;
typedef vm_inherit_t = ffi.UnsignedInt;
typedef memory_object_offset_t = ffi.UnsignedLongLong;
typedef vm_behavior_t = ffi.Int;

class vm_region_basic_info extends ffi.Struct {
  @vm_prot_t()
  external int protection;

  @vm_prot_t()
  external int max_protection;

  @vm_inherit_t()
  external int inheritance;

  @boolean_t()
  external int shared;

  @boolean_t()
  external int reserved;

  @ffi.Uint32()
  external int offset;

  @vm_behavior_t()
  external int behavior;

  @ffi.UnsignedShort()
  external int user_wired_count;
}

class vm_region_extended_info extends ffi.Struct {
  @vm_prot_t()
  external int protection;

  @ffi.UnsignedInt()
  external int user_tag;

  @ffi.UnsignedInt()
  external int pages_resident;

  @ffi.UnsignedInt()
  external int pages_shared_now_private;

  @ffi.UnsignedInt()
  external int pages_swapped_out;

  @ffi.UnsignedInt()
  external int pages_dirtied;

  @ffi.UnsignedInt()
  external int ref_count;

  @ffi.UnsignedShort()
  external int shadow_depth;

  @ffi.UnsignedChar()
  external int external_pager;

  @ffi.UnsignedChar()
  external int share_mode;

  @ffi.UnsignedInt()
  external int pages_reusable;
}

class vm_region_top_info extends ffi.Struct {
  @ffi.UnsignedInt()
  external int obj_id;

  @ffi.UnsignedInt()
  external int ref_count;

  @ffi.UnsignedInt()
  external int private_pages_resident;

  @ffi.UnsignedInt()
  external int shared_pages_resident;

  @ffi.UnsignedChar()
  external int share_mode;
}

class vm_region_submap_info extends ffi.Struct {
  @vm_prot_t()
  external int protection;

  @vm_prot_t()
  external int max_protection;

  @vm_inherit_t()
  external int inheritance;

  @ffi.Uint32()
  external int offset;

  @ffi.UnsignedInt()
  external int user_tag;

  @ffi.UnsignedInt()
  external int pages_resident;

  @ffi.UnsignedInt()
  external int pages_shared_now_private;

  @ffi.UnsignedInt()
  external int pages_swapped_out;

  @ffi.UnsignedInt()
  external int pages_dirtied;

  @ffi.UnsignedInt()
  external int ref_count;

  @ffi.UnsignedShort()
  external int shadow_depth;

  @ffi.UnsignedChar()
  external int external_pager;

  @ffi.UnsignedChar()
  external int share_mode;

  @boolean_t()
  external int is_submap;

  @vm_behavior_t()
  external int behavior;

  @vm32_object_id_t()
  external int object_id;

  @ffi.UnsignedShort()
  external int user_wired_count;
}

typedef vm32_object_id_t = ffi.Uint32;

@ffi.Packed(4)
class vm_region_submap_info_64 extends ffi.Struct {
  @vm_prot_t()
  external int protection;

  @vm_prot_t()
  external int max_protection;

  @vm_inherit_t()
  external int inheritance;

  @memory_object_offset_t()
  external int offset;

  @ffi.UnsignedInt()
  external int user_tag;

  @ffi.UnsignedInt()
  external int pages_resident;

  @ffi.UnsignedInt()
  external int pages_shared_now_private;

  @ffi.UnsignedInt()
  external int pages_swapped_out;

  @ffi.UnsignedInt()
  external int pages_dirtied;

  @ffi.UnsignedInt()
  external int ref_count;

  @ffi.UnsignedShort()
  external int shadow_depth;

  @ffi.UnsignedChar()
  external int external_pager;

  @ffi.UnsignedChar()
  external int share_mode;

  @boolean_t()
  external int is_submap;

  @vm_behavior_t()
  external int behavior;

  @vm32_object_id_t()
  external int object_id;

  @ffi.UnsignedShort()
  external int user_wired_count;

  @ffi.UnsignedInt()
  external int pages_reusable;

  @vm_object_id_t()
  external int object_id_full;
}

typedef vm_object_id_t = ffi.UnsignedLongLong;

@ffi.Packed(4)
class vm_region_submap_short_info_64 extends ffi.Struct {
  @vm_prot_t()
  external int protection;

  @vm_prot_t()
  external int max_protection;

  @vm_inherit_t()
  external int inheritance;

  @memory_object_offset_t()
  external int offset;

  @ffi.UnsignedInt()
  external int user_tag;

  @ffi.UnsignedInt()
  external int ref_count;

  @ffi.UnsignedShort()
  external int shadow_depth;

  @ffi.UnsignedChar()
  external int external_pager;

  @ffi.UnsignedChar()
  external int share_mode;

  @boolean_t()
  external int is_submap;

  @vm_behavior_t()
  external int behavior;

  @vm32_object_id_t()
  external int object_id;

  @ffi.UnsignedShort()
  external int user_wired_count;
}

@ffi.Packed(4)
class mach_vm_read_entry extends ffi.Struct {
  @mach_vm_address_t()
  external int address;

  @mach_vm_size_t()
  external int size;
}

@ffi.Packed(4)
class vm_read_entry extends ffi.Struct {
  @vm_address_t()
  external int address;

  @vm_size_t()
  external int size;
}

typedef vm_address_t = vm_offset_t;

class vm_page_info_basic extends ffi.Struct {
  @ffi.Int()
  external int disposition;

  @ffi.Int()
  external int ref_count;

  @vm_object_id_t()
  external int object_id;

  @memory_object_offset_t()
  external int offset;

  @ffi.Int()
  external int depth;

  @ffi.Int()
  external int __pad;
}

@ffi.Packed(4)
class kmod_info extends ffi.Struct {
  external ffi.Pointer<kmod_info> next;

  @ffi.Int32()
  external int info_version;

  @ffi.Uint32()
  external int id;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> version;

  @ffi.Int32()
  external int reference_count;

  external ffi.Pointer<kmod_reference_t> reference_list;

  @vm_address_t()
  external int address;

  @vm_size_t()
  external int size;

  @vm_size_t()
  external int hdr_size;

  external ffi.Pointer<kmod_start_func_t> start;

  external ffi.Pointer<kmod_stop_func_t> stop;
}

typedef kmod_reference_t = kmod_reference;

@ffi.Packed(4)
class kmod_reference extends ffi.Struct {
  external ffi.Pointer<kmod_reference> next;

  external ffi.Pointer<kmod_info> info;
}

typedef kmod_start_func_t = ffi.NativeFunction<
    kern_return_t Function(ffi.Pointer<kmod_info>, ffi.Pointer<ffi.Void>)>;
typedef kmod_stop_func_t = ffi.NativeFunction<
    kern_return_t Function(ffi.Pointer<kmod_info>, ffi.Pointer<ffi.Void>)>;

class kmod_info_32_v1 extends ffi.Struct {
  @ffi.Uint32()
  external int next_addr;

  @ffi.Int32()
  external int info_version;

  @ffi.Uint32()
  external int id;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> version;

  @ffi.Int32()
  external int reference_count;

  @ffi.Uint32()
  external int reference_list_addr;

  @ffi.Uint32()
  external int address;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int hdr_size;

  @ffi.Uint32()
  external int start_addr;

  @ffi.Uint32()
  external int stop_addr;
}

@ffi.Packed(4)
class kmod_info_64_v1 extends ffi.Struct {
  @ffi.Uint64()
  external int next_addr;

  @ffi.Int32()
  external int info_version;

  @ffi.Uint32()
  external int id;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> version;

  @ffi.Int32()
  external int reference_count;

  @ffi.Uint64()
  external int reference_list_addr;

  @ffi.Uint64()
  external int address;

  @ffi.Uint64()
  external int size;

  @ffi.Uint64()
  external int hdr_size;

  @ffi.Uint64()
  external int start_addr;

  @ffi.Uint64()
  external int stop_addr;
}

class fsid extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> val;
}

class fsobj_id extends ffi.Struct {
  @u_int32_t()
  external int fid_objno;

  @u_int32_t()
  external int fid_generation;
}

class dyld_kernel_image_info extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> uuid;

  external fsobj_id_t fsobjid;

  external fsid_t fsid;

  @ffi.Uint64()
  external int load_addr;
}

typedef fsobj_id_t = fsobj_id;
typedef fsid_t = fsid;

class dyld_kernel_process_info extends ffi.Struct {
  external dyld_kernel_image_info cache_image_info;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Uint32()
  external int imageCount;

  @ffi.Uint32()
  external int initialImageCount;

  @ffi.Uint8()
  external int dyldState;

  @boolean_t()
  external int no_cache;

  @boolean_t()
  external int private_cache;
}

typedef task_name_t = mach_port_t;
typedef host_t = mach_port_t;
typedef sleep_type_t = ffi.Int;
typedef mach_timespec_t = mach_timespec;
typedef mach_vm_offset_t = ffi.Uint64;
typedef mach_port_name_array_t = ffi.Pointer<mach_port_name_t>;
typedef vm_purgable_t = ffi.Int;
typedef mach_port_right_t = natural_t;
typedef mach_port_delta_t = integer_t;
typedef mach_msg_type_name_t = ffi.UnsignedInt;
typedef mach_port_flavor_t = ffi.Int;
typedef mach_port_info_t = ffi.Pointer<integer_t>;
typedef mach_msg_type_number_t = natural_t;
typedef mach_port_options_t = mach_port_options;
typedef mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
typedef mach_voucher_attr_raw_recipe_t = ffi.Pointer<ffi.Uint8>;
typedef mach_voucher_attr_key_t = ffi.Uint32;
typedef ipc_space_t = mach_port_t;

class IOPhysicalRange extends ffi.Struct {
  @IOPhysicalAddress()
  external int address;

  @IOByteCount()
  external int length;
}

typedef IOPhysicalAddress = IOPhysicalAddress64;
typedef IOPhysicalAddress64 = UInt64;
typedef UInt64 = ffi.UnsignedLongLong;
typedef IOByteCount = IOByteCount64;
typedef IOByteCount64 = UInt64;

class IOVirtualRange extends ffi.Struct {
  @IOVirtualAddress()
  external int address;

  @IOByteCount()
  external int length;
}

typedef IOVirtualAddress = mach_vm_address_t;

class IONamedValue extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Char> name;
}

class OSNotificationHeader64 extends ffi.Opaque {}

@ffi.Packed(4)
class IOServiceInterestContent64 extends ffi.Struct {
  @natural_t()
  external int messageType;

  @ffi.Array.multi([1])
  external ffi.Array<io_user_reference_t> messageArgument;
}

typedef io_user_reference_t = ffi.Uint64;

class OSNotificationHeader extends ffi.Opaque {}

@ffi.Packed(4)
class IOServiceInterestContent extends ffi.Struct {
  @natural_t()
  external int messageType;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Pointer<ffi.Void>> messageArgument;
}

class IOAsyncCompletionContent extends ffi.Opaque {}

class IONotificationPort extends ffi.Opaque {}

typedef IONotificationPortRef = ffi.Pointer<IONotificationPort>;
typedef io_object_t = mach_port_t;
typedef io_iterator_t = io_object_t;
typedef io_service_t = io_object_t;
typedef IOServiceMatchingCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, io_iterator_t)>>;
typedef IOServiceInterestCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, io_service_t, ffi.Uint32,
            ffi.Pointer<ffi.Void>)>>;
typedef task_port_t = task_t;
typedef task_t = mach_port_t;
typedef io_connect_t = io_object_t;
typedef IOOptionBits = UInt32;
typedef io_registry_entry_t = io_object_t;

abstract class SMCCommands_t {
  static const int SMC_CMD_READ_BYTES = 5;
  static const int SMC_CMD_WRITE_BYTES = 6;
  static const int SMC_CMD_READ_INDEX = 8;
  static const int SMC_CMD_READ_KEYINFO = 9;
  static const int SMC_CMD_READ_PLIMIT = 11;
  static const int SMC_CMD_READ_VERS = 12;
}

class SMCKeyData_vers_t extends ffi.Struct {
  @ffi.Char()
  external int major;

  @ffi.Char()
  external int minor;

  @ffi.Char()
  external int build;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> reserved;

  @UInt16()
  external int release;
}

class SMCKeyData_pLimitData_t extends ffi.Struct {
  @UInt16()
  external int version;

  @UInt16()
  external int length;

  @UInt32()
  external int cpuPLimit;

  @UInt32()
  external int gpuPLimit;

  @UInt32()
  external int memPLimit;
}

class SMCKeyData_keyInfo_t extends ffi.Struct {
  @UInt32()
  external int dataSize;

  @UInt32()
  external int dataType;

  @ffi.Char()
  external int dataAttributes;
}

class SMCKeyData_t extends ffi.Struct {
  @UInt32()
  external int key;

  external SMCKeyData_vers_t vers;

  external SMCKeyData_pLimitData_t pLimitData;

  external SMCKeyData_keyInfo_t keyInfo;

  @ffi.Char()
  external int result;

  @ffi.Char()
  external int status;

  @ffi.Char()
  external int data8;

  @UInt32()
  external int data32;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> bytes;
}

class SMCVal_t extends ffi.Struct {
  @ffi.Array.multi([5])
  external ffi.Array<ffi.Char> key;

  @UInt32()
  external int dataSize;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Char> dataType;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> bytes;
}

class hm_iokit_lib extends ffi.Struct {
  @io_connect_t()
  external int conn;
}

class hm_attrs extends ffi.Struct {
  @HM_ADAPTER_ADL()
  external int adl;

  external HM_ADAPTER_NVML nvml;

  external HM_ADAPTER_NVAPI nvapi;

  @HM_ADAPTER_SYSFS_AMDGPU()
  external int sysfs_amdgpu;

  @HM_ADAPTER_SYSFS_CPU()
  external int sysfs_cpu;

  @HM_ADAPTER_IOKIT()
  external int iokit;

  @ffi.Int()
  external int od_version;

  @ffi.Bool()
  external bool buslanes_get_supported;

  @ffi.Bool()
  external bool corespeed_get_supported;

  @ffi.Bool()
  external bool fanspeed_get_supported;

  @ffi.Bool()
  external bool fanpolicy_get_supported;

  @ffi.Bool()
  external bool memoryspeed_get_supported;

  @ffi.Bool()
  external bool temperature_get_supported;

  @ffi.Bool()
  external bool threshold_shutdown_get_supported;

  @ffi.Bool()
  external bool threshold_slowdown_get_supported;

  @ffi.Bool()
  external bool throttle_get_supported;

  @ffi.Bool()
  external bool utilization_get_supported;
}

typedef HM_ADAPTER_ADL = ffi.Int;
typedef HM_ADAPTER_NVML = nvmlDevice_t;
typedef HM_ADAPTER_NVAPI = NvPhysicalGpuHandle;
typedef HM_ADAPTER_SYSFS_AMDGPU = ffi.Int;
typedef HM_ADAPTER_SYSFS_CPU = ffi.Int;
typedef HM_ADAPTER_IOKIT = ffi.Int;

class hwmon_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Void> hm_adl;

  external ffi.Pointer<ffi.Void> hm_nvml;

  external ffi.Pointer<ffi.Void> hm_nvapi;

  external ffi.Pointer<ffi.Void> hm_sysfs_amdgpu;

  external ffi.Pointer<ffi.Void> hm_sysfs_cpu;

  external ffi.Pointer<ffi.Void> hm_iokit;

  external ffi.Pointer<hm_attrs_t> hm_device;
}

typedef hm_attrs_t = hm_attrs;

class cpu_set extends ffi.Struct {
  @u32()
  external int count;
}

class string_sized_t extends ffi.Struct {
  external ffi.Pointer<ffi.Char> buf;

  @ffi.Int()
  external int len;
}

class aes_context extends ffi.Struct {
  @ffi.Int()
  external int bits;

  @ffi.Array.multi([60])
  external ffi.Array<u32> rek;

  @ffi.Array.multi([60])
  external ffi.Array<u32> rdk;
}

class debugfile_ctx extends ffi.Struct {
  external HCFILE fp;

  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> filename;

  @u32()
  external int mode;
}

class dictstat extends ffi.Struct {
  @u64()
  external int cnt;

  external stat stat1;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> encoding_from;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> encoding_to;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> hash_filename;
}

class hashdump extends ffi.Struct {
  @ffi.Int()
  external int version;

  external hashes_t hashes;
}

typedef hashes_t = hashes;

class dictstat_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> filename;

  external ffi.Pointer<dictstat_t> base;

  @ffi.Size()
  external int cnt;
}

typedef dictstat_t = dictstat;

class loopback_ctx extends ffi.Struct {
  external HCFILE fp;

  @ffi.Bool()
  external bool enabled;

  @ffi.Bool()
  external bool unused;

  external ffi.Pointer<ffi.Char> filename;
}

class mf extends ffi.Struct {
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> mf_buf;

  @ffi.Int()
  external int mf_len;
}

class outfile_ctx extends ffi.Struct {
  external HCFILE fp;

  @u32()
  external int outfile_format;

  @ffi.Bool()
  external bool outfile_autohex;

  external ffi.Pointer<ffi.Char> filename;
}

class pot extends ffi.Struct {
  @ffi.Array.multi([8192])
  external ffi.Array<ffi.Char> plain_buf;

  @ffi.Int()
  external int plain_len;

  external hash_t hash;
}

class potfile_ctx extends ffi.Struct {
  external HCFILE fp;

  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> filename;

  external ffi.Pointer<ffi.Int> out_buf;

  external ffi.Pointer<ffi.Int> tmp_buf;
}

class pot_hash_node extends ffi.Struct {
  external ffi.Pointer<hash_t> hash_buf;

  external ffi.Pointer<pot_hash_node> next;
}

class pot_tree_entry extends ffi.Struct {
  external ffi.Pointer<pot_hash_node_t> nodes;

  external ffi.Pointer<hashconfig_t> hashconfig;
}

typedef pot_hash_node_t = pot_hash_node;
typedef hashconfig_t = hashconfig;

class pot_orig_line_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Int> hash_buf;

  @ffi.Int()
  external int hash_len;

  @ffi.Int()
  external int line_pos;
}

class restore_data extends ffi.Struct {
  @ffi.Int()
  external int version;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> cwd;

  @u32()
  external int dicts_pos;

  @u32()
  external int masks_pos;

  @u64()
  external int words_cur;

  @u32()
  external int argc;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> argv;
}

class pidfile_data extends ffi.Struct {
  @u32()
  external int pid;
}

class restore_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  @ffi.Bool()
  external bool restore_execute;

  @ffi.Int()
  external int argc;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> argv;

  external ffi.Pointer<ffi.Char> eff_restore_file;

  external ffi.Pointer<ffi.Char> new_restore_file;

  external ffi.Pointer<restore_data_t> rd;

  @u32()
  external int dicts_pos_prev;

  @u32()
  external int masks_pos_prev;

  @u64()
  external int words_cur_prev;
}

typedef restore_data_t = restore_data;

class pidfile_ctx extends ffi.Struct {
  @u32()
  external int pid;

  external ffi.Pointer<ffi.Char> filename;

  external ffi.Pointer<pidfile_data_t> pd;

  @ffi.Bool()
  external bool pidfile_written;
}

typedef pidfile_data_t = pidfile_data;

class out extends ffi.Struct {
  external HCFILE fp;

  @ffi.Array.multi([8192])
  external ffi.Array<ffi.Char> buf;

  @ffi.Int()
  external int len;
}

class tuning_db_alias extends ffi.Struct {
  external ffi.Pointer<ffi.Char> device_name;

  external ffi.Pointer<ffi.Char> alias_name;
}

class tuning_db_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> device_name;

  @ffi.Int()
  external int attack_mode;

  @ffi.Int()
  external int hash_mode;

  @ffi.Int()
  external int workload_profile;

  @ffi.Int()
  external int vector_width;

  @ffi.Int()
  external int kernel_accel;

  @ffi.Int()
  external int kernel_loops;
}

class tuning_db extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<tuning_db_alias_t> alias_buf;

  @ffi.Int()
  external int alias_cnt;

  @ffi.Int()
  external int alias_alloc;

  external ffi.Pointer<tuning_db_entry_t> entry_buf;

  @ffi.Int()
  external int entry_cnt;

  @ffi.Int()
  external int entry_alloc;
}

typedef tuning_db_alias_t = tuning_db_alias;
typedef tuning_db_entry_t = tuning_db_entry;

class wl_data extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> buf;

  @u64()
  external int incr;

  @u64()
  external int avail;

  @u64()
  external int cnt;

  @u64()
  external int pos;

  @ffi.Bool()
  external bool iconv_enabled;

  external iconv_t iconv_ctx;

  external ffi.Pointer<ffi.Char> iconv_tmp;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, u64, ffi.Pointer<u64>,
              ffi.Pointer<u64>)>> func;
}

class user_options extends ffi.Struct {
  external ffi.Pointer<ffi.Char> hc_bin;

  @ffi.Int()
  external int hc_argc;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> hc_argv;

  @ffi.Bool()
  external bool attack_mode_chgd;

  @ffi.Bool()
  external bool autodetect;

  @ffi.Bool()
  external bool hash_mode_chgd;

  @ffi.Bool()
  external bool hccapx_message_pair_chgd;

  @ffi.Bool()
  external bool identify;

  @ffi.Bool()
  external bool increment_max_chgd;

  @ffi.Bool()
  external bool increment_min_chgd;

  @ffi.Bool()
  external bool kernel_accel_chgd;

  @ffi.Bool()
  external bool kernel_loops_chgd;

  @ffi.Bool()
  external bool kernel_threads_chgd;

  @ffi.Bool()
  external bool nonce_error_corrections_chgd;

  @ffi.Bool()
  external bool spin_damp_chgd;

  @ffi.Bool()
  external bool backend_vector_width_chgd;

  @ffi.Bool()
  external bool outfile_format_chgd;

  @ffi.Bool()
  external bool remove_timer_chgd;

  @ffi.Bool()
  external bool rp_gen_seed_chgd;

  @ffi.Bool()
  external bool runtime_chgd;

  @ffi.Bool()
  external bool segment_size_chgd;

  @ffi.Bool()
  external bool workload_profile_chgd;

  @ffi.Bool()
  external bool skip_chgd;

  @ffi.Bool()
  external bool limit_chgd;

  @ffi.Bool()
  external bool scrypt_tmto_chgd;

  @ffi.Bool()
  external bool separator_chgd;

  @ffi.Bool()
  external bool advice_disable;

  @ffi.Bool()
  external bool benchmark;

  @ffi.Bool()
  external bool benchmark_all;

  @ffi.Bool()
  external bool force;

  @ffi.Bool()
  external bool deprecated_check_disable;

  @ffi.Bool()
  external bool hwmon_disable;

  @ffi.Bool()
  external bool hash_info;

  @ffi.Bool()
  external bool hex_charset;

  @ffi.Bool()
  external bool hex_salt;

  @ffi.Bool()
  external bool hex_wordlist;

  @ffi.Bool()
  external bool increment;

  @ffi.Bool()
  external bool keep_guessing;

  @ffi.Bool()
  external bool keyspace;

  @ffi.Bool()
  external bool left;

  @ffi.Bool()
  external bool logfile_disable;

  @ffi.Bool()
  external bool loopback;

  @ffi.Bool()
  external bool machine_readable;

  @ffi.Bool()
  external bool markov_classic;

  @ffi.Bool()
  external bool markov_disable;

  @ffi.Bool()
  external bool markov_inverse;

  @ffi.Bool()
  external bool backend_ignore_cuda;

  @ffi.Bool()
  external bool backend_ignore_hip;

  @ffi.Bool()
  external bool backend_ignore_metal;

  @ffi.Bool()
  external bool backend_ignore_opencl;

  @ffi.Bool()
  external bool optimized_kernel_enable;

  @ffi.Bool()
  external bool multiply_accel_disable;

  @ffi.Bool()
  external bool outfile_autohex;

  @ffi.Bool()
  external bool potfile_disable;

  @ffi.Bool()
  external bool progress_only;

  @ffi.Bool()
  external bool quiet;

  @ffi.Bool()
  external bool remove;

  @ffi.Bool()
  external bool restore;

  @ffi.Bool()
  external bool restore_disable;

  @ffi.Bool()
  external bool self_test_disable;

  @ffi.Bool()
  external bool show1;

  @ffi.Bool()
  external bool slow_candidates;

  @ffi.Bool()
  external bool speed_only;

  @ffi.Bool()
  external bool status;

  @ffi.Bool()
  external bool status_json;

  @ffi.Bool()
  external bool stdout_flag;

  @ffi.Bool()
  external bool stdin_timeout_abort_chgd;

  @ffi.Bool()
  external bool usage;

  @ffi.Bool()
  external bool username;

  @ffi.Bool()
  external bool veracrypt_pim_start_chgd;

  @ffi.Bool()
  external bool veracrypt_pim_stop_chgd;

  @ffi.Bool()
  external bool version;

  @ffi.Bool()
  external bool wordlist_autohex_disable;

  external ffi.Pointer<ffi.Char> cpu_affinity;

  external ffi.Pointer<ffi.Char> custom_charset_4;

  external ffi.Pointer<ffi.Char> debug_file;

  external ffi.Pointer<ffi.Char> induction_dir;

  external ffi.Pointer<ffi.Char> keyboard_layout_mapping;

  external ffi.Pointer<ffi.Char> markov_hcstat2;

  external ffi.Pointer<ffi.Char> backend_devices;

  external ffi.Pointer<ffi.Char> opencl_device_types;

  external ffi.Pointer<ffi.Char> outfile;

  external ffi.Pointer<ffi.Char> outfile_check_dir;

  external ffi.Pointer<ffi.Char> potfile_path;

  external ffi.Pointer<ffi.Char> restore_file_path;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> rp_files;

  external ffi.Pointer<ffi.Char> rp_gen_func_sel;

  external ffi.Pointer<ffi.Char> separator;

  external ffi.Pointer<ffi.Char> truecrypt_keyfiles;

  external ffi.Pointer<ffi.Char> veracrypt_keyfiles;

  external ffi.Pointer<ffi.Char> custom_charset_1;

  external ffi.Pointer<ffi.Char> custom_charset_2;

  external ffi.Pointer<ffi.Char> custom_charset_3;

  external ffi.Pointer<ffi.Char> encoding_from;

  external ffi.Pointer<ffi.Char> encoding_to;

  external ffi.Pointer<ffi.Char> rule_buf_l;

  external ffi.Pointer<ffi.Char> rule_buf_r;

  external ffi.Pointer<ffi.Char> session;

  @u32()
  external int attack_mode;

  @u32()
  external int backend_info;

  @u32()
  external int bitmap_max;

  @u32()
  external int bitmap_min;

  @u32()
  external int debug_mode;

  @u32()
  external int hwmon_temp_abort;

  @ffi.Int()
  external int hash_mode;

  @u32()
  external int hccapx_message_pair;

  @u32()
  external int hook_threads;

  @u32()
  external int increment_max;

  @u32()
  external int increment_min;

  @u32()
  external int kernel_accel;

  @u32()
  external int kernel_loops;

  @u32()
  external int kernel_threads;

  @u32()
  external int markov_threshold;

  @u32()
  external int nonce_error_corrections;

  @u32()
  external int spin_damp;

  @u32()
  external int backend_vector_width;

  @u32()
  external int outfile_check_timer;

  @u32()
  external int outfile_format;

  @u32()
  external int remove_timer;

  @u32()
  external int restore_timer;

  @u32()
  external int rp_files_cnt;

  @u32()
  external int rp_gen;

  @u32()
  external int rp_gen_func_max;

  @u32()
  external int rp_gen_func_min;

  @u32()
  external int rp_gen_seed;

  @u32()
  external int runtime;

  @u32()
  external int scrypt_tmto;

  @u32()
  external int segment_size;

  @u32()
  external int status_timer;

  @u32()
  external int stdin_timeout_abort;

  @u32()
  external int veracrypt_pim_start;

  @u32()
  external int veracrypt_pim_stop;

  @u32()
  external int workload_profile;

  @u64()
  external int limit;

  @u64()
  external int skip;
}

class user_options_extra extends ffi.Struct {
  @u32()
  external int attack_kern;

  @u32()
  external int rule_len_r;

  @u32()
  external int rule_len_l;

  @u32()
  external int wordlist_mode;

  @ffi.Char()
  external int separator;

  external ffi.Pointer<ffi.Char> hc_hash;

  @ffi.Int()
  external int hc_workc;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> hc_workv;
}

class brain_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool support;

  @ffi.Bool()
  external bool enabled;
}

class bitmap_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  @u32()
  external int bitmap_bits;

  @u32()
  external int bitmap_nums;

  @u32()
  external int bitmap_size;

  @u32()
  external int bitmap_mask;

  @u32()
  external int bitmap_shift1;

  @u32()
  external int bitmap_shift2;

  external ffi.Pointer<u32> bitmap_s1_a;

  external ffi.Pointer<u32> bitmap_s1_b;

  external ffi.Pointer<u32> bitmap_s1_c;

  external ffi.Pointer<u32> bitmap_s1_d;

  external ffi.Pointer<u32> bitmap_s2_a;

  external ffi.Pointer<u32> bitmap_s2_b;

  external ffi.Pointer<u32> bitmap_s2_c;

  external ffi.Pointer<u32> bitmap_s2_d;
}

class folder_config extends ffi.Struct {
  external ffi.Pointer<ffi.Char> cwd;

  external ffi.Pointer<ffi.Char> install_dir;

  external ffi.Pointer<ffi.Char> profile_dir;

  external ffi.Pointer<ffi.Char> cache_dir;

  external ffi.Pointer<ffi.Char> session_dir;

  external ffi.Pointer<ffi.Char> shared_dir;

  external ffi.Pointer<ffi.Char> cpath_real;
}

class induct_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> root_directory;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> induction_dictionaries;

  @ffi.Int()
  external int induction_dictionaries_cnt;

  @ffi.Int()
  external int induction_dictionaries_pos;
}

class outcheck_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> root_directory;
}

class straight_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  @u32()
  external int kernel_rules_cnt;

  external ffi.Pointer<ffi.Int> kernel_rules_buf;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> dicts;

  @u32()
  external int dicts_pos;

  @u32()
  external int dicts_cnt;

  @u32()
  external int dicts_avail;

  external ffi.Pointer<ffi.Char> dict;
}

class combinator_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Char> dict1;

  external ffi.Pointer<ffi.Char> dict2;

  @u32()
  external int combs_mode;

  @u64()
  external int combs_cnt;
}

class mask_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<ffi.Int> mp_sys;

  external ffi.Pointer<ffi.Int> mp_usr;

  @u64()
  external int bfs_cnt;

  external ffi.Pointer<ffi.Int> css_buf;

  @u32()
  external int css_cnt;

  external ffi.Pointer<ffi.Int> root_table_buf;

  external ffi.Pointer<ffi.Int> markov_table_buf;

  external ffi.Pointer<ffi.Int> root_css_buf;

  external ffi.Pointer<ffi.Int> markov_css_buf;

  @ffi.Bool()
  external bool mask_from_file;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> masks;

  @u32()
  external int masks_pos;

  @u32()
  external int masks_cnt;

  @u32()
  external int masks_avail;

  external ffi.Pointer<ffi.Char> mask;

  external ffi.Pointer<mf_t> mfs;
}

typedef mf_t = mf;

class cpt_ctx extends ffi.Struct {
  @ffi.Bool()
  external bool enabled;

  external ffi.Pointer<cpt_t> cpt_buf;

  @ffi.Int()
  external int cpt_pos;

  @time_t()
  external int cpt_start;

  @u64()
  external int cpt_total;
}

typedef cpt_t = cpt;

class device_info extends ffi.Struct {
  @ffi.Bool()
  external bool skipped_dev;

  @ffi.Bool()
  external bool skipped_warning_dev;

  @ffi.Double()
  external double hashes_msec_dev;

  @ffi.Double()
  external double hashes_msec_dev_benchmark;

  @ffi.Double()
  external double exec_msec_dev;

  external ffi.Pointer<ffi.Char> speed_sec_dev;

  external ffi.Pointer<ffi.Char> guess_candidates_dev;

  external ffi.Pointer<ffi.Char> hwmon_fan_dev;

  external ffi.Pointer<ffi.Char> hwmon_dev;

  @ffi.Int()
  external int corespeed_dev;

  @ffi.Int()
  external int memoryspeed_dev;

  @ffi.Double()
  external double runtime_msec_dev;

  @u64()
  external int progress_dev;

  @ffi.Int()
  external int kernel_accel_dev;

  @ffi.Int()
  external int kernel_loops_dev;

  @ffi.Int()
  external int kernel_threads_dev;

  @ffi.Int()
  external int vector_width_dev;

  @ffi.Int()
  external int salt_pos_dev;

  @ffi.Int()
  external int innerloop_pos_dev;

  @ffi.Int()
  external int innerloop_left_dev;

  @ffi.Int()
  external int iteration_pos_dev;

  @ffi.Int()
  external int iteration_left_dev;

  external ffi.Pointer<ffi.Char> device_name;

  @cl_device_type()
  external int device_type;
}

class hashcat_status extends ffi.Struct {
  external ffi.Pointer<ffi.Char> hash_target;

  external ffi.Pointer<ffi.Char> hash_name;

  @ffi.Int()
  external int guess_mode;

  external ffi.Pointer<ffi.Char> guess_base;

  @ffi.Int()
  external int guess_base_offset;

  @ffi.Int()
  external int guess_base_count;

  @ffi.Double()
  external double guess_base_percent;

  external ffi.Pointer<ffi.Char> guess_mod;

  @ffi.Int()
  external int guess_mod_offset;

  @ffi.Int()
  external int guess_mod_count;

  @ffi.Double()
  external double guess_mod_percent;

  external ffi.Pointer<ffi.Char> guess_charset;

  @ffi.Int()
  external int guess_mask_length;

  external ffi.Pointer<ffi.Char> session;

  external ffi.Pointer<ffi.Char> status_string;

  @ffi.Int()
  external int status_number;

  external ffi.Pointer<ffi.Char> time_estimated_absolute;

  external ffi.Pointer<ffi.Char> time_estimated_relative;

  external ffi.Pointer<ffi.Char> time_started_absolute;

  external ffi.Pointer<ffi.Char> time_started_relative;

  @ffi.Double()
  external double msec_paused;

  @ffi.Double()
  external double msec_running;

  @ffi.Double()
  external double msec_real;

  @ffi.Int()
  external int digests_cnt;

  @ffi.Int()
  external int digests_done;

  @ffi.Int()
  external int digests_done_pot;

  @ffi.Int()
  external int digests_done_zero;

  @ffi.Int()
  external int digests_done_new;

  @ffi.Double()
  external double digests_percent;

  @ffi.Double()
  external double digests_percent_new;

  @ffi.Int()
  external int salts_cnt;

  @ffi.Int()
  external int salts_done;

  @ffi.Double()
  external double salts_percent;

  @ffi.Int()
  external int progress_mode;

  @ffi.Double()
  external double progress_finished_percent;

  @u64()
  external int progress_cur;

  @u64()
  external int progress_cur_relative_skip;

  @u64()
  external int progress_done;

  @u64()
  external int progress_end;

  @u64()
  external int progress_end_relative_skip;

  @u64()
  external int progress_ignore;

  @u64()
  external int progress_rejected;

  @ffi.Double()
  external double progress_rejected_percent;

  @u64()
  external int progress_restored;

  @u64()
  external int progress_skip;

  @u64()
  external int restore_point;

  @u64()
  external int restore_total;

  @ffi.Double()
  external double restore_percent;

  @ffi.Int()
  external int cpt_cur_min;

  @ffi.Int()
  external int cpt_cur_hour;

  @ffi.Int()
  external int cpt_cur_day;

  @ffi.Double()
  external double cpt_avg_min;

  @ffi.Double()
  external double cpt_avg_hour;

  @ffi.Double()
  external double cpt_avg_day;

  external ffi.Pointer<ffi.Char> cpt;

  @ffi.Array.multi([128])
  external ffi.Array<device_info_t> device_info_buf;

  @ffi.Int()
  external int device_info_cnt;

  @ffi.Int()
  external int device_info_active;

  @ffi.Double()
  external double hashes_msec_all;

  @ffi.Double()
  external double exec_msec_all;

  external ffi.Pointer<ffi.Char> speed_sec_all;
}

typedef device_info_t = device_info;

class status_ctx extends ffi.Struct {
  /// main status
  @ffi.Bool()
  external bool accessible;

  @u32()
  external int devices_status;

  /// full (final) status snapshot
  external ffi.Pointer<hashcat_status_t> hashcat_status_final;

  /// thread control
  @ffi.Bool()
  external bool run_main_level1;

  @ffi.Bool()
  external bool run_main_level2;

  @ffi.Bool()
  external bool run_main_level3;

  @ffi.Bool()
  external bool run_thread_level1;

  @ffi.Bool()
  external bool run_thread_level2;

  @ffi.Bool()
  external bool shutdown_inner;

  @ffi.Bool()
  external bool shutdown_outer;

  @ffi.Bool()
  external bool checkpoint_shutdown;

  @ffi.Bool()
  external bool finish_shutdown;

  external hc_thread_mutex_t mux_dispatcher;

  external hc_thread_mutex_t mux_counter;

  external hc_thread_mutex_t mux_hwmon;

  external hc_thread_mutex_t mux_display;

  /// workload
  @u64()
  external int words_off;

  @u64()
  external int words_cur;

  @u64()
  external int words_base;

  @u64()
  external int words_cnt;

  /// progress
  external ffi.Pointer<u64> words_progress_done;

  external ffi.Pointer<u64> words_progress_rejected;

  external ffi.Pointer<u64> words_progress_restored;

  /// timer
  @time_t()
  external int runtime_start;

  @time_t()
  external int runtime_stop;

  external hc_timer_t timer_running;

  external hc_timer_t timer_paused;

  @ffi.Double()
  external double msec_paused;

  /// read timeouts
  @u32()
  external int stdin_read_timeout_cnt;
}

typedef hashcat_status_t = hashcat_status;
typedef hc_thread_mutex_t = pthread_mutex_t;

class hashcat_user extends ffi.Struct {
  @ffi.Int()
  external int outer_threads_cnt;

  external ffi.Pointer<hc_thread_t> outer_threads;
}

typedef hc_thread_t = pthread_t;

class cache_hit extends ffi.Struct {
  external ffi.Pointer<ffi.Char> dictfile;

  external stat stat1;

  @u64()
  external int cached_cnt;

  @u64()
  external int keyspace;
}

class cache_generate extends ffi.Struct {
  external ffi.Pointer<ffi.Char> dictfile;

  @ffi.Double()
  external double percent;

  @u64()
  external int comp;

  @u64()
  external int cnt;

  @u64()
  external int cnt2;

  @time_t()
  external int runtime;
}

class hashlist_parse extends ffi.Struct {
  @u64()
  external int hashes_cnt;

  @u64()
  external int hashes_avail;
}

class event_ctx extends ffi.Struct {
  @ffi.Array.multi([10, 16777216])
  external ffi.Array<ffi.Array<ffi.Char>> old_buf;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Size> old_len;

  @ffi.Int()
  external int old_cnt;

  @ffi.Array.multi([16777216])
  external ffi.Array<ffi.Char> msg_buf;

  @ffi.Size()
  external int msg_len;

  @ffi.Bool()
  external bool msg_newline;

  @ffi.Size()
  external int prev_len;

  external hc_thread_mutex_t mux_event;
}

class module_ctx extends ffi.Struct {
  @ffi.Size()
  external int module_context_size;

  @ffi.Int()
  external int module_interface_version;

  external hc_dynlib_t module_handle;

  external MODULE_INIT module_init;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> hook_extra_params;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_attack_exec;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_benchmark_esalt;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_benchmark_hook_salt;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_benchmark_mask;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_benchmark_charset;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_benchmark_salt;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_deprecated_notice;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_dgst_pos0;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_dgst_pos1;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_dgst_pos2;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_dgst_pos3;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_dgst_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_dictstat_disable;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_esalt_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_extra_tuningdb_block;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_forced_outfile_format;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hash_category;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hash_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hash_mode;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hashes_count_min;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hashes_count_max;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hlfmt_disable;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hook_salt_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hook_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kernel_accel_min;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kernel_accel_max;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kernel_loops_min;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kernel_loops_max;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kernel_threads_min;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kernel_threads_max;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_kern_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_opti_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_opts_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_outfile_check_disable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_outfile_check_nocomp;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_potfile_disable;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<hashconfig_t>,
                  ffi.Pointer<user_options_t>,
                  ffi.Pointer<user_options_extra_t>)>>
      module_potfile_keep_all_hashes;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_pwdump_column;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_pw_min;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_pw_max;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_salt_min;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_salt_max;

  external ffi.Pointer<
      ffi.NativeFunction<
          u32 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_salt_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_separator;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_st_hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_st_pass;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_tmp_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_warmup_disable;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hashes_t>)>>
      module_hash_binary_count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<hashes_t>)>> module_hash_binary_parse;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hashes_t>, u32, u32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> module_hash_binary_save;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<hashconfig_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<hashinfo_t>,
                  ffi.Pointer<user_options_t>,
                  ffi.Pointer<user_options_extra_t>)>>
      module_hash_decode_postprocess;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>> module_hash_decode_potfile;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>)>> module_hash_decode_zero_hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>> module_hash_decode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>> module_hash_encode_potfile;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>> module_hash_encode_status;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>> module_hash_encode;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<hashinfo_t>)>> module_kern_type_dynamic;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<hashes_t>,
              ffi.Pointer<hc_device_param_t>)>> module_extra_buffer_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<hashes_t>)>> module_extra_tmp_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<hashes_t>,
              ffi.Pointer<hc_device_param_t>)>> module_jit_build_options;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<hashes_t>,
              ffi.Pointer<hc_device_param_t>)>> module_jit_cache_disable;

  external ffi.Pointer<
          ffi.NativeFunction<u32 Function(ffi.Pointer<hashes_t>, u32, u32)>>
      module_deep_comp_kernel;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<hash_t>)>>
      module_hash_init_selftest;

  external ffi.Pointer<
      ffi.NativeFunction<
          u64 Function(ffi.Pointer<hashconfig_t>, ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>)>> module_hook_extra_param_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<folder_config_t>,
              ffi.Pointer<backend_ctx_t>,
              ffi.Pointer<ffi.Void>)>> module_hook_extra_param_init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<folder_config_t>,
              ffi.Pointer<backend_ctx_t>,
              ffi.Pointer<ffi.Void>)>> module_hook_extra_param_term;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hc_device_param_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u32,
              u64)>> module_hook12;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hc_device_param_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u32,
              u64)>> module_hook23;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<hashes_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<u32>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<u32>,
              ffi.Size)>> module_build_plain_postprocess;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<user_options_t>,
              ffi.Pointer<user_options_extra_t>,
              ffi.Pointer<hc_device_param_t>)>> module_unstable_warning;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<hashconfig_t>,
              ffi.Pointer<hash_t>,
              ffi.Pointer<hash_t>,
              ffi.Pointer<ffi.Void>)>> module_potfile_custom_check;
}

typedef MODULE_INIT
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef user_options_t = user_options;
typedef user_options_extra_t = user_options_extra;
typedef folder_config_t = folder_config;
typedef backend_ctx_t = backend_ctx;

class hashcat_ctx extends ffi.Struct {
  external ffi.Pointer<brain_ctx_t> brain_ctx;

  external ffi.Pointer<bitmap_ctx_t> bitmap_ctx;

  external ffi.Pointer<combinator_ctx_t> combinator_ctx;

  external ffi.Pointer<cpt_ctx_t> cpt_ctx;

  external ffi.Pointer<debugfile_ctx_t> debugfile_ctx;

  external ffi.Pointer<dictstat_ctx_t> dictstat_ctx;

  external ffi.Pointer<event_ctx_t> event_ctx;

  external ffi.Pointer<folder_config_t> folder_config;

  external ffi.Pointer<hashcat_user_t> hashcat_user;

  external ffi.Pointer<hashconfig_t> hashconfig;

  external ffi.Pointer<hashes_t> hashes;

  external ffi.Pointer<hwmon_ctx_t> hwmon_ctx;

  external ffi.Pointer<induct_ctx_t> induct_ctx;

  external ffi.Pointer<logfile_ctx_t> logfile_ctx;

  external ffi.Pointer<loopback_ctx_t> loopback_ctx;

  external ffi.Pointer<mask_ctx_t> mask_ctx;

  external ffi.Pointer<module_ctx_t> module_ctx;

  external ffi.Pointer<backend_ctx_t> backend_ctx;

  external ffi.Pointer<outcheck_ctx_t> outcheck_ctx;

  external ffi.Pointer<outfile_ctx_t> outfile_ctx;

  external ffi.Pointer<pidfile_ctx_t> pidfile_ctx;

  external ffi.Pointer<potfile_ctx_t> potfile_ctx;

  external ffi.Pointer<restore_ctx_t> restore_ctx;

  external ffi.Pointer<status_ctx_t> status_ctx;

  external ffi.Pointer<straight_ctx_t> straight_ctx;

  external ffi.Pointer<tuning_db_t> tuning_db;

  external ffi.Pointer<user_options_extra_t> user_options_extra;

  external ffi.Pointer<user_options_t> user_options;

  external ffi.Pointer<wl_data_t> wl_data;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(u32, ffi.Pointer<hashcat_ctx>,
              ffi.Pointer<ffi.Void>, ffi.Size)>> event;
}

typedef brain_ctx_t = brain_ctx;
typedef bitmap_ctx_t = bitmap_ctx;
typedef combinator_ctx_t = combinator_ctx;
typedef cpt_ctx_t = cpt_ctx;
typedef debugfile_ctx_t = debugfile_ctx;
typedef dictstat_ctx_t = dictstat_ctx;
typedef event_ctx_t = event_ctx;
typedef hashcat_user_t = hashcat_user;
typedef hwmon_ctx_t = hwmon_ctx;
typedef induct_ctx_t = induct_ctx;
typedef logfile_ctx_t = logfile_ctx;
typedef loopback_ctx_t = loopback_ctx;
typedef mask_ctx_t = mask_ctx;
typedef module_ctx_t = module_ctx;
typedef outcheck_ctx_t = outcheck_ctx;
typedef outfile_ctx_t = outfile_ctx;
typedef pidfile_ctx_t = pidfile_ctx;
typedef potfile_ctx_t = potfile_ctx;
typedef restore_ctx_t = restore_ctx;
typedef status_ctx_t = status_ctx;
typedef straight_ctx_t = straight_ctx;
typedef tuning_db_t = tuning_db;
typedef wl_data_t = wl_data;

class thread_param extends ffi.Struct {
  @u32()
  external int tid;

  external ffi.Pointer<hashcat_ctx_t> hashcat_ctx;
}

typedef hashcat_ctx_t = hashcat_ctx;

class hook_thread_param extends ffi.Struct {
  @ffi.Int()
  external int tid;

  @ffi.Int()
  external int tsz;

  external ffi.Pointer<module_ctx_t> module_ctx;

  external ffi.Pointer<status_ctx_t> status_ctx;

  external ffi.Pointer<hc_device_param_t> device_param;

  external ffi.Pointer<ffi.Void> hook_extra_param;

  external ffi.Pointer<ffi.Void> hook_salts_buf;

  @u32()
  external int salt_pos;

  @u64()
  external int pws_cnt;
}

class hc_token extends ffi.Struct {
  @ffi.Int()
  external int token_cnt;

  @ffi.Int()
  external int signatures_cnt;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<ffi.Char>> signatures_buf;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> sep;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Pointer<ffi.Int>> buf;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> len;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> len_min;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> len_max;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int> attr;

  external ffi.Pointer<ffi.Int> opt_buf;

  @ffi.Int()
  external int opt_len;
}

/// hash category is relevant in usage.c (--help screen)
abstract class hash_category {
  static const int HASH_CATEGORY_UNDEFINED = 0;
  static const int HASH_CATEGORY_RAW_HASH = 1;
  static const int HASH_CATEGORY_RAW_HASH_SALTED = 2;
  static const int HASH_CATEGORY_RAW_HASH_AUTHENTICATED = 3;
  static const int HASH_CATEGORY_RAW_CHECKSUM = 4;
  static const int HASH_CATEGORY_RAW_CIPHER_KPA = 5;
  static const int HASH_CATEGORY_GENERIC_KDF = 6;
  static const int HASH_CATEGORY_NETWORK_PROTOCOL = 7;
  static const int HASH_CATEGORY_OS = 8;
  static const int HASH_CATEGORY_DATABASE_SERVER = 9;
  static const int HASH_CATEGORY_NETWORK_SERVER = 10;
  static const int HASH_CATEGORY_EAS = 11;
  static const int HASH_CATEGORY_FDE = 12;
  static const int HASH_CATEGORY_DOCUMENTS = 13;
  static const int HASH_CATEGORY_PASSWORD_MANAGER = 14;
  static const int HASH_CATEGORY_ARCHIVE = 15;
  static const int HASH_CATEGORY_FORUM_SOFTWARE = 16;
  static const int HASH_CATEGORY_OTP = 17;
  static const int HASH_CATEGORY_PLAIN = 18;
  static const int HASH_CATEGORY_FRAMEWORK = 19;
  static const int HASH_CATEGORY_PRIVATE_KEY = 20;
  static const int HASH_CATEGORY_IMS = 21;
  static const int HASH_CATEGORY_CRYPTOCURRENCY_WALLET = 22;
  static const int HASH_CATEGORY_FBE = 23;
}

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int OBJC_ASSOCIATION_ASSIGN = 0;

const int OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1;

const int OBJC_ASSOCIATION_COPY_NONATOMIC = 3;

const int OBJC_ASSOCIATION_RETAIN = 769;

const int OBJC_ASSOCIATION_COPY = 771;

const int noErr = 0;

const int kNilOptions = 0;

const int kVariableLengthArray = 1;

const int kUnknownType = 1061109567;

const int normal = 0;

const int bold = 1;

const int italic = 2;

const int underline = 4;

const int outline = 8;

const int shadow = 16;

const int condense = 32;

const int extend = 64;

const int developStage = 32;

const int alphaStage = 64;

const int betaStage = 96;

const int finalStage = 128;

const int kCFCompareLessThan = -1;

const int kCFCompareEqualTo = 0;

const int kCFCompareGreaterThan = 1;

const int OSUnknownByteOrder = 0;

const int OSLittleEndian = 1;

const int OSBigEndian = 2;

const int CFNotificationSuspensionBehaviorDrop = 1;

const int CFNotificationSuspensionBehaviorCoalesce = 2;

const int CFNotificationSuspensionBehaviorHold = 3;

const int CFNotificationSuspensionBehaviorDeliverImmediately = 4;

const int kCFNotificationDeliverImmediately = 1;

const int kCFNotificationPostToAllSessions = 2;

const int kCFLocaleLanguageDirectionUnknown = 0;

const int kCFLocaleLanguageDirectionLeftToRight = 1;

const int kCFLocaleLanguageDirectionRightToLeft = 2;

const int kCFLocaleLanguageDirectionTopToBottom = 3;

const int kCFLocaleLanguageDirectionBottomToTop = 4;

const int kCFGregorianUnitsYears = 1;

const int kCFGregorianUnitsMonths = 2;

const int kCFGregorianUnitsDays = 4;

const int kCFGregorianUnitsHours = 8;

const int kCFGregorianUnitsMinutes = 16;

const int kCFGregorianUnitsSeconds = 32;

const int kCFGregorianAllUnits = 16777215;

const int kCFDataSearchBackwards = 1;

const int kCFDataSearchAnchored = 2;

const int kCFCharacterSetControl = 1;

const int kCFCharacterSetWhitespace = 2;

const int kCFCharacterSetWhitespaceAndNewline = 3;

const int kCFCharacterSetDecimalDigit = 4;

const int kCFCharacterSetLetter = 5;

const int kCFCharacterSetLowercaseLetter = 6;

const int kCFCharacterSetUppercaseLetter = 7;

const int kCFCharacterSetNonBase = 8;

const int kCFCharacterSetDecomposable = 9;

const int kCFCharacterSetAlphaNumeric = 10;

const int kCFCharacterSetPunctuation = 11;

const int kCFCharacterSetCapitalizedLetter = 13;

const int kCFCharacterSetSymbol = 14;

const int kCFCharacterSetNewline = 15;

const int kCFCharacterSetIllegal = 12;

const int kCFStringEncodingMacRoman = 0;

const int kCFStringEncodingWindowsLatin1 = 1280;

const int kCFStringEncodingISOLatin1 = 513;

const int kCFStringEncodingNextStepLatin = 2817;

const int kCFStringEncodingASCII = 1536;

const int kCFStringEncodingUnicode = 256;

const int kCFStringEncodingUTF8 = 134217984;

const int kCFStringEncodingNonLossyASCII = 3071;

const int kCFStringEncodingUTF16 = 256;

const int kCFStringEncodingUTF16BE = 268435712;

const int kCFStringEncodingUTF16LE = 335544576;

const int kCFStringEncodingUTF32 = 201326848;

const int kCFStringEncodingUTF32BE = 402653440;

const int kCFStringEncodingUTF32LE = 469762304;

const int kCFCompareCaseInsensitive = 1;

const int kCFCompareBackwards = 4;

const int kCFCompareAnchored = 8;

const int kCFCompareNonliteral = 16;

const int kCFCompareLocalized = 32;

const int kCFCompareNumerically = 64;

const int kCFCompareDiacriticInsensitive = 128;

const int kCFCompareWidthInsensitive = 256;

const int kCFCompareForcedOrdering = 512;

const int kCFStringNormalizationFormD = 0;

const int kCFStringNormalizationFormKD = 1;

const int kCFStringNormalizationFormC = 2;

const int kCFStringNormalizationFormKC = 3;

const int kCFTimeZoneNameStyleStandard = 0;

const int kCFTimeZoneNameStyleShortStandard = 1;

const int kCFTimeZoneNameStyleDaylightSaving = 2;

const int kCFTimeZoneNameStyleShortDaylightSaving = 3;

const int kCFTimeZoneNameStyleGeneric = 4;

const int kCFTimeZoneNameStyleShortGeneric = 5;

const int kCFCalendarUnitEra = 2;

const int kCFCalendarUnitYear = 4;

const int kCFCalendarUnitMonth = 8;

const int kCFCalendarUnitDay = 16;

const int kCFCalendarUnitHour = 32;

const int kCFCalendarUnitMinute = 64;

const int kCFCalendarUnitSecond = 128;

const int kCFCalendarUnitWeek = 256;

const int kCFCalendarUnitWeekday = 512;

const int kCFCalendarUnitWeekdayOrdinal = 1024;

const int kCFCalendarUnitQuarter = 2048;

const int kCFCalendarUnitWeekOfMonth = 4096;

const int kCFCalendarUnitWeekOfYear = 8192;

const int kCFCalendarUnitYearForWeekOfYear = 16384;

const int kCFCalendarComponentsWrap = 1;

const int kCFDateFormatterNoStyle = 0;

const int kCFDateFormatterShortStyle = 1;

const int kCFDateFormatterMediumStyle = 2;

const int kCFDateFormatterLongStyle = 3;

const int kCFDateFormatterFullStyle = 4;

const int kCFISO8601DateFormatWithYear = 1;

const int kCFISO8601DateFormatWithMonth = 2;

const int kCFISO8601DateFormatWithWeekOfYear = 4;

const int kCFISO8601DateFormatWithDay = 16;

const int kCFISO8601DateFormatWithTime = 32;

const int kCFISO8601DateFormatWithTimeZone = 64;

const int kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128;

const int kCFISO8601DateFormatWithDashSeparatorInDate = 256;

const int kCFISO8601DateFormatWithColonSeparatorInTime = 512;

const int kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024;

const int kCFISO8601DateFormatWithFractionalSeconds = 2048;

const int kCFISO8601DateFormatWithFullDate = 275;

const int kCFISO8601DateFormatWithFullTime = 1632;

const int kCFISO8601DateFormatWithInternetDateTime = 1907;

const int kCFNumberSInt8Type = 1;

const int kCFNumberSInt16Type = 2;

const int kCFNumberSInt32Type = 3;

const int kCFNumberSInt64Type = 4;

const int kCFNumberFloat32Type = 5;

const int kCFNumberFloat64Type = 6;

const int kCFNumberCharType = 7;

const int kCFNumberShortType = 8;

const int kCFNumberIntType = 9;

const int kCFNumberLongType = 10;

const int kCFNumberLongLongType = 11;

const int kCFNumberFloatType = 12;

const int kCFNumberDoubleType = 13;

const int kCFNumberCFIndexType = 14;

const int kCFNumberNSIntegerType = 15;

const int kCFNumberCGFloatType = 16;

const int kCFNumberMaxType = 16;

const int kCFNumberFormatterNoStyle = 0;

const int kCFNumberFormatterDecimalStyle = 1;

const int kCFNumberFormatterCurrencyStyle = 2;

const int kCFNumberFormatterPercentStyle = 3;

const int kCFNumberFormatterScientificStyle = 4;

const int kCFNumberFormatterSpellOutStyle = 5;

const int kCFNumberFormatterOrdinalStyle = 6;

const int kCFNumberFormatterCurrencyISOCodeStyle = 8;

const int kCFNumberFormatterCurrencyPluralStyle = 9;

const int kCFNumberFormatterCurrencyAccountingStyle = 10;

const int kCFNumberFormatterParseIntegersOnly = 1;

const int kCFNumberFormatterRoundCeiling = 0;

const int kCFNumberFormatterRoundFloor = 1;

const int kCFNumberFormatterRoundDown = 2;

const int kCFNumberFormatterRoundUp = 3;

const int kCFNumberFormatterRoundHalfEven = 4;

const int kCFNumberFormatterRoundHalfDown = 5;

const int kCFNumberFormatterRoundHalfUp = 6;

const int kCFNumberFormatterPadBeforePrefix = 0;

const int kCFNumberFormatterPadAfterPrefix = 1;

const int kCFNumberFormatterPadBeforeSuffix = 2;

const int kCFNumberFormatterPadAfterSuffix = 3;

const int kCFURLPOSIXPathStyle = 0;

const int kCFURLHFSPathStyle = 1;

const int kCFURLWindowsPathStyle = 2;

const int kCFURLComponentScheme = 1;

const int kCFURLComponentNetLocation = 2;

const int kCFURLComponentPath = 3;

const int kCFURLComponentResourceSpecifier = 4;

const int kCFURLComponentUser = 5;

const int kCFURLComponentPassword = 6;

const int kCFURLComponentUserInfo = 7;

const int kCFURLComponentHost = 8;

const int kCFURLComponentPort = 9;

const int kCFURLComponentParameterString = 10;

const int kCFURLComponentQuery = 11;

const int kCFURLComponentFragment = 12;

const int kCFURLBookmarkCreationMinimalBookmarkMask = 512;

const int kCFURLBookmarkCreationSuitableForBookmarkFile = 1024;

const int kCFURLBookmarkCreationWithSecurityScope = 2048;

const int kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;

const int kCFURLBookmarkCreationWithoutImplicitSecurityScope = 536870912;

const int kCFURLBookmarkCreationPreferFileIDResolutionMask = 256;

const int kCFURLBookmarkResolutionWithoutUIMask = 256;

const int kCFURLBookmarkResolutionWithoutMountingMask = 512;

const int kCFURLBookmarkResolutionWithSecurityScope = 1024;

const int kCFURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;

const int kCFBookmarkResolutionWithoutUIMask = 256;

const int kCFBookmarkResolutionWithoutMountingMask = 512;

const int kCFRunLoopRunFinished = 1;

const int kCFRunLoopRunStopped = 2;

const int kCFRunLoopRunTimedOut = 3;

const int kCFRunLoopRunHandledSource = 4;

const int kCFRunLoopEntry = 1;

const int kCFRunLoopBeforeTimers = 2;

const int kCFRunLoopBeforeSources = 4;

const int kCFRunLoopBeforeWaiting = 32;

const int kCFRunLoopAfterWaiting = 64;

const int kCFRunLoopExit = 128;

const int kCFRunLoopAllActivities = 268435455;

const int kCFSocketSuccess = 0;

const int kCFSocketError = -1;

const int kCFSocketTimeout = -2;

const int kCFSocketNoCallBack = 0;

const int kCFSocketReadCallBack = 1;

const int kCFSocketAcceptCallBack = 2;

const int kCFSocketDataCallBack = 3;

const int kCFSocketConnectCallBack = 4;

const int kCFSocketWriteCallBack = 8;

const int kCFSocketAutomaticallyReenableReadCallBack = 1;

const int kCFSocketAutomaticallyReenableAcceptCallBack = 2;

const int kCFSocketAutomaticallyReenableDataCallBack = 3;

const int kCFSocketAutomaticallyReenableWriteCallBack = 8;

const int kCFSocketLeaveErrors = 64;

const int kCFSocketCloseOnInvalidate = 128;

const int DISPATCH_WALLTIME_NOW = -2;

const int kCFStreamStatusNotOpen = 0;

const int kCFStreamStatusOpening = 1;

const int kCFStreamStatusOpen = 2;

const int kCFStreamStatusReading = 3;

const int kCFStreamStatusWriting = 4;

const int kCFStreamStatusAtEnd = 5;

const int kCFStreamStatusClosed = 6;

const int kCFStreamStatusError = 7;

const int kCFStreamEventNone = 0;

const int kCFStreamEventOpenCompleted = 1;

const int kCFStreamEventHasBytesAvailable = 2;

const int kCFStreamEventCanAcceptBytes = 4;

const int kCFStreamEventErrorOccurred = 8;

const int kCFStreamEventEndEncountered = 16;

const int kCFStreamErrorDomainCustom = -1;

const int kCFStreamErrorDomainPOSIX = 1;

const int kCFStreamErrorDomainMacOSStatus = 2;

const int kCFPropertyListImmutable = 0;

const int kCFPropertyListMutableContainers = 1;

const int kCFPropertyListMutableContainersAndLeaves = 2;

const int kCFPropertyListOpenStepFormat = 1;

const int kCFPropertyListXMLFormat_v1_0 = 100;

const int kCFPropertyListBinaryFormat_v1_0 = 200;

const int kCFPropertyListReadCorruptError = 3840;

const int kCFPropertyListReadUnknownVersionError = 3841;

const int kCFPropertyListReadStreamError = 3842;

const int kCFPropertyListWriteStreamError = 3851;

const int kCFStringEncodingMacJapanese = 1;

const int kCFStringEncodingMacChineseTrad = 2;

const int kCFStringEncodingMacKorean = 3;

const int kCFStringEncodingMacArabic = 4;

const int kCFStringEncodingMacHebrew = 5;

const int kCFStringEncodingMacGreek = 6;

const int kCFStringEncodingMacCyrillic = 7;

const int kCFStringEncodingMacDevanagari = 9;

const int kCFStringEncodingMacGurmukhi = 10;

const int kCFStringEncodingMacGujarati = 11;

const int kCFStringEncodingMacOriya = 12;

const int kCFStringEncodingMacBengali = 13;

const int kCFStringEncodingMacTamil = 14;

const int kCFStringEncodingMacTelugu = 15;

const int kCFStringEncodingMacKannada = 16;

const int kCFStringEncodingMacMalayalam = 17;

const int kCFStringEncodingMacSinhalese = 18;

const int kCFStringEncodingMacBurmese = 19;

const int kCFStringEncodingMacKhmer = 20;

const int kCFStringEncodingMacThai = 21;

const int kCFStringEncodingMacLaotian = 22;

const int kCFStringEncodingMacGeorgian = 23;

const int kCFStringEncodingMacArmenian = 24;

const int kCFStringEncodingMacChineseSimp = 25;

const int kCFStringEncodingMacTibetan = 26;

const int kCFStringEncodingMacMongolian = 27;

const int kCFStringEncodingMacEthiopic = 28;

const int kCFStringEncodingMacCentralEurRoman = 29;

const int kCFStringEncodingMacVietnamese = 30;

const int kCFStringEncodingMacExtArabic = 31;

const int kCFStringEncodingMacSymbol = 33;

const int kCFStringEncodingMacDingbats = 34;

const int kCFStringEncodingMacTurkish = 35;

const int kCFStringEncodingMacCroatian = 36;

const int kCFStringEncodingMacIcelandic = 37;

const int kCFStringEncodingMacRomanian = 38;

const int kCFStringEncodingMacCeltic = 39;

const int kCFStringEncodingMacGaelic = 40;

const int kCFStringEncodingMacFarsi = 140;

const int kCFStringEncodingMacUkrainian = 152;

const int kCFStringEncodingMacInuit = 236;

const int kCFStringEncodingMacVT100 = 252;

const int kCFStringEncodingMacHFS = 255;

const int kCFStringEncodingISOLatin2 = 514;

const int kCFStringEncodingISOLatin3 = 515;

const int kCFStringEncodingISOLatin4 = 516;

const int kCFStringEncodingISOLatinCyrillic = 517;

const int kCFStringEncodingISOLatinArabic = 518;

const int kCFStringEncodingISOLatinGreek = 519;

const int kCFStringEncodingISOLatinHebrew = 520;

const int kCFStringEncodingISOLatin5 = 521;

const int kCFStringEncodingISOLatin6 = 522;

const int kCFStringEncodingISOLatinThai = 523;

const int kCFStringEncodingISOLatin7 = 525;

const int kCFStringEncodingISOLatin8 = 526;

const int kCFStringEncodingISOLatin9 = 527;

const int kCFStringEncodingISOLatin10 = 528;

const int kCFStringEncodingDOSLatinUS = 1024;

const int kCFStringEncodingDOSGreek = 1029;

const int kCFStringEncodingDOSBalticRim = 1030;

const int kCFStringEncodingDOSLatin1 = 1040;

const int kCFStringEncodingDOSGreek1 = 1041;

const int kCFStringEncodingDOSLatin2 = 1042;

const int kCFStringEncodingDOSCyrillic = 1043;

const int kCFStringEncodingDOSTurkish = 1044;

const int kCFStringEncodingDOSPortuguese = 1045;

const int kCFStringEncodingDOSIcelandic = 1046;

const int kCFStringEncodingDOSHebrew = 1047;

const int kCFStringEncodingDOSCanadianFrench = 1048;

const int kCFStringEncodingDOSArabic = 1049;

const int kCFStringEncodingDOSNordic = 1050;

const int kCFStringEncodingDOSRussian = 1051;

const int kCFStringEncodingDOSGreek2 = 1052;

const int kCFStringEncodingDOSThai = 1053;

const int kCFStringEncodingDOSJapanese = 1056;

const int kCFStringEncodingDOSChineseSimplif = 1057;

const int kCFStringEncodingDOSKorean = 1058;

const int kCFStringEncodingDOSChineseTrad = 1059;

const int kCFStringEncodingWindowsLatin2 = 1281;

const int kCFStringEncodingWindowsCyrillic = 1282;

const int kCFStringEncodingWindowsGreek = 1283;

const int kCFStringEncodingWindowsLatin5 = 1284;

const int kCFStringEncodingWindowsHebrew = 1285;

const int kCFStringEncodingWindowsArabic = 1286;

const int kCFStringEncodingWindowsBalticRim = 1287;

const int kCFStringEncodingWindowsVietnamese = 1288;

const int kCFStringEncodingWindowsKoreanJohab = 1296;

const int kCFStringEncodingANSEL = 1537;

const int kCFStringEncodingJIS_X0201_76 = 1568;

const int kCFStringEncodingJIS_X0208_83 = 1569;

const int kCFStringEncodingJIS_X0208_90 = 1570;

const int kCFStringEncodingJIS_X0212_90 = 1571;

const int kCFStringEncodingJIS_C6226_78 = 1572;

const int kCFStringEncodingShiftJIS_X0213 = 1576;

const int kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577;

const int kCFStringEncodingGB_2312_80 = 1584;

const int kCFStringEncodingGBK_95 = 1585;

const int kCFStringEncodingGB_18030_2000 = 1586;

const int kCFStringEncodingKSC_5601_87 = 1600;

const int kCFStringEncodingKSC_5601_92_Johab = 1601;

const int kCFStringEncodingCNS_11643_92_P1 = 1617;

const int kCFStringEncodingCNS_11643_92_P2 = 1618;

const int kCFStringEncodingCNS_11643_92_P3 = 1619;

const int kCFStringEncodingISO_2022_JP = 2080;

const int kCFStringEncodingISO_2022_JP_2 = 2081;

const int kCFStringEncodingISO_2022_JP_1 = 2082;

const int kCFStringEncodingISO_2022_JP_3 = 2083;

const int kCFStringEncodingISO_2022_CN = 2096;

const int kCFStringEncodingISO_2022_CN_EXT = 2097;

const int kCFStringEncodingISO_2022_KR = 2112;

const int kCFStringEncodingEUC_JP = 2336;

const int kCFStringEncodingEUC_CN = 2352;

const int kCFStringEncodingEUC_TW = 2353;

const int kCFStringEncodingEUC_KR = 2368;

const int kCFStringEncodingShiftJIS = 2561;

const int kCFStringEncodingKOI8_R = 2562;

const int kCFStringEncodingBig5 = 2563;

const int kCFStringEncodingMacRomanLatin1 = 2564;

const int kCFStringEncodingHZ_GB_2312 = 2565;

const int kCFStringEncodingBig5_HKSCS_1999 = 2566;

const int kCFStringEncodingVISCII = 2567;

const int kCFStringEncodingKOI8_U = 2568;

const int kCFStringEncodingBig5_E = 2569;

const int kCFStringEncodingNextStepJapanese = 2818;

const int kCFStringEncodingEBCDIC_US = 3073;

const int kCFStringEncodingEBCDIC_CP037 = 3074;

const int kCFStringEncodingUTF7 = 67109120;

const int kCFStringEncodingUTF7_IMAP = 2576;

const int kCFStringEncodingShiftJIS_X0213_00 = 1576;

const int kCFURLUnknownError = -10;

const int kCFURLUnknownSchemeError = -11;

const int kCFURLResourceNotFoundError = -12;

const int kCFURLResourceAccessViolationError = -13;

const int kCFURLRemoteHostUnavailableError = -14;

const int kCFURLImproperArgumentsError = -15;

const int kCFURLUnknownPropertyKeyError = -16;

const int kCFURLPropertyKeyUnavailableError = -17;

const int kCFURLTimeoutError = -18;

const int kCFBundleExecutableArchitectureI386 = 7;

const int kCFBundleExecutableArchitecturePPC = 18;

const int kCFBundleExecutableArchitectureX86_64 = 16777223;

const int kCFBundleExecutableArchitecturePPC64 = 16777234;

const int kCFBundleExecutableArchitectureARM64 = 16777228;

const int kCFMessagePortSuccess = 0;

const int kCFMessagePortSendTimeout = -1;

const int kCFMessagePortReceiveTimeout = -2;

const int kCFMessagePortIsInvalid = -3;

const int kCFMessagePortTransportError = -4;

const int kCFMessagePortBecameInvalidError = -5;

const int kCFURLEnumeratorDefaultBehavior = 0;

const int kCFURLEnumeratorDescendRecursively = 1;

const int kCFURLEnumeratorSkipInvisibles = 2;

const int kCFURLEnumeratorGenerateFileReferenceURLs = 4;

const int kCFURLEnumeratorSkipPackageContents = 8;

const int kCFURLEnumeratorIncludeDirectoriesPreOrder = 16;

const int kCFURLEnumeratorIncludeDirectoriesPostOrder = 32;

const int kCFURLEnumeratorGenerateRelativePathURLs = 64;

const int kCFURLEnumeratorSuccess = 1;

const int kCFURLEnumeratorEnd = 2;

const int kCFURLEnumeratorError = 3;

const int kCFURLEnumeratorDirectoryPostOrderSuccess = 4;

const int kCFFileSecurityClearOwner = 1;

const int kCFFileSecurityClearGroup = 2;

const int kCFFileSecurityClearMode = 4;

const int kCFFileSecurityClearOwnerUUID = 8;

const int kCFFileSecurityClearGroupUUID = 16;

const int kCFFileSecurityClearAccessControlList = 32;

const int kCFStringTokenizerUnitWord = 0;

const int kCFStringTokenizerUnitSentence = 1;

const int kCFStringTokenizerUnitParagraph = 2;

const int kCFStringTokenizerUnitLineBreak = 3;

const int kCFStringTokenizerUnitWordBoundary = 4;

const int kCFStringTokenizerAttributeLatinTranscription = 65536;

const int kCFStringTokenizerAttributeLanguage = 131072;

const int kCFStringTokenizerTokenNone = 0;

const int kCFStringTokenizerTokenNormal = 1;

const int kCFStringTokenizerTokenHasSubTokensMask = 2;

const int kCFStringTokenizerTokenHasDerivedSubTokensMask = 4;

const int kCFStringTokenizerTokenHasHasNumbersMask = 8;

const int kCFStringTokenizerTokenHasNonLettersMask = 16;

const int kCFStringTokenizerTokenIsCJWordMask = 32;

const int kCFFileDescriptorReadCallBack = 1;

const int kCFFileDescriptorWriteCallBack = 2;

const int kCFUserNotificationStopAlertLevel = 0;

const int kCFUserNotificationNoteAlertLevel = 1;

const int kCFUserNotificationCautionAlertLevel = 2;

const int kCFUserNotificationPlainAlertLevel = 3;

const int kCFUserNotificationDefaultResponse = 0;

const int kCFUserNotificationAlternateResponse = 1;

const int kCFUserNotificationOtherResponse = 2;

const int kCFUserNotificationCancelResponse = 3;

const int kCFUserNotificationNoDefaultButtonFlag = 32;

const int kCFUserNotificationUseRadioButtonsFlag = 64;

const int kCFXMLNodeCurrentVersion = 1;

const int kCFXMLNodeTypeDocument = 1;

const int kCFXMLNodeTypeElement = 2;

const int kCFXMLNodeTypeAttribute = 3;

const int kCFXMLNodeTypeProcessingInstruction = 4;

const int kCFXMLNodeTypeComment = 5;

const int kCFXMLNodeTypeText = 6;

const int kCFXMLNodeTypeCDATASection = 7;

const int kCFXMLNodeTypeDocumentFragment = 8;

const int kCFXMLNodeTypeEntity = 9;

const int kCFXMLNodeTypeEntityReference = 10;

const int kCFXMLNodeTypeDocumentType = 11;

const int kCFXMLNodeTypeWhitespace = 12;

const int kCFXMLNodeTypeNotation = 13;

const int kCFXMLNodeTypeElementTypeDeclaration = 14;

const int kCFXMLNodeTypeAttributeListDeclaration = 15;

const int kCFXMLEntityTypeParameter = 0;

const int kCFXMLEntityTypeParsedInternal = 1;

const int kCFXMLEntityTypeParsedExternal = 2;

const int kCFXMLEntityTypeUnparsed = 3;

const int kCFXMLEntityTypeCharacter = 4;

const int kCFXMLParserValidateDocument = 1;

const int kCFXMLParserSkipMetaData = 2;

const int kCFXMLParserReplacePhysicalEntities = 4;

const int kCFXMLParserSkipWhitespace = 8;

const int kCFXMLParserResolveExternalEntities = 16;

const int kCFXMLParserAddImpliedAttributes = 32;

const int kCFXMLParserAllOptions = 16777215;

const int kCFXMLParserNoOptions = 0;

const int kCFXMLStatusParseNotBegun = -2;

const int kCFXMLStatusParseInProgress = -1;

const int kCFXMLStatusParseSuccessful = 0;

const int kCFXMLErrorUnexpectedEOF = 1;

const int kCFXMLErrorUnknownEncoding = 2;

const int kCFXMLErrorEncodingConversionFailure = 3;

const int kCFXMLErrorMalformedProcessingInstruction = 4;

const int kCFXMLErrorMalformedDTD = 5;

const int kCFXMLErrorMalformedName = 6;

const int kCFXMLErrorMalformedCDSect = 7;

const int kCFXMLErrorMalformedCloseTag = 8;

const int kCFXMLErrorMalformedStartTag = 9;

const int kCFXMLErrorMalformedDocument = 10;

const int kCFXMLErrorElementlessDocument = 11;

const int kCFXMLErrorMalformedComment = 12;

const int kCFXMLErrorMalformedCharacterReference = 13;

const int kCFXMLErrorMalformedParsedCharacterData = 14;

const int kCFXMLErrorNoData = 15;

const int kIODefaultMemoryType = 0;

const int kIODefaultCache = 0;

const int kIOInhibitCache = 1;

const int kIOWriteThruCache = 2;

const int kIOCopybackCache = 3;

const int kIOWriteCombineCache = 4;

const int kIOCopybackInnerCache = 5;

const int kIOPostedWrite = 6;

const int kIORealTimeCache = 7;

const int kIOPostedReordered = 8;

const int kIOPostedCombinedReordered = 9;

const int kIOMapAnywhere = 1;

const int kIOMapCacheMask = 3840;

const int kIOMapCacheShift = 8;

const int kIOMapDefaultCache = 0;

const int kIOMapInhibitCache = 256;

const int kIOMapWriteThruCache = 512;

const int kIOMapCopybackCache = 768;

const int kIOMapWriteCombineCache = 1024;

const int kIOMapCopybackInnerCache = 1280;

const int kIOMapPostedWrite = 1536;

const int kIOMapRealTimeCache = 1792;

const int kIOMapPostedReordered = 2048;

const int kIOMapPostedCombinedReordered = 2304;

const int kIOMapUserOptionsMask = 4095;

const int kIOMapReadOnly = 4096;

const int kIOMapStatic = 16777216;

const int kIOMapReference = 33554432;

const int kIOMapUnique = 67108864;

const int kIOMapPrefault = 268435456;

const int kIOMapOverwrite = 536870912;

const int kIOMapGuardedMask = -1073741824;

const int kIOMapGuardedSmall = 1073741824;

const int kIOMapGuardedLarge = -2147483648;

const int kNanosecondScale = 1;

const int kMicrosecondScale = 1000;

const int kMillisecondScale = 1000000;

const int kSecondScale = 1000000000;

const int kTickScale = 10000000;

const int kIOConnectMethodVarOutputSize = -3;

const int kIOMaxBusStall40usec = 40000;

const int kIOMaxBusStall30usec = 30000;

const int kIOMaxBusStall25usec = 25000;

const int kIOMaxBusStall20usec = 20000;

const int kIOMaxBusStall10usec = 10000;

const int kIOMaxBusStall5usec = 5000;

const int kIOMaxBusStallNone = 0;

const int kFirstIOKitNotificationType = 100;

const int kIOServicePublishNotificationType = 100;

const int kIOServiceMatchedNotificationType = 101;

const int kIOServiceTerminatedNotificationType = 102;

const int kIOAsyncCompletionNotificationType = 150;

const int kIOServiceMessageNotificationType = 160;

const int kLastIOKitNotificationType = 199;

const int kIOKitNoticationTypeMask = 4095;

const int kIOKitNoticationTypeSizeAdjShift = 30;

const int kIOKitNoticationMsgSizeMask = 3;

const int kOSNotificationMessageID = 53;

const int kOSAsyncCompleteMessageID = 57;

const int kMaxAsyncArgs = 16;

const int kIOAsyncReservedIndex = 0;

const int kIOAsyncReservedCount = 1;

const int kIOAsyncCalloutFuncIndex = 1;

const int kIOAsyncCalloutRefconIndex = 2;

const int kIOAsyncCalloutCount = 3;

const int kIOMatchingCalloutFuncIndex = 1;

const int kIOMatchingCalloutRefconIndex = 2;

const int kIOMatchingCalloutCount = 3;

const int kIOInterestCalloutFuncIndex = 1;

const int kIOInterestCalloutRefconIndex = 2;

const int kIOInterestCalloutServiceIndex = 3;

const int kIOInterestCalloutCount = 4;

const int kOSAsyncRef64Count = 8;

const int kOSAsyncRef64Size = 64;

const int kOSAsyncRefCount = 8;

const int kOSAsyncRefSize = 32;

const int kIOServiceInteractionAllowed = 1;

const int kIORegistryIterateRecursively = 1;

const int kIORegistryIterateParents = 2;

const String PROGNAME = 'hashcat';

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200112;

const int _FILE_OFFSET_BITS = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int _FORTIFY_SOURCE = 2;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int NULL = 0;

const int NOMINMAX = 1;

const int PW_MIN = 0;

const int PW_MAX = 256;

const int PW_MAX_OLD = 55;

const int SALT_MIN = 0;

const int SALT_MAX = 256;

const int SALT_MAX_OLD = 51;

const int HCBUFSIZ_TINY = 4096;

const int HCBUFSIZ_SMALL = 8192;

const int HCBUFSIZ_LARGE = 16777216;

const int CPT_CACHE = 131072;

const int PARAMCNT = 64;

const int DEVICES_MAX = 128;

const int EXEC_CACHE = 128;

const int SPEED_CACHE = 4096;

const int SPEED_MAXAGE = 4096;

const int EXPECTED_ITERATIONS = 10000;

const String EOL = '\n';

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int NBBY = 8;

const int FD_SETSIZE = 1024;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int ACCESSPERMS = 511;

const int ALLPERMS = 4095;

const int DEFFILEMODE = 438;

const int S_BLKSIZE = 512;

const int UF_SETTABLE = 65535;

const int UF_NODUMP = 1;

const int UF_IMMUTABLE = 2;

const int UF_APPEND = 4;

const int UF_OPAQUE = 8;

const int UF_COMPRESSED = 32;

const int UF_TRACKED = 64;

const int UF_DATAVAULT = 128;

const int UF_HIDDEN = 32768;

const int SF_SUPPORTED = 10420224;

const int SF_SETTABLE = 1073676288;

const int SF_SYNTHETIC = 3221225472;

const int SF_ARCHIVED = 65536;

const int SF_IMMUTABLE = 131072;

const int SF_APPEND = 262144;

const int SF_RESTRICTED = 524288;

const int SF_NOUNLINK = 1048576;

const int SF_FIRMLINK = 8388608;

const int SF_DATALESS = 1073741824;

const int EF_MAY_SHARE_BLOCKS = 1;

const int EF_NO_XATTRS = 2;

const int EF_IS_SYNC_ROOT = 4;

const int EF_IS_PURGEABLE = 8;

const int EF_IS_SPARSE = 16;

const int EF_IS_SYNTHETIC = 32;

const int UTIME_NOW = -1;

const int UTIME_OMIT = -2;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int DST_NONE = 0;

const int DST_USA = 1;

const int DST_AUST = 2;

const int DST_WET = 3;

const int DST_MET = 4;

const int DST_EET = 5;

const int DST_CAN = 6;

const int TIME_UTC = 1;

const int _POSIX_VERSION = 200112;

const int _POSIX2_VERSION = 200112;

const int _POSIX_VDISABLE = 255;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int F_OK = 0;

const int X_OK = 1;

const int W_OK = 2;

const int R_OK = 4;

const int _READ_OK = 512;

const int _WRITE_OK = 1024;

const int _EXECUTE_OK = 2048;

const int _DELETE_OK = 4096;

const int _APPEND_OK = 8192;

const int _RMFILE_OK = 16384;

const int _RATTR_OK = 32768;

const int _WATTR_OK = 65536;

const int _REXT_OK = 131072;

const int _WEXT_OK = 262144;

const int _RPERM_OK = 524288;

const int _WPERM_OK = 1048576;

const int _CHOWN_OK = 2097152;

const int _ACCESS_EXTENDED_MASK = 4193792;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int ACCESSX_MAX_DESCRIPTORS = 100;

const int ACCESSX_MAX_TABLESIZE = 16384;

const int _PC_LINK_MAX = 1;

const int _PC_MAX_CANON = 2;

const int _PC_MAX_INPUT = 3;

const int _PC_NAME_MAX = 4;

const int _PC_PATH_MAX = 5;

const int _PC_PIPE_BUF = 6;

const int _PC_CHOWN_RESTRICTED = 7;

const int _PC_NO_TRUNC = 8;

const int _PC_VDISABLE = 9;

const int _PC_NAME_CHARS_MAX = 10;

const int _PC_CASE_SENSITIVE = 11;

const int _PC_CASE_PRESERVING = 12;

const int _PC_EXTENDED_SECURITY_NP = 13;

const int _PC_AUTH_OPAQUE_NP = 14;

const int _PC_2_SYMLINKS = 15;

const int _PC_ALLOC_SIZE_MIN = 16;

const int _PC_ASYNC_IO = 17;

const int _PC_FILESIZEBITS = 18;

const int _PC_PRIO_IO = 19;

const int _PC_REC_INCR_XFER_SIZE = 20;

const int _PC_REC_MAX_XFER_SIZE = 21;

const int _PC_REC_MIN_XFER_SIZE = 22;

const int _PC_REC_XFER_ALIGN = 23;

const int _PC_SYMLINK_MAX = 24;

const int _PC_SYNC_IO = 25;

const int _PC_XATTR_SIZE_BITS = 26;

const int _PC_MIN_HOLE_SIZE = 27;

const int _CS_PATH = 1;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _XOPEN_VERSION = 600;

const int _XOPEN_XCU_VERSION = 4;

const int _POSIX_ADVISORY_INFO = -1;

const int _POSIX_ASYNCHRONOUS_IO = -1;

const int _POSIX_BARRIERS = -1;

const int _POSIX_CHOWN_RESTRICTED = 200112;

const int _POSIX_CLOCK_SELECTION = -1;

const int _POSIX_CPUTIME = -1;

const int _POSIX_FSYNC = 200112;

const int _POSIX_IPV6 = 200112;

const int _POSIX_JOB_CONTROL = 200112;

const int _POSIX_MAPPED_FILES = 200112;

const int _POSIX_MEMLOCK = -1;

const int _POSIX_MEMLOCK_RANGE = -1;

const int _POSIX_MEMORY_PROTECTION = 200112;

const int _POSIX_MESSAGE_PASSING = -1;

const int _POSIX_MONOTONIC_CLOCK = -1;

const int _POSIX_NO_TRUNC = 200112;

const int _POSIX_PRIORITIZED_IO = -1;

const int _POSIX_PRIORITY_SCHEDULING = -1;

const int _POSIX_RAW_SOCKETS = -1;

const int _POSIX_READER_WRITER_LOCKS = 200112;

const int _POSIX_REALTIME_SIGNALS = -1;

const int _POSIX_REGEXP = 200112;

const int _POSIX_SAVED_IDS = 200112;

const int _POSIX_SEMAPHORES = -1;

const int _POSIX_SHARED_MEMORY_OBJECTS = -1;

const int _POSIX_SHELL = 200112;

const int _POSIX_SPAWN = -1;

const int _POSIX_SPIN_LOCKS = -1;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SYNCHRONIZED_IO = -1;

const int _POSIX_THREAD_ATTR_STACKADDR = 200112;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200112;

const int _POSIX_THREAD_CPUTIME = -1;

const int _POSIX_THREAD_PRIO_INHERIT = -1;

const int _POSIX_THREAD_PRIO_PROTECT = -1;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = -1;

const int _POSIX_THREAD_PROCESS_SHARED = 200112;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREADS = 200112;

const int _POSIX_TIMEOUTS = -1;

const int _POSIX_TIMERS = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX2_C_BIND = 200112;

const int _POSIX2_C_DEV = 200112;

const int _POSIX2_CHAR_TERM = 200112;

const int _POSIX2_FORT_DEV = -1;

const int _POSIX2_FORT_RUN = 200112;

const int _POSIX2_LOCALEDEF = 200112;

const int _POSIX2_PBS = -1;

const int _POSIX2_PBS_ACCOUNTING = -1;

const int _POSIX2_PBS_CHECKPOINT = -1;

const int _POSIX2_PBS_LOCATE = -1;

const int _POSIX2_PBS_MESSAGE = -1;

const int _POSIX2_PBS_TRACK = -1;

const int _POSIX2_SW_DEV = 200112;

const int _POSIX2_UPE = 200112;

const int __ILP32_OFF32 = -1;

const int __ILP32_OFFBIG = -1;

const int __LP64_OFF64 = 1;

const int __LPBIG_OFFBIG = 1;

const int _POSIX_V6_ILP32_OFF32 = -1;

const int _POSIX_V6_ILP32_OFFBIG = -1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = 1;

const int _POSIX_V7_ILP32_OFF32 = -1;

const int _POSIX_V7_ILP32_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = 1;

const int _V6_ILP32_OFF32 = -1;

const int _V6_ILP32_OFFBIG = -1;

const int _V6_LP64_OFF64 = 1;

const int _V6_LPBIG_OFFBIG = 1;

const int _XBS5_ILP32_OFF32 = -1;

const int _XBS5_ILP32_OFFBIG = -1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = 1;

const int _XOPEN_CRYPT = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = -1;

const int _XOPEN_REALTIME = -1;

const int _XOPEN_REALTIME_THREADS = -1;

const int _XOPEN_SHM = 1;

const int _XOPEN_STREAMS = -1;

const int _XOPEN_UNIX = 1;

const int _SC_ARG_MAX = 1;

const int _SC_CHILD_MAX = 2;

const int _SC_CLK_TCK = 3;

const int _SC_NGROUPS_MAX = 4;

const int _SC_OPEN_MAX = 5;

const int _SC_JOB_CONTROL = 6;

const int _SC_SAVED_IDS = 7;

const int _SC_VERSION = 8;

const int _SC_BC_BASE_MAX = 9;

const int _SC_BC_DIM_MAX = 10;

const int _SC_BC_SCALE_MAX = 11;

const int _SC_BC_STRING_MAX = 12;

const int _SC_COLL_WEIGHTS_MAX = 13;

const int _SC_EXPR_NEST_MAX = 14;

const int _SC_LINE_MAX = 15;

const int _SC_RE_DUP_MAX = 16;

const int _SC_2_VERSION = 17;

const int _SC_2_C_BIND = 18;

const int _SC_2_C_DEV = 19;

const int _SC_2_CHAR_TERM = 20;

const int _SC_2_FORT_DEV = 21;

const int _SC_2_FORT_RUN = 22;

const int _SC_2_LOCALEDEF = 23;

const int _SC_2_SW_DEV = 24;

const int _SC_2_UPE = 25;

const int _SC_STREAM_MAX = 26;

const int _SC_TZNAME_MAX = 27;

const int _SC_ASYNCHRONOUS_IO = 28;

const int _SC_PAGESIZE = 29;

const int _SC_MEMLOCK = 30;

const int _SC_MEMLOCK_RANGE = 31;

const int _SC_MEMORY_PROTECTION = 32;

const int _SC_MESSAGE_PASSING = 33;

const int _SC_PRIORITIZED_IO = 34;

const int _SC_PRIORITY_SCHEDULING = 35;

const int _SC_REALTIME_SIGNALS = 36;

const int _SC_SEMAPHORES = 37;

const int _SC_FSYNC = 38;

const int _SC_SHARED_MEMORY_OBJECTS = 39;

const int _SC_SYNCHRONIZED_IO = 40;

const int _SC_TIMERS = 41;

const int _SC_AIO_LISTIO_MAX = 42;

const int _SC_AIO_MAX = 43;

const int _SC_AIO_PRIO_DELTA_MAX = 44;

const int _SC_DELAYTIMER_MAX = 45;

const int _SC_MQ_OPEN_MAX = 46;

const int _SC_MAPPED_FILES = 47;

const int _SC_RTSIG_MAX = 48;

const int _SC_SEM_NSEMS_MAX = 49;

const int _SC_SEM_VALUE_MAX = 50;

const int _SC_SIGQUEUE_MAX = 51;

const int _SC_TIMER_MAX = 52;

const int _SC_NPROCESSORS_CONF = 57;

const int _SC_NPROCESSORS_ONLN = 58;

const int _SC_2_PBS = 59;

const int _SC_2_PBS_ACCOUNTING = 60;

const int _SC_2_PBS_CHECKPOINT = 61;

const int _SC_2_PBS_LOCATE = 62;

const int _SC_2_PBS_MESSAGE = 63;

const int _SC_2_PBS_TRACK = 64;

const int _SC_ADVISORY_INFO = 65;

const int _SC_BARRIERS = 66;

const int _SC_CLOCK_SELECTION = 67;

const int _SC_CPUTIME = 68;

const int _SC_FILE_LOCKING = 69;

const int _SC_GETGR_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX = 71;

const int _SC_HOST_NAME_MAX = 72;

const int _SC_LOGIN_NAME_MAX = 73;

const int _SC_MONOTONIC_CLOCK = 74;

const int _SC_MQ_PRIO_MAX = 75;

const int _SC_READER_WRITER_LOCKS = 76;

const int _SC_REGEXP = 77;

const int _SC_SHELL = 78;

const int _SC_SPAWN = 79;

const int _SC_SPIN_LOCKS = 80;

const int _SC_SPORADIC_SERVER = 81;

const int _SC_THREAD_ATTR_STACKADDR = 82;

const int _SC_THREAD_ATTR_STACKSIZE = 83;

const int _SC_THREAD_CPUTIME = 84;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;

const int _SC_THREAD_KEYS_MAX = 86;

const int _SC_THREAD_PRIO_INHERIT = 87;

const int _SC_THREAD_PRIO_PROTECT = 88;

const int _SC_THREAD_PRIORITY_SCHEDULING = 89;

const int _SC_THREAD_PROCESS_SHARED = 90;

const int _SC_THREAD_SAFE_FUNCTIONS = 91;

const int _SC_THREAD_SPORADIC_SERVER = 92;

const int _SC_THREAD_STACK_MIN = 93;

const int _SC_THREAD_THREADS_MAX = 94;

const int _SC_TIMEOUTS = 95;

const int _SC_THREADS = 96;

const int _SC_TRACE = 97;

const int _SC_TRACE_EVENT_FILTER = 98;

const int _SC_TRACE_INHERIT = 99;

const int _SC_TRACE_LOG = 100;

const int _SC_TTY_NAME_MAX = 101;

const int _SC_TYPED_MEMORY_OBJECTS = 102;

const int _SC_V6_ILP32_OFF32 = 103;

const int _SC_V6_ILP32_OFFBIG = 104;

const int _SC_V6_LP64_OFF64 = 105;

const int _SC_V6_LPBIG_OFFBIG = 106;

const int _SC_IPV6 = 118;

const int _SC_RAW_SOCKETS = 119;

const int _SC_SYMLOOP_MAX = 120;

const int _SC_ATEXIT_MAX = 107;

const int _SC_IOV_MAX = 56;

const int _SC_PAGE_SIZE = 29;

const int _SC_XOPEN_CRYPT = 108;

const int _SC_XOPEN_ENH_I18N = 109;

const int _SC_XOPEN_LEGACY = 110;

const int _SC_XOPEN_REALTIME = 111;

const int _SC_XOPEN_REALTIME_THREADS = 112;

const int _SC_XOPEN_SHM = 113;

const int _SC_XOPEN_STREAMS = 114;

const int _SC_XOPEN_UNIX = 115;

const int _SC_XOPEN_VERSION = 116;

const int _SC_XOPEN_XCU_VERSION = 121;

const int _SC_XBS5_ILP32_OFF32 = 122;

const int _SC_XBS5_ILP32_OFFBIG = 123;

const int _SC_XBS5_LP64_OFF64 = 124;

const int _SC_XBS5_LPBIG_OFFBIG = 125;

const int _SC_SS_REPL_MAX = 126;

const int _SC_TRACE_EVENT_NAME_MAX = 127;

const int _SC_TRACE_NAME_MAX = 128;

const int _SC_TRACE_SYS_MAX = 129;

const int _SC_TRACE_USER_EVENT_MAX = 130;

const int _SC_PASS_MAX = 131;

const int _SC_PHYS_PAGES = 200;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 10;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 20;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;

const int _CS_XBS5_ILP32_OFF32_LIBS = 22;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 26;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 28;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 29;

const int _CS_XBS5_LP64_OFF64_LIBS = 30;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;

const int _CS_DARWIN_USER_DIR = 65536;

const int _CS_DARWIN_USER_TEMP_DIR = 65537;

const int _CS_DARWIN_USER_CACHE_DIR = 65538;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int SYNC_VOLUME_FULLSYNC = 1;

const int SYNC_VOLUME_WAIT = 2;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const double INFINITY = double.infinity;

const int FP_NAN = 1;

const int FP_INFINITE = 2;

const int FP_ZERO = 3;

const int FP_NORMAL = 4;

const int FP_SUBNORMAL = 5;

const int FP_SUPERNORMAL = 6;

const int FP_FAST_FMA = 1;

const int FP_FAST_FMAF = 1;

const int FP_FAST_FMAL = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const double MAXFLOAT = 3.4028234663852886e+38;

const int FP_SNAN = 1;

const int FP_QNAN = 1;

const double HUGE = 3.4028234663852886e+38;

const double X_TLOSS = 14148475504056880.0;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int _LIBICONV_VERSION = 267;

const int ICONV_TRIVIALP = 0;

const int ICONV_GET_TRANSLITERATE = 1;

const int ICONV_SET_TRANSLITERATE = 2;

const int ICONV_GET_DISCARD_ILSEQ = 3;

const int ICONV_SET_DISCARD_ILSEQ = 4;

const int ICONV_SET_HOOKS = 5;

const int ICONV_SET_FALLBACKS = 6;

const int _PTHREAD_MUTEX_SIG_init = 850045863;

const int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 850045857;

const int _PTHREAD_RECURSIVE_MUTEX_SIG_init = 850045858;

const int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 850045859;

const int _PTHREAD_COND_SIG_init = 1018212795;

const int _PTHREAD_ONCE_SIG_init = 816954554;

const int _PTHREAD_RWLOCK_SIG_init = 766030772;

const int SCHED_OTHER = 1;

const int SCHED_FIFO = 4;

const int SCHED_RR = 2;

const int __SCHED_PARAM_SIZE__ = 4;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int PTHREAD_CREATE_JOINABLE = 1;

const int PTHREAD_CREATE_DETACHED = 2;

const int PTHREAD_INHERIT_SCHED = 1;

const int PTHREAD_EXPLICIT_SCHED = 2;

const int PTHREAD_CANCEL_ENABLE = 1;

const int PTHREAD_CANCEL_DISABLE = 0;

const int PTHREAD_CANCEL_DEFERRED = 2;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 0;

const int PTHREAD_SCOPE_SYSTEM = 1;

const int PTHREAD_SCOPE_PROCESS = 2;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_PROCESS_PRIVATE = 2;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_ERRORCHECK = 1;

const int PTHREAD_MUTEX_RECURSIVE = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;

const int PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_NOFOLLOW_ANY = 536870912;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int AT_SYMLINK_NOFOLLOW_ANY = 2048;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int F_ADDFILESIGS_INFO = 103;

const int F_ADDFILESUPPL = 104;

const int F_GETSIGSINFO = 105;

const int F_FSRESERVED = 106;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_FSIGNATURES_CDHASH_LEN = 20;

const int GETSIGSINFO_PLATFORM_BINARY = 1;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int SEM_VALUE_MAX = 32767;

const int LINK_SPEED_COUNT = 10000;

const int __CUDA_API_VERSION = 10010;

const int hipStreamDefault = 0;

const int hipStreamNonBlocking = 1;

const int hipEventDefault = 0;

const int hipEventBlockingSync = 1;

const int hipEventDisableTiming = 2;

const int hipEventInterprocess = 4;

const int hipEventReleaseToDevice = 1073741824;

const int hipEventReleaseToSystem = 2147483648;

const int hipDeviceScheduleAuto = 0;

const int hipDeviceScheduleSpin = 1;

const int hipDeviceScheduleYield = 2;

const int hipDeviceScheduleBlockingSync = 4;

const int hipDeviceScheduleMask = 7;

const int hipDeviceMapHost = 8;

const int hipDeviceLmemResizeToMax = 22;

const int CL_TARGET_OPENCL_VERSION = 120;

const int API_TO_BE_DEPRECATED = 100000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int MAC_OS_X_VERSION_MAX_ALLOWED = 120000;

const int __AVAILABILITY_MACROS_USES_AVAILABILITY = 1;

const int __IPHONE_COMPAT_VERSION = 40000;

const int CL_CHAR_BIT = 8;

const int CL_SCHAR_MAX = 127;

const int CL_SCHAR_MIN = -128;

const int CL_CHAR_MAX = 127;

const int CL_CHAR_MIN = -128;

const int CL_UCHAR_MAX = 255;

const int CL_SHRT_MAX = 32767;

const int CL_SHRT_MIN = -32768;

const int CL_USHRT_MAX = 65535;

const int CL_INT_MAX = 2147483647;

const int CL_INT_MIN = -2147483648;

const int CL_UINT_MAX = 4294967295;

const int CL_FLT_DIG = 6;

const int CL_FLT_MANT_DIG = 24;

const int CL_FLT_MAX_10_EXP = 38;

const int CL_FLT_MAX_EXP = 128;

const int CL_FLT_MIN_10_EXP = -37;

const int CL_FLT_MIN_EXP = -125;

const int CL_FLT_RADIX = 2;

const double CL_FLT_MAX = 3.4028234663852886e+38;

const double CL_FLT_MIN = 1.1754943508222875e-38;

const double CL_FLT_EPSILON = 1.1920928955078125e-7;

const int CL_DBL_DIG = 15;

const int CL_DBL_MANT_DIG = 53;

const int CL_DBL_MAX_10_EXP = 308;

const int CL_DBL_MAX_EXP = 1024;

const int CL_DBL_MIN_10_EXP = -307;

const int CL_DBL_MIN_EXP = -1021;

const int CL_DBL_RADIX = 2;

const double CL_DBL_MAX = 1.7976931348623157e+308;

const double CL_DBL_MIN = 2.2250738585072014e-308;

const double CL_DBL_EPSILON = 2.220446049250313e-16;

const double CL_M_E = 2.718281828459045;

const double CL_M_LOG2E = 1.4426950408889634;

const double CL_M_LOG10E = 0.4342944819032518;

const double CL_M_LN2 = 0.6931471805599453;

const double CL_M_LN10 = 2.302585092994046;

const double CL_M_PI = 3.141592653589793;

const double CL_M_PI_2 = 1.5707963267948966;

const double CL_M_PI_4 = 0.7853981633974483;

const double CL_M_1_PI = 0.3183098861837907;

const double CL_M_2_PI = 0.6366197723675814;

const double CL_M_2_SQRTPI = 1.1283791670955126;

const double CL_M_SQRT2 = 1.4142135623730951;

const double CL_M_SQRT1_2 = 0.7071067811865476;

const double CL_M_E_F = 2.7182817459106445;

const double CL_M_LOG2E_F = 1.4426950216293335;

const double CL_M_LOG10E_F = 0.4342944920063019;

const double CL_M_LN2_F = 0.6931471824645996;

const double CL_M_LN10_F = 2.3025851249694824;

const double CL_M_PI_F = 3.1415927410125732;

const double CL_M_PI_2_F = 1.5707963705062866;

const double CL_M_PI_4_F = 0.7853981852531433;

const double CL_M_1_PI_F = 0.31830987334251404;

const double CL_M_2_PI_F = 0.6366197466850281;

const double CL_M_2_SQRTPI_F = 1.128379225730896;

const double CL_M_SQRT2_F = 1.4142135381698608;

const double CL_M_SQRT1_2_F = 0.7071067690849304;

const double CL_HUGE_VALF = double.infinity;

const double CL_HUGE_VAL = double.infinity;

const double CL_NAN = double.nan;

const double CL_MAXFLOAT = 3.4028234663852886e+38;

const double CL_INFINITY = double.infinity;

const int CL_HAS_NAMED_VECTOR_FIELDS = 1;

const int CL_HAS_HI_LO_VECTOR_FIELDS = 1;

const String CL_PROGRAM_STRING_DEBUG_INFO =
    '#line 1932 "/var/folders/yb/xfw1ct9d38v_f9wpjpqrzc4m0000gq/T/bpDnBG/temp_for_macros.hpp" \n\n';

const int CL_SUCCESS = 0;

const int CL_DEVICE_NOT_FOUND = -1;

const int CL_DEVICE_NOT_AVAILABLE = -2;

const int CL_COMPILER_NOT_AVAILABLE = -3;

const int CL_MEM_OBJECT_ALLOCATION_FAILURE = -4;

const int CL_OUT_OF_RESOURCES = -5;

const int CL_OUT_OF_HOST_MEMORY = -6;

const int CL_PROFILING_INFO_NOT_AVAILABLE = -7;

const int CL_MEM_COPY_OVERLAP = -8;

const int CL_IMAGE_FORMAT_MISMATCH = -9;

const int CL_IMAGE_FORMAT_NOT_SUPPORTED = -10;

const int CL_BUILD_PROGRAM_FAILURE = -11;

const int CL_MAP_FAILURE = -12;

const int CL_MISALIGNED_SUB_BUFFER_OFFSET = -13;

const int CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST = -14;

const int CL_COMPILE_PROGRAM_FAILURE = -15;

const int CL_LINKER_NOT_AVAILABLE = -16;

const int CL_LINK_PROGRAM_FAILURE = -17;

const int CL_DEVICE_PARTITION_FAILED = -18;

const int CL_KERNEL_ARG_INFO_NOT_AVAILABLE = -19;

const int CL_INVALID_VALUE = -30;

const int CL_INVALID_DEVICE_TYPE = -31;

const int CL_INVALID_PLATFORM = -32;

const int CL_INVALID_DEVICE = -33;

const int CL_INVALID_CONTEXT = -34;

const int CL_INVALID_QUEUE_PROPERTIES = -35;

const int CL_INVALID_COMMAND_QUEUE = -36;

const int CL_INVALID_HOST_PTR = -37;

const int CL_INVALID_MEM_OBJECT = -38;

const int CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = -39;

const int CL_INVALID_IMAGE_SIZE = -40;

const int CL_INVALID_SAMPLER = -41;

const int CL_INVALID_BINARY = -42;

const int CL_INVALID_BUILD_OPTIONS = -43;

const int CL_INVALID_PROGRAM = -44;

const int CL_INVALID_PROGRAM_EXECUTABLE = -45;

const int CL_INVALID_KERNEL_NAME = -46;

const int CL_INVALID_KERNEL_DEFINITION = -47;

const int CL_INVALID_KERNEL = -48;

const int CL_INVALID_ARG_INDEX = -49;

const int CL_INVALID_ARG_VALUE = -50;

const int CL_INVALID_ARG_SIZE = -51;

const int CL_INVALID_KERNEL_ARGS = -52;

const int CL_INVALID_WORK_DIMENSION = -53;

const int CL_INVALID_WORK_GROUP_SIZE = -54;

const int CL_INVALID_WORK_ITEM_SIZE = -55;

const int CL_INVALID_GLOBAL_OFFSET = -56;

const int CL_INVALID_EVENT_WAIT_LIST = -57;

const int CL_INVALID_EVENT = -58;

const int CL_INVALID_OPERATION = -59;

const int CL_INVALID_GL_OBJECT = -60;

const int CL_INVALID_BUFFER_SIZE = -61;

const int CL_INVALID_MIP_LEVEL = -62;

const int CL_INVALID_GLOBAL_WORK_SIZE = -63;

const int CL_INVALID_PROPERTY = -64;

const int CL_INVALID_IMAGE_DESCRIPTOR = -65;

const int CL_INVALID_COMPILER_OPTIONS = -66;

const int CL_INVALID_LINKER_OPTIONS = -67;

const int CL_INVALID_DEVICE_PARTITION_COUNT = -68;

const int CL_VERSION_1_0 = 1;

const int CL_VERSION_1_1 = 1;

const int CL_VERSION_1_2 = 1;

const int CL_FALSE = 0;

const int CL_TRUE = 1;

const int CL_BLOCKING = 1;

const int CL_NON_BLOCKING = 0;

const int CL_PLATFORM_PROFILE = 2304;

const int CL_PLATFORM_VERSION = 2305;

const int CL_PLATFORM_NAME = 2306;

const int CL_PLATFORM_VENDOR = 2307;

const int CL_PLATFORM_EXTENSIONS = 2308;

const int CL_DEVICE_TYPE_DEFAULT = 1;

const int CL_DEVICE_TYPE_CPU = 2;

const int CL_DEVICE_TYPE_GPU = 4;

const int CL_DEVICE_TYPE_ACCELERATOR = 8;

const int CL_DEVICE_TYPE_CUSTOM = 16;

const int CL_DEVICE_TYPE_ALL = 4294967295;

const int CL_DEVICE_TYPE = 4096;

const int CL_DEVICE_VENDOR_ID = 4097;

const int CL_DEVICE_MAX_COMPUTE_UNITS = 4098;

const int CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS = 4099;

const int CL_DEVICE_MAX_WORK_GROUP_SIZE = 4100;

const int CL_DEVICE_MAX_WORK_ITEM_SIZES = 4101;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR = 4102;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT = 4103;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT = 4104;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG = 4105;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT = 4106;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE = 4107;

const int CL_DEVICE_MAX_CLOCK_FREQUENCY = 4108;

const int CL_DEVICE_ADDRESS_BITS = 4109;

const int CL_DEVICE_MAX_READ_IMAGE_ARGS = 4110;

const int CL_DEVICE_MAX_WRITE_IMAGE_ARGS = 4111;

const int CL_DEVICE_MAX_MEM_ALLOC_SIZE = 4112;

const int CL_DEVICE_IMAGE2D_MAX_WIDTH = 4113;

const int CL_DEVICE_IMAGE2D_MAX_HEIGHT = 4114;

const int CL_DEVICE_IMAGE3D_MAX_WIDTH = 4115;

const int CL_DEVICE_IMAGE3D_MAX_HEIGHT = 4116;

const int CL_DEVICE_IMAGE3D_MAX_DEPTH = 4117;

const int CL_DEVICE_IMAGE_SUPPORT = 4118;

const int CL_DEVICE_MAX_PARAMETER_SIZE = 4119;

const int CL_DEVICE_MAX_SAMPLERS = 4120;

const int CL_DEVICE_MEM_BASE_ADDR_ALIGN = 4121;

const int CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE = 4122;

const int CL_DEVICE_SINGLE_FP_CONFIG = 4123;

const int CL_DEVICE_GLOBAL_MEM_CACHE_TYPE = 4124;

const int CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE = 4125;

const int CL_DEVICE_GLOBAL_MEM_CACHE_SIZE = 4126;

const int CL_DEVICE_GLOBAL_MEM_SIZE = 4127;

const int CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE = 4128;

const int CL_DEVICE_MAX_CONSTANT_ARGS = 4129;

const int CL_DEVICE_LOCAL_MEM_TYPE = 4130;

const int CL_DEVICE_LOCAL_MEM_SIZE = 4131;

const int CL_DEVICE_ERROR_CORRECTION_SUPPORT = 4132;

const int CL_DEVICE_PROFILING_TIMER_RESOLUTION = 4133;

const int CL_DEVICE_ENDIAN_LITTLE = 4134;

const int CL_DEVICE_AVAILABLE = 4135;

const int CL_DEVICE_COMPILER_AVAILABLE = 4136;

const int CL_DEVICE_EXECUTION_CAPABILITIES = 4137;

const int CL_DEVICE_QUEUE_PROPERTIES = 4138;

const int CL_DEVICE_NAME = 4139;

const int CL_DEVICE_VENDOR = 4140;

const int CL_DRIVER_VERSION = 4141;

const int CL_DEVICE_PROFILE = 4142;

const int CL_DEVICE_VERSION = 4143;

const int CL_DEVICE_EXTENSIONS = 4144;

const int CL_DEVICE_PLATFORM = 4145;

const int CL_DEVICE_DOUBLE_FP_CONFIG = 4146;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF = 4148;

const int CL_DEVICE_HOST_UNIFIED_MEMORY = 4149;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR = 4150;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT = 4151;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_INT = 4152;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG = 4153;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT = 4154;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE = 4155;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF = 4156;

const int CL_DEVICE_OPENCL_C_VERSION = 4157;

const int CL_DEVICE_LINKER_AVAILABLE = 4158;

const int CL_DEVICE_BUILT_IN_KERNELS = 4159;

const int CL_DEVICE_IMAGE_MAX_BUFFER_SIZE = 4160;

const int CL_DEVICE_IMAGE_MAX_ARRAY_SIZE = 4161;

const int CL_DEVICE_PARENT_DEVICE = 4162;

const int CL_DEVICE_PARTITION_MAX_SUB_DEVICES = 4163;

const int CL_DEVICE_PARTITION_PROPERTIES = 4164;

const int CL_DEVICE_PARTITION_AFFINITY_DOMAIN = 4165;

const int CL_DEVICE_PARTITION_TYPE = 4166;

const int CL_DEVICE_REFERENCE_COUNT = 4167;

const int CL_DEVICE_PREFERRED_INTEROP_USER_SYNC = 4168;

const int CL_DEVICE_PRINTF_BUFFER_SIZE = 4169;

const int CL_DEVICE_IMAGE_PITCH_ALIGNMENT = 4170;

const int CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT = 4171;

const int CL_FP_DENORM = 1;

const int CL_FP_INF_NAN = 2;

const int CL_FP_ROUND_TO_NEAREST = 4;

const int CL_FP_ROUND_TO_ZERO = 8;

const int CL_FP_ROUND_TO_INF = 16;

const int CL_FP_FMA = 32;

const int CL_FP_SOFT_FLOAT = 64;

const int CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT = 128;

const int CL_NONE = 0;

const int CL_READ_ONLY_CACHE = 1;

const int CL_READ_WRITE_CACHE = 2;

const int CL_LOCAL = 1;

const int CL_GLOBAL = 2;

const int CL_EXEC_KERNEL = 1;

const int CL_EXEC_NATIVE_KERNEL = 2;

const int CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE = 1;

const int CL_QUEUE_PROFILING_ENABLE = 2;

const int CL_CONTEXT_REFERENCE_COUNT = 4224;

const int CL_CONTEXT_DEVICES = 4225;

const int CL_CONTEXT_PROPERTIES = 4226;

const int CL_CONTEXT_NUM_DEVICES = 4227;

const int CL_CONTEXT_PLATFORM = 4228;

const int CL_CONTEXT_INTEROP_USER_SYNC = 4229;

const int CL_DEVICE_PARTITION_EQUALLY = 4230;

const int CL_DEVICE_PARTITION_BY_COUNTS = 4231;

const int CL_DEVICE_PARTITION_BY_COUNTS_LIST_END = 0;

const int CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN = 4232;

const int CL_DEVICE_AFFINITY_DOMAIN_NUMA = 1;

const int CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE = 2;

const int CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE = 4;

const int CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE = 8;

const int CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE = 16;

const int CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE = 32;

const int CL_QUEUE_CONTEXT = 4240;

const int CL_QUEUE_DEVICE = 4241;

const int CL_QUEUE_REFERENCE_COUNT = 4242;

const int CL_QUEUE_PROPERTIES = 4243;

const int CL_MEM_READ_WRITE = 1;

const int CL_MEM_WRITE_ONLY = 2;

const int CL_MEM_READ_ONLY = 4;

const int CL_MEM_USE_HOST_PTR = 8;

const int CL_MEM_ALLOC_HOST_PTR = 16;

const int CL_MEM_COPY_HOST_PTR = 32;

const int CL_MEM_HOST_WRITE_ONLY = 128;

const int CL_MEM_HOST_READ_ONLY = 256;

const int CL_MEM_HOST_NO_ACCESS = 512;

const int CL_MIGRATE_MEM_OBJECT_HOST = 1;

const int CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED = 2;

const int CL_R = 4272;

const int CL_A = 4273;

const int CL_RG = 4274;

const int CL_RA = 4275;

const int CL_RGB = 4276;

const int CL_RGBA = 4277;

const int CL_BGRA = 4278;

const int CL_ARGB = 4279;

const int CL_INTENSITY = 4280;

const int CL_LUMINANCE = 4281;

const int CL_Rx = 4282;

const int CL_RGx = 4283;

const int CL_RGBx = 4284;

const int CL_DEPTH = 4285;

const int CL_DEPTH_STENCIL = 4286;

const int CL_SNORM_INT8 = 4304;

const int CL_SNORM_INT16 = 4305;

const int CL_UNORM_INT8 = 4306;

const int CL_UNORM_INT16 = 4307;

const int CL_UNORM_SHORT_565 = 4308;

const int CL_UNORM_SHORT_555 = 4309;

const int CL_UNORM_INT_101010 = 4310;

const int CL_SIGNED_INT8 = 4311;

const int CL_SIGNED_INT16 = 4312;

const int CL_SIGNED_INT32 = 4313;

const int CL_UNSIGNED_INT8 = 4314;

const int CL_UNSIGNED_INT16 = 4315;

const int CL_UNSIGNED_INT32 = 4316;

const int CL_HALF_FLOAT = 4317;

const int CL_FLOAT = 4318;

const int CL_UNORM_INT24 = 4319;

const int CL_MEM_OBJECT_BUFFER = 4336;

const int CL_MEM_OBJECT_IMAGE2D = 4337;

const int CL_MEM_OBJECT_IMAGE3D = 4338;

const int CL_MEM_OBJECT_IMAGE2D_ARRAY = 4339;

const int CL_MEM_OBJECT_IMAGE1D = 4340;

const int CL_MEM_OBJECT_IMAGE1D_ARRAY = 4341;

const int CL_MEM_OBJECT_IMAGE1D_BUFFER = 4342;

const int CL_MEM_TYPE = 4352;

const int CL_MEM_FLAGS = 4353;

const int CL_MEM_SIZE = 4354;

const int CL_MEM_HOST_PTR = 4355;

const int CL_MEM_MAP_COUNT = 4356;

const int CL_MEM_REFERENCE_COUNT = 4357;

const int CL_MEM_CONTEXT = 4358;

const int CL_MEM_ASSOCIATED_MEMOBJECT = 4359;

const int CL_MEM_OFFSET = 4360;

const int CL_IMAGE_FORMAT = 4368;

const int CL_IMAGE_ELEMENT_SIZE = 4369;

const int CL_IMAGE_ROW_PITCH = 4370;

const int CL_IMAGE_SLICE_PITCH = 4371;

const int CL_IMAGE_WIDTH = 4372;

const int CL_IMAGE_HEIGHT = 4373;

const int CL_IMAGE_DEPTH = 4374;

const int CL_IMAGE_ARRAY_SIZE = 4375;

const int CL_IMAGE_BUFFER = 4376;

const int CL_IMAGE_NUM_MIP_LEVELS = 4377;

const int CL_IMAGE_NUM_SAMPLES = 4378;

const int CL_ADDRESS_NONE = 4400;

const int CL_ADDRESS_CLAMP_TO_EDGE = 4401;

const int CL_ADDRESS_CLAMP = 4402;

const int CL_ADDRESS_REPEAT = 4403;

const int CL_ADDRESS_MIRRORED_REPEAT = 4404;

const int CL_FILTER_NEAREST = 4416;

const int CL_FILTER_LINEAR = 4417;

const int CL_SAMPLER_REFERENCE_COUNT = 4432;

const int CL_SAMPLER_CONTEXT = 4433;

const int CL_SAMPLER_NORMALIZED_COORDS = 4434;

const int CL_SAMPLER_ADDRESSING_MODE = 4435;

const int CL_SAMPLER_FILTER_MODE = 4436;

const int CL_MAP_READ = 1;

const int CL_MAP_WRITE = 2;

const int CL_MAP_WRITE_INVALIDATE_REGION = 4;

const int CL_PROGRAM_REFERENCE_COUNT = 4448;

const int CL_PROGRAM_CONTEXT = 4449;

const int CL_PROGRAM_NUM_DEVICES = 4450;

const int CL_PROGRAM_DEVICES = 4451;

const int CL_PROGRAM_SOURCE = 4452;

const int CL_PROGRAM_BINARY_SIZES = 4453;

const int CL_PROGRAM_BINARIES = 4454;

const int CL_PROGRAM_NUM_KERNELS = 4455;

const int CL_PROGRAM_KERNEL_NAMES = 4456;

const int CL_PROGRAM_BUILD_STATUS = 4481;

const int CL_PROGRAM_BUILD_OPTIONS = 4482;

const int CL_PROGRAM_BUILD_LOG = 4483;

const int CL_PROGRAM_BINARY_TYPE = 4484;

const int CL_PROGRAM_BINARY_TYPE_NONE = 0;

const int CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT = 1;

const int CL_PROGRAM_BINARY_TYPE_LIBRARY = 2;

const int CL_PROGRAM_BINARY_TYPE_EXECUTABLE = 4;

const int CL_BUILD_SUCCESS = 0;

const int CL_BUILD_NONE = -1;

const int CL_BUILD_ERROR = -2;

const int CL_BUILD_IN_PROGRESS = -3;

const int CL_KERNEL_FUNCTION_NAME = 4496;

const int CL_KERNEL_NUM_ARGS = 4497;

const int CL_KERNEL_REFERENCE_COUNT = 4498;

const int CL_KERNEL_CONTEXT = 4499;

const int CL_KERNEL_PROGRAM = 4500;

const int CL_KERNEL_ATTRIBUTES = 4501;

const int CL_KERNEL_ARG_ADDRESS_QUALIFIER = 4502;

const int CL_KERNEL_ARG_ACCESS_QUALIFIER = 4503;

const int CL_KERNEL_ARG_TYPE_NAME = 4504;

const int CL_KERNEL_ARG_TYPE_QUALIFIER = 4505;

const int CL_KERNEL_ARG_NAME = 4506;

const int CL_KERNEL_ARG_ADDRESS_GLOBAL = 4507;

const int CL_KERNEL_ARG_ADDRESS_LOCAL = 4508;

const int CL_KERNEL_ARG_ADDRESS_CONSTANT = 4509;

const int CL_KERNEL_ARG_ADDRESS_PRIVATE = 4510;

const int CL_KERNEL_ARG_ACCESS_READ_ONLY = 4512;

const int CL_KERNEL_ARG_ACCESS_WRITE_ONLY = 4513;

const int CL_KERNEL_ARG_ACCESS_READ_WRITE = 4514;

const int CL_KERNEL_ARG_ACCESS_NONE = 4515;

const int CL_KERNEL_ARG_TYPE_NONE = 0;

const int CL_KERNEL_ARG_TYPE_CONST = 1;

const int CL_KERNEL_ARG_TYPE_RESTRICT = 2;

const int CL_KERNEL_ARG_TYPE_VOLATILE = 4;

const int CL_KERNEL_WORK_GROUP_SIZE = 4528;

const int CL_KERNEL_COMPILE_WORK_GROUP_SIZE = 4529;

const int CL_KERNEL_LOCAL_MEM_SIZE = 4530;

const int CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE = 4531;

const int CL_KERNEL_PRIVATE_MEM_SIZE = 4532;

const int CL_KERNEL_GLOBAL_WORK_SIZE = 4533;

const int CL_EVENT_COMMAND_QUEUE = 4560;

const int CL_EVENT_COMMAND_TYPE = 4561;

const int CL_EVENT_REFERENCE_COUNT = 4562;

const int CL_EVENT_COMMAND_EXECUTION_STATUS = 4563;

const int CL_EVENT_CONTEXT = 4564;

const int CL_COMMAND_NDRANGE_KERNEL = 4592;

const int CL_COMMAND_TASK = 4593;

const int CL_COMMAND_NATIVE_KERNEL = 4594;

const int CL_COMMAND_READ_BUFFER = 4595;

const int CL_COMMAND_WRITE_BUFFER = 4596;

const int CL_COMMAND_COPY_BUFFER = 4597;

const int CL_COMMAND_READ_IMAGE = 4598;

const int CL_COMMAND_WRITE_IMAGE = 4599;

const int CL_COMMAND_COPY_IMAGE = 4600;

const int CL_COMMAND_COPY_IMAGE_TO_BUFFER = 4601;

const int CL_COMMAND_COPY_BUFFER_TO_IMAGE = 4602;

const int CL_COMMAND_MAP_BUFFER = 4603;

const int CL_COMMAND_MAP_IMAGE = 4604;

const int CL_COMMAND_UNMAP_MEM_OBJECT = 4605;

const int CL_COMMAND_MARKER = 4606;

const int CL_COMMAND_ACQUIRE_GL_OBJECTS = 4607;

const int CL_COMMAND_RELEASE_GL_OBJECTS = 4608;

const int CL_COMMAND_READ_BUFFER_RECT = 4609;

const int CL_COMMAND_WRITE_BUFFER_RECT = 4610;

const int CL_COMMAND_COPY_BUFFER_RECT = 4611;

const int CL_COMMAND_USER = 4612;

const int CL_COMMAND_BARRIER = 4613;

const int CL_COMMAND_MIGRATE_MEM_OBJECTS = 4614;

const int CL_COMMAND_FILL_BUFFER = 4615;

const int CL_COMMAND_FILL_IMAGE = 4616;

const int CL_COMPLETE = 0;

const int CL_RUNNING = 1;

const int CL_SUBMITTED = 2;

const int CL_QUEUED = 3;

const int CL_BUFFER_CREATE_TYPE_REGION = 4640;

const int CL_PROFILING_COMMAND_QUEUED = 4736;

const int CL_PROFILING_COMMAND_SUBMIT = 4737;

const int CL_PROFILING_COMMAND_START = 4738;

const int CL_PROFILING_COMMAND_END = 4739;

const int CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV = 16384;

const int CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV = 16385;

const int CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV = 16389;

const int CL_DEVICE_PCI_BUS_ID_NV = 16392;

const int CL_DEVICE_PCI_SLOT_ID_NV = 16393;

const int CL_DEVICE_TOPOLOGY_AMD = 16439;

const int CL_DEVICE_BOARD_NAME_AMD = 16440;

const int CL_PLATFORMS_MAX = 16;

const int DYNAMIC_TARGETS_ENABLED = 0;

const int TARGET_OS_MAC = 1;

const int TARGET_OS_WIN32 = 0;

const int TARGET_OS_WINDOWS = 0;

const int TARGET_OS_UNIX = 0;

const int TARGET_OS_LINUX = 0;

const int TARGET_OS_OSX = 1;

const int TARGET_OS_IPHONE = 0;

const int TARGET_OS_IOS = 0;

const int TARGET_OS_WATCH = 0;

const int TARGET_OS_TV = 0;

const int TARGET_OS_MACCATALYST = 0;

const int TARGET_OS_UIKITFORMAC = 0;

const int TARGET_OS_SIMULATOR = 0;

const int TARGET_OS_EMBEDDED = 0;

const int TARGET_OS_RTKIT = 0;

const int TARGET_OS_DRIVERKIT = 0;

const int TARGET_IPHONE_SIMULATOR = 0;

const int TARGET_OS_NANO = 0;

const int TARGET_ABI_USES_IOS_VALUES = 1;

const int TARGET_CPU_PPC = 0;

const int TARGET_CPU_PPC64 = 0;

const int TARGET_CPU_68K = 0;

const int TARGET_CPU_X86 = 0;

const int TARGET_CPU_X86_64 = 0;

const int TARGET_CPU_ARM = 0;

const int TARGET_CPU_ARM64 = 1;

const int TARGET_CPU_MIPS = 0;

const int TARGET_CPU_SPARC = 0;

const int TARGET_CPU_ALPHA = 0;

const int TARGET_RT_MAC_CFM = 0;

const int TARGET_RT_MAC_MACHO = 1;

const int TARGET_RT_LITTLE_ENDIAN = 1;

const int TARGET_RT_BIG_ENDIAN = 0;

const int TARGET_RT_64_BIT = 1;

const int OBJC_API_VERSION = 2;

const int OBJC_NO_GC = 1;

const int NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER = 1;

const int OBJC_OLD_DISPATCH_PROTOTYPES = 0;

const int OBJC_BOOL_IS_BOOL = 1;

const int YES = 1;

const int NO = 0;

const int ARITH_SHIFT = 32;

const int __GNUC_VA_LIST = 1;

const int OBJC_GETCLASSHOOK_DEFINED = 1;

const int OBJC_ADDLOADIMAGEFUNC_DEFINED = 1;

const int OBJC_SETHOOK_LAZYCLASSNAMER_DEFINED = 1;

const int OBJC_REALIZECLASSFROMSWIFT_DEFINED = 1;

const int _C_ID = 64;

const int _C_CLASS = 35;

const int _C_SEL = 58;

const int _C_CHR = 99;

const int _C_UCHR = 67;

const int _C_SHT = 115;

const int _C_USHT = 83;

const int _C_INT = 105;

const int _C_UINT = 73;

const int _C_LNG = 108;

const int _C_ULNG = 76;

const int _C_LNG_LNG = 113;

const int _C_ULNG_LNG = 81;

const int _C_INT128 = 116;

const int _C_UINT128 = 84;

const int _C_FLT = 102;

const int _C_DBL = 100;

const int _C_LNG_DBL = 68;

const int _C_BFLD = 98;

const int _C_BOOL = 66;

const int _C_VOID = 118;

const int _C_UNDEF = 63;

const int _C_PTR = 94;

const int _C_CHARPTR = 42;

const int _C_ATOM = 37;

const int _C_ARY_B = 91;

const int _C_ARY_E = 93;

const int _C_UNION_B = 40;

const int _C_UNION_E = 41;

const int _C_STRUCT_B = 123;

const int _C_STRUCT_E = 125;

const int _C_VECTOR = 33;

const int _C_COMPLEX = 106;

const int _C_ATOMIC = 65;

const int _C_CONST = 114;

const int _C_IN = 110;

const int _C_INOUT = 78;

const int _C_OUT = 111;

const int _C_BYCOPY = 79;

const int _C_BYREF = 82;

const int _C_ONEWAY = 86;

const int _C_GNUREGISTER = 43;

const int __COREFOUNDATION_COREFOUNDATION__ = 1;

const int __COREFOUNDATION__ = 1;

const String __ASSERT_FILE_NAME = 'temp_for_macros.hpp';

const int _CACHED_RUNES = 256;

const int _CRMASK = -256;

const String _RUNE_MAGIC_A = 'RuneMagA';

const int _CTYPE_A = 256;

const int _CTYPE_C = 512;

const int _CTYPE_D = 1024;

const int _CTYPE_G = 2048;

const int _CTYPE_L = 4096;

const int _CTYPE_P = 8192;

const int _CTYPE_S = 16384;

const int _CTYPE_U = 32768;

const int _CTYPE_X = 65536;

const int _CTYPE_B = 131072;

const int _CTYPE_R = 262144;

const int _CTYPE_I = 524288;

const int _CTYPE_T = 1048576;

const int _CTYPE_Q = 2097152;

const int _CTYPE_SW0 = 536870912;

const int _CTYPE_SW1 = 1073741824;

const int _CTYPE_SW2 = 2147483648;

const int _CTYPE_SW3 = 3221225472;

const int _CTYPE_SWM = 3758096384;

const int _CTYPE_SWS = 30;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EDEADLK = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EAGAIN = 35;

const int EWOULDBLOCK = 35;

const int EINPROGRESS = 36;

const int EALREADY = 37;

const int ENOTSOCK = 38;

const int EDESTADDRREQ = 39;

const int EMSGSIZE = 40;

const int EPROTOTYPE = 41;

const int ENOPROTOOPT = 42;

const int EPROTONOSUPPORT = 43;

const int ESOCKTNOSUPPORT = 44;

const int ENOTSUP = 45;

const int EPFNOSUPPORT = 46;

const int EAFNOSUPPORT = 47;

const int EADDRINUSE = 48;

const int EADDRNOTAVAIL = 49;

const int ENETDOWN = 50;

const int ENETUNREACH = 51;

const int ENETRESET = 52;

const int ECONNABORTED = 53;

const int ECONNRESET = 54;

const int ENOBUFS = 55;

const int EISCONN = 56;

const int ENOTCONN = 57;

const int ESHUTDOWN = 58;

const int ETOOMANYREFS = 59;

const int ETIMEDOUT = 60;

const int ECONNREFUSED = 61;

const int ELOOP = 62;

const int ENAMETOOLONG = 63;

const int EHOSTDOWN = 64;

const int EHOSTUNREACH = 65;

const int ENOTEMPTY = 66;

const int EPROCLIM = 67;

const int EUSERS = 68;

const int EDQUOT = 69;

const int ESTALE = 70;

const int EREMOTE = 71;

const int EBADRPC = 72;

const int ERPCMISMATCH = 73;

const int EPROGUNAVAIL = 74;

const int EPROGMISMATCH = 75;

const int EPROCUNAVAIL = 76;

const int ENOLCK = 77;

const int ENOSYS = 78;

const int EFTYPE = 79;

const int EAUTH = 80;

const int ENEEDAUTH = 81;

const int EPWROFF = 82;

const int EDEVERR = 83;

const int EOVERFLOW = 84;

const int EBADEXEC = 85;

const int EBADARCH = 86;

const int ESHLIBVERS = 87;

const int EBADMACHO = 88;

const int ECANCELED = 89;

const int EIDRM = 90;

const int ENOMSG = 91;

const int EILSEQ = 92;

const int ENOATTR = 93;

const int EBADMSG = 94;

const int EMULTIHOP = 95;

const int ENODATA = 96;

const int ENOLINK = 97;

const int ENOSR = 98;

const int ENOSTR = 99;

const int EPROTO = 100;

const int ETIME = 101;

const int EOPNOTSUPP = 102;

const int ENOPOLICY = 103;

const int ENOTRECOVERABLE = 104;

const int EOWNERDEAD = 105;

const int EQFULL = 106;

const int ELAST = 106;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 53;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 15;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -1021;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -307;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 1024;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 308;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = 1.7976931348623157e+308;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 2.220446049250313e-16;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 2.2250738585072014e-308;

const int DECIMAL_DIG = 17;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 17;

const int __DARWIN_CLK_TCK = 100;

const int CHAR_BIT = 8;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 16384;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int LC_ALL = 0;

const int LC_COLLATE = 1;

const int LC_CTYPE = 2;

const int LC_MONETARY = 3;

const int LC_NUMERIC = 4;

const int LC_TIME = 5;

const int LC_MESSAGES = 6;

const int _LC_LAST = 7;

const int _JBLEN = 48;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int __COREFOUNDATION_CFBASE__ = 1;

const int __COREFOUNDATION_CFAVAILABILITY__ = 1;

const int __CF_ENUM_FIXED_IS_AVAILABLE = 1;

const int UNIVERSAL_INTERFACES_VERSION = 1024;

const int PRAGMA_IMPORT = 0;

const int PRAGMA_ONCE = 0;

const int PRAGMA_STRUCT_PACK = 1;

const int PRAGMA_STRUCT_PACKPUSH = 1;

const int PRAGMA_STRUCT_ALIGN = 0;

const int PRAGMA_ENUM_PACK = 0;

const int PRAGMA_ENUM_ALWAYSINT = 0;

const int PRAGMA_ENUM_OPTIONS = 0;

const int TYPE_EXTENDED = 0;

const int TYPE_LONGDOUBLE_IS_DOUBLE = 0;

const int TYPE_LONGLONG = 1;

const int FUNCTION_PASCAL = 0;

const int FUNCTION_DECLSPEC = 0;

const int FUNCTION_WIN32CC = 0;

const int TARGET_API_MAC_OS8 = 0;

const int TARGET_API_MAC_CARBON = 1;

const int TARGET_API_MAC_OSX = 1;

const int TARGET_CARBON = 1;

const int OLDROUTINENAMES = 0;

const int OPAQUE_TOOLBOX_STRUCTS = 1;

const int OPAQUE_UPP_TYPES = 1;

const int ACCESSOR_CALLS_ARE_FUNCTIONS = 1;

const int CALL_NOT_IN_CARBON = 0;

const int MIXEDMODE_CALLS_ARE_FUNCTIONS = 1;

const int ALLOW_OBSOLETE_CARBON_MACMEMORY = 0;

const int ALLOW_OBSOLETE_CARBON_OSUTILS = 0;

const int kInvalidID = 0;

const int TRUE = 1;

const int FALSE = 0;

const double kCFCoreFoundationVersionNumber10_0 = 196.4;

const double kCFCoreFoundationVersionNumber10_0_3 = 196.5;

const double kCFCoreFoundationVersionNumber10_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_2 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_3 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_4 = 227.3;

const double kCFCoreFoundationVersionNumber10_2 = 263.0;

const double kCFCoreFoundationVersionNumber10_2_1 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_2 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_3 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_4 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_5 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_6 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_7 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_8 = 263.5;

const double kCFCoreFoundationVersionNumber10_3 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_1 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_2 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_3 = 299.3;

const double kCFCoreFoundationVersionNumber10_3_4 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_5 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_6 = 299.32;

const double kCFCoreFoundationVersionNumber10_3_7 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_8 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_9 = 299.35;

const double kCFCoreFoundationVersionNumber10_4 = 368.0;

const double kCFCoreFoundationVersionNumber10_4_1 = 368.1;

const double kCFCoreFoundationVersionNumber10_4_2 = 368.11;

const double kCFCoreFoundationVersionNumber10_4_3 = 368.18;

const double kCFCoreFoundationVersionNumber10_4_4_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_4_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_5_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_5_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_6_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_6_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_7 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_8 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_9 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_10 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_11 = 368.31;

const double kCFCoreFoundationVersionNumber10_5 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_1 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_2 = 476.1;

const double kCFCoreFoundationVersionNumber10_5_3 = 476.13;

const double kCFCoreFoundationVersionNumber10_5_4 = 476.14;

const double kCFCoreFoundationVersionNumber10_5_5 = 476.15;

const double kCFCoreFoundationVersionNumber10_5_6 = 476.17;

const double kCFCoreFoundationVersionNumber10_5_7 = 476.18;

const double kCFCoreFoundationVersionNumber10_5_8 = 476.19;

const double kCFCoreFoundationVersionNumber10_6 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_1 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_2 = 550.13;

const double kCFCoreFoundationVersionNumber10_6_3 = 550.19;

const double kCFCoreFoundationVersionNumber10_6_4 = 550.29;

const double kCFCoreFoundationVersionNumber10_6_5 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_6 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_7 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_8 = 550.43;

const double kCFCoreFoundationVersionNumber10_7 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_1 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_2 = 635.15;

const double kCFCoreFoundationVersionNumber10_7_3 = 635.19;

const double kCFCoreFoundationVersionNumber10_7_4 = 635.21;

const double kCFCoreFoundationVersionNumber10_7_5 = 635.21;

const double kCFCoreFoundationVersionNumber10_8 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_1 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_2 = 744.12;

const double kCFCoreFoundationVersionNumber10_8_3 = 744.18;

const double kCFCoreFoundationVersionNumber10_8_4 = 744.19;

const double kCFCoreFoundationVersionNumber10_9 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_1 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_2 = 855.14;

const double kCFCoreFoundationVersionNumber10_10 = 1151.16;

const double kCFCoreFoundationVersionNumber10_10_1 = 1151.16;

const int kCFCoreFoundationVersionNumber10_10_2 = 1152;

const double kCFCoreFoundationVersionNumber10_10_3 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_4 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_5 = 1153.18;

const int kCFCoreFoundationVersionNumber10_10_Max = 1199;

const int kCFCoreFoundationVersionNumber10_11 = 1253;

const double kCFCoreFoundationVersionNumber10_11_1 = 1255.1;

const double kCFCoreFoundationVersionNumber10_11_2 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_3 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_4 = 1258.1;

const int kCFCoreFoundationVersionNumber10_11_Max = 1299;

const int ISA_PTRAUTH_DISCRIMINATOR = 27361;

const int __COREFOUNDATION_CFARRAY__ = 1;

const int __COREFOUNDATION_CFBAG__ = 1;

const int __COREFOUNDATION_CFBINARYHEAP__ = 1;

const int __COREFOUNDATION_CFBITVECTOR__ = 1;

const int __COREFOUNDATION_CFBYTEORDER__ = 1;

const int CF_USE_OSBYTEORDER_H = 1;

const int __COREFOUNDATION_CFCALENDAR__ = 1;

const int __COREFOUNDATION_CFLOCALE__ = 1;

const int __COREFOUNDATION_CFDICTIONARY__ = 1;

const int __COREFOUNDATION_CFNOTIFICATIONCENTER__ = 1;

const int __COREFOUNDATION_CFDATE__ = 1;

const int __COREFOUNDATION_CFTIMEZONE__ = 1;

const int __COREFOUNDATION_CFDATA__ = 1;

const int __COREFOUNDATION_CFSTRING__ = 1;

const int __COREFOUNDATION_CFCHARACTERSET__ = 1;

const int kCFStringEncodingInvalidId = 4294967295;

const int __kCFStringInlineBufferLength = 64;

const int __COREFOUNDATION_CFDATEFORMATTER__ = 1;

const int __COREFOUNDATION_CFERROR__ = 1;

const int __COREFOUNDATION_CFNUMBER__ = 1;

const int __COREFOUNDATION_CFNUMBERFORMATTER__ = 1;

const int __COREFOUNDATION_CFPREFERENCES__ = 1;

const int __COREFOUNDATION_CFPROPERTYLIST__ = 1;

const int __COREFOUNDATION_CFSTREAM__ = 1;

const int __COREFOUNDATION_CFURL__ = 1;

const int __COREFOUNDATION_CFRUNLOOP__ = 1;

const int MACH_PORT_NULL = 0;

const int MACH_PORT_TYPE_DNREQUEST = 2147483648;

const int MACH_PORT_TYPE_SPREQUEST = 1073741824;

const int MACH_PORT_TYPE_SPREQUEST_DELAYED = 536870912;

const int MACH_PORT_SRIGHTS_NONE = 0;

const int MACH_PORT_SRIGHTS_PRESENT = 1;

const int MACH_PORT_QLIMIT_ZERO = 0;

const int MACH_PORT_QLIMIT_BASIC = 5;

const int MACH_PORT_QLIMIT_SMALL = 16;

const int MACH_PORT_QLIMIT_LARGE = 1024;

const int MACH_PORT_QLIMIT_KERNEL = 65534;

const int MACH_PORT_QLIMIT_MIN = 0;

const int MACH_PORT_QLIMIT_DEFAULT = 5;

const int MACH_PORT_QLIMIT_MAX = 1024;

const int MACH_PORT_STATUS_FLAG_TEMPOWNER = 1;

const int MACH_PORT_STATUS_FLAG_GUARDED = 2;

const int MACH_PORT_STATUS_FLAG_STRICT_GUARD = 4;

const int MACH_PORT_STATUS_FLAG_IMP_DONATION = 8;

const int MACH_PORT_STATUS_FLAG_REVIVE = 16;

const int MACH_PORT_STATUS_FLAG_TASKPTR = 32;

const int MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = 64;

const int MACH_PORT_STATUS_FLAG_NO_GRANT = 128;

const int MACH_PORT_LIMITS_INFO = 1;

const int MACH_PORT_RECEIVE_STATUS = 2;

const int MACH_PORT_DNREQUESTS_SIZE = 3;

const int MACH_PORT_TEMPOWNER = 4;

const int MACH_PORT_IMPORTANCE_RECEIVER = 5;

const int MACH_PORT_DENAP_RECEIVER = 6;

const int MACH_PORT_INFO_EXT = 7;

const int MACH_PORT_GUARD_INFO = 8;

const int MACH_PORT_DNREQUESTS_SIZE_COUNT = 1;

const int MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN = 255;

const int MPO_CONTEXT_AS_GUARD = 1;

const int MPO_QLIMIT = 2;

const int MPO_TEMPOWNER = 4;

const int MPO_IMPORTANCE_RECEIVER = 8;

const int MPO_INSERT_SEND_RIGHT = 16;

const int MPO_STRICT = 32;

const int MPO_DENAP_RECEIVER = 64;

const int MPO_IMMOVABLE_RECEIVE = 128;

const int MPO_FILTER_MSG = 256;

const int MPO_TG_BLOCK_TRACKING = 512;

const int MPO_SERVICE_PORT = 1024;

const int MPO_CONNECTION_PORT = 2048;

const int GUARD_TYPE_MACH_PORT = 1;

const int MAX_FATAL_kGUARD_EXC_CODE = 128;

const int MPG_FLAGS_NONE = 0;

const int MAX_OPTIONAL_kGUARD_EXC_CODE = 524288;

const int MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = 72057594037927936;

const int MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = 144115188075855872;

const int MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = 288230376151711744;

const int MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = 576460752303423488;

const int MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = 1152921504606846976;

const int MPG_FLAGS_STRICT_REPLY_MASK = -72057594037927936;

const int MPG_FLAGS_MOD_REFS_PINNED_DEALLOC = 72057594037927936;

const int MPG_FLAGS_MOD_REFS_PINNED_DESTROY = 144115188075855872;

const int MPG_FLAGS_MOD_REFS_PINNED_COPYIN = 288230376151711744;

const int MPG_FLAGS_IMMOVABLE_PINNED = 72057594037927936;

const int MPG_STRICT = 1;

const int MPG_IMMOVABLE_RECEIVE = 2;

const int __COREFOUNDATION_CFSOCKET__ = 1;

const int DISPATCH_API_VERSION = 20181008;

const int OS_OBJECT_HAVE_OBJC_SUPPORT = 0;

const int OS_OBJECT_USE_OBJC = 0;

const int OS_OBJECT_SWIFT3 = 0;

const int OS_OBJECT_USE_OBJC_RETAIN_RELEASE = 0;

const int __OS_WORKGROUP_ATTR_SIZE__ = 60;

const int __OS_WORKGROUP_INTERVAL_DATA_SIZE__ = 56;

const int __OS_WORKGROUP_JOIN_TOKEN_SIZE__ = 36;

const int _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT = 799564724;

const int _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT = 799564740;

const int _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT = 1386695757;

const int DISPATCH_SWIFT3_OVERLAY = 0;

const int TIME_MICROS_MAX = 1000000;

const int SYSTEM_CLOCK = 0;

const int CALENDAR_CLOCK = 1;

const int REALTIME_CLOCK = 0;

const int CLOCK_GET_TIME_RES = 1;

const int CLOCK_ALARM_CURRES = 3;

const int CLOCK_ALARM_MINRES = 4;

const int CLOCK_ALARM_MAXRES = 5;

const int NSEC_PER_USEC = 1000;

const int USEC_PER_SEC = 1000000;

const int NSEC_PER_SEC = 1000000000;

const int NSEC_PER_MSEC = 1000000;

const int ALRMTYPE = 255;

const int TIME_ABSOLUTE = 0;

const int TIME_RELATIVE = 1;

const int DISPATCH_TIME_NOW = 0;

const int DISPATCH_TIME_FOREVER = -1;

const int DISPATCH_APPLY_AUTO_AVAILABLE = 1;

const int DISPATCH_QUEUE_PRIORITY_HIGH = 2;

const int DISPATCH_QUEUE_PRIORITY_DEFAULT = 0;

const int DISPATCH_QUEUE_PRIORITY_LOW = -2;

const int DISPATCH_QUEUE_PRIORITY_BACKGROUND = -32768;

const int DISPATCH_QUEUE_SERIAL = 0;

const int DISPATCH_TARGET_QUEUE_DEFAULT = 0;

const int DISPATCH_CURRENT_QUEUE_LABEL = 0;

const int KERN_SUCCESS = 0;

const int KERN_INVALID_ADDRESS = 1;

const int KERN_PROTECTION_FAILURE = 2;

const int KERN_NO_SPACE = 3;

const int KERN_INVALID_ARGUMENT = 4;

const int KERN_FAILURE = 5;

const int KERN_RESOURCE_SHORTAGE = 6;

const int KERN_NOT_RECEIVER = 7;

const int KERN_NO_ACCESS = 8;

const int KERN_MEMORY_FAILURE = 9;

const int KERN_MEMORY_ERROR = 10;

const int KERN_ALREADY_IN_SET = 11;

const int KERN_NOT_IN_SET = 12;

const int KERN_NAME_EXISTS = 13;

const int KERN_ABORTED = 14;

const int KERN_INVALID_NAME = 15;

const int KERN_INVALID_TASK = 16;

const int KERN_INVALID_RIGHT = 17;

const int KERN_INVALID_VALUE = 18;

const int KERN_UREFS_OVERFLOW = 19;

const int KERN_INVALID_CAPABILITY = 20;

const int KERN_RIGHT_EXISTS = 21;

const int KERN_INVALID_HOST = 22;

const int KERN_MEMORY_PRESENT = 23;

const int KERN_MEMORY_DATA_MOVED = 24;

const int KERN_MEMORY_RESTART_COPY = 25;

const int KERN_INVALID_PROCESSOR_SET = 26;

const int KERN_POLICY_LIMIT = 27;

const int KERN_INVALID_POLICY = 28;

const int KERN_INVALID_OBJECT = 29;

const int KERN_ALREADY_WAITING = 30;

const int KERN_DEFAULT_SET = 31;

const int KERN_EXCEPTION_PROTECTED = 32;

const int KERN_INVALID_LEDGER = 33;

const int KERN_INVALID_MEMORY_CONTROL = 34;

const int KERN_INVALID_SECURITY = 35;

const int KERN_NOT_DEPRESSED = 36;

const int KERN_TERMINATED = 37;

const int KERN_LOCK_SET_DESTROYED = 38;

const int KERN_LOCK_UNSTABLE = 39;

const int KERN_LOCK_OWNED = 40;

const int KERN_LOCK_OWNED_SELF = 41;

const int KERN_SEMAPHORE_DESTROYED = 42;

const int KERN_RPC_SERVER_TERMINATED = 43;

const int KERN_RPC_TERMINATE_ORPHAN = 44;

const int KERN_RPC_CONTINUE_ORPHAN = 45;

const int KERN_NOT_SUPPORTED = 46;

const int KERN_NODE_DOWN = 47;

const int KERN_NOT_WAITING = 48;

const int KERN_OPERATION_TIMED_OUT = 49;

const int KERN_CODESIGN_ERROR = 50;

const int KERN_POLICY_STATIC = 51;

const int KERN_INSUFFICIENT_BUFFER_SIZE = 52;

const int KERN_DENIED = 53;

const int KERN_MISSING_KC = 54;

const int KERN_INVALID_KC = 55;

const int KERN_NOT_FOUND = 56;

const int KERN_RETURN_MAX = 256;

const int MACH_MSGH_BITS_ZERO = 0;

const int MACH_MSGH_BITS_REMOTE_MASK = 31;

const int MACH_MSGH_BITS_LOCAL_MASK = 7936;

const int MACH_MSGH_BITS_VOUCHER_MASK = 2031616;

const int MACH_MSGH_BITS_PORTS_MASK = 2039583;

const int MACH_MSGH_BITS_COMPLEX = 2147483648;

const int MACH_MSGH_BITS_USER = 2149523231;

const int MACH_MSGH_BITS_RAISEIMP = 536870912;

const int MACH_MSGH_BITS_DENAP = 536870912;

const int MACH_MSGH_BITS_IMPHOLDASRT = 268435456;

const int MACH_MSGH_BITS_DENAPHOLDASRT = 268435456;

const int MACH_MSGH_BITS_CIRCULAR = 268435456;

const int MACH_MSGH_BITS_USED = 2954829599;

const int MACH_MSG_TYPE_MOVE_RECEIVE = 16;

const int MACH_MSG_TYPE_MOVE_SEND = 17;

const int MACH_MSG_TYPE_MOVE_SEND_ONCE = 18;

const int MACH_MSG_TYPE_COPY_SEND = 19;

const int MACH_MSG_TYPE_MAKE_SEND = 20;

const int MACH_MSG_TYPE_MAKE_SEND_ONCE = 21;

const int MACH_MSG_TYPE_COPY_RECEIVE = 22;

const int MACH_MSG_TYPE_DISPOSE_RECEIVE = 24;

const int MACH_MSG_TYPE_DISPOSE_SEND = 25;

const int MACH_MSG_TYPE_DISPOSE_SEND_ONCE = 26;

const int MACH_MSG_PHYSICAL_COPY = 0;

const int MACH_MSG_VIRTUAL_COPY = 1;

const int MACH_MSG_ALLOCATE = 2;

const int MACH_MSG_OVERWRITE = 3;

const int MACH_MSG_GUARD_FLAGS_NONE = 0;

const int MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = 1;

const int MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = 2;

const int MACH_MSG_GUARD_FLAGS_MASK = 3;

const int MACH_MSG_PORT_DESCRIPTOR = 0;

const int MACH_MSG_OOL_DESCRIPTOR = 1;

const int MACH_MSG_OOL_PORTS_DESCRIPTOR = 2;

const int MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3;

const int MACH_MSG_GUARDED_PORT_DESCRIPTOR = 4;

const int MACH_MSG_TRAILER_FORMAT_0 = 0;

const int MACH_MSGH_KIND_NORMAL = 0;

const int MACH_MSGH_KIND_NOTIFICATION = 1;

const int MACH_MSG_TYPE_PORT_NONE = 0;

const int MACH_MSG_TYPE_PORT_NAME = 15;

const int MACH_MSG_TYPE_PORT_RECEIVE = 16;

const int MACH_MSG_TYPE_PORT_SEND = 17;

const int MACH_MSG_TYPE_PORT_SEND_ONCE = 18;

const int MACH_MSG_TYPE_LAST = 22;

const int MACH_MSG_OPTION_NONE = 0;

const int MACH_SEND_MSG = 1;

const int MACH_RCV_MSG = 2;

const int MACH_RCV_LARGE = 4;

const int MACH_RCV_LARGE_IDENTITY = 8;

const int MACH_SEND_TIMEOUT = 16;

const int MACH_SEND_OVERRIDE = 32;

const int MACH_SEND_INTERRUPT = 64;

const int MACH_SEND_NOTIFY = 128;

const int MACH_SEND_ALWAYS = 65536;

const int MACH_SEND_FILTER_NONFATAL = 65536;

const int MACH_SEND_TRAILER = 131072;

const int MACH_SEND_NOIMPORTANCE = 262144;

const int MACH_SEND_NODENAP = 262144;

const int MACH_SEND_IMPORTANCE = 524288;

const int MACH_SEND_SYNC_OVERRIDE = 1048576;

const int MACH_SEND_PROPAGATE_QOS = 2097152;

const int MACH_SEND_SYNC_USE_THRPRI = 2097152;

const int MACH_SEND_KERNEL = 4194304;

const int MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = 8388608;

const int MACH_RCV_TIMEOUT = 256;

const int MACH_RCV_NOTIFY = 0;

const int MACH_RCV_INTERRUPT = 1024;

const int MACH_RCV_VOUCHER = 2048;

const int MACH_RCV_OVERWRITE = 0;

const int MACH_RCV_GUARDED_DESC = 4096;

const int MACH_RCV_SYNC_WAIT = 16384;

const int MACH_RCV_SYNC_PEEK = 32768;

const int MACH_MSG_STRICT_REPLY = 512;

const int MACH_RCV_TRAILER_NULL = 0;

const int MACH_RCV_TRAILER_SEQNO = 1;

const int MACH_RCV_TRAILER_SENDER = 2;

const int MACH_RCV_TRAILER_AUDIT = 3;

const int MACH_RCV_TRAILER_CTX = 4;

const int MACH_RCV_TRAILER_AV = 7;

const int MACH_RCV_TRAILER_LABELS = 8;

const int MACH_RCV_TRAILER_MASK = 251658240;

const int MACH_MSG_SUCCESS = 0;

const int MACH_MSG_MASK = 15872;

const int MACH_MSG_IPC_SPACE = 8192;

const int MACH_MSG_VM_SPACE = 4096;

const int MACH_MSG_IPC_KERNEL = 2048;

const int MACH_MSG_VM_KERNEL = 1024;

const int MACH_SEND_IN_PROGRESS = 268435457;

const int MACH_SEND_INVALID_DATA = 268435458;

const int MACH_SEND_INVALID_DEST = 268435459;

const int MACH_SEND_TIMED_OUT = 268435460;

const int MACH_SEND_INVALID_VOUCHER = 268435461;

const int MACH_SEND_INTERRUPTED = 268435463;

const int MACH_SEND_MSG_TOO_SMALL = 268435464;

const int MACH_SEND_INVALID_REPLY = 268435465;

const int MACH_SEND_INVALID_RIGHT = 268435466;

const int MACH_SEND_INVALID_NOTIFY = 268435467;

const int MACH_SEND_INVALID_MEMORY = 268435468;

const int MACH_SEND_NO_BUFFER = 268435469;

const int MACH_SEND_TOO_LARGE = 268435470;

const int MACH_SEND_INVALID_TYPE = 268435471;

const int MACH_SEND_INVALID_HEADER = 268435472;

const int MACH_SEND_INVALID_TRAILER = 268435473;

const int MACH_SEND_INVALID_CONTEXT = 268435474;

const int MACH_SEND_INVALID_RT_OOL_SIZE = 268435477;

const int MACH_SEND_NO_GRANT_DEST = 268435478;

const int MACH_SEND_MSG_FILTERED = 268435479;

const int MACH_RCV_IN_PROGRESS = 268451841;

const int MACH_RCV_INVALID_NAME = 268451842;

const int MACH_RCV_TIMED_OUT = 268451843;

const int MACH_RCV_TOO_LARGE = 268451844;

const int MACH_RCV_INTERRUPTED = 268451845;

const int MACH_RCV_PORT_CHANGED = 268451846;

const int MACH_RCV_INVALID_NOTIFY = 268451847;

const int MACH_RCV_INVALID_DATA = 268451848;

const int MACH_RCV_PORT_DIED = 268451849;

const int MACH_RCV_IN_SET = 268451850;

const int MACH_RCV_HEADER_ERROR = 268451851;

const int MACH_RCV_BODY_ERROR = 268451852;

const int MACH_RCV_INVALID_TYPE = 268451853;

const int MACH_RCV_SCATTER_SMALL = 268451854;

const int MACH_RCV_INVALID_TRAILER = 268451855;

const int MACH_RCV_IN_PROGRESS_TIMED = 268451857;

const int MACH_RCV_INVALID_REPLY = 268451858;

const int DISPATCH_MACH_SEND_DEAD = 1;

const int DISPATCH_MEMORYPRESSURE_NORMAL = 1;

const int DISPATCH_MEMORYPRESSURE_WARN = 2;

const int DISPATCH_MEMORYPRESSURE_CRITICAL = 4;

const int DISPATCH_PROC_EXIT = 2147483648;

const int DISPATCH_PROC_FORK = 1073741824;

const int DISPATCH_PROC_EXEC = 536870912;

const int DISPATCH_PROC_SIGNAL = 134217728;

const int DISPATCH_VNODE_DELETE = 1;

const int DISPATCH_VNODE_WRITE = 2;

const int DISPATCH_VNODE_EXTEND = 4;

const int DISPATCH_VNODE_ATTRIB = 8;

const int DISPATCH_VNODE_LINK = 16;

const int DISPATCH_VNODE_RENAME = 32;

const int DISPATCH_VNODE_REVOKE = 64;

const int DISPATCH_VNODE_FUNLOCK = 256;

const int DISPATCH_TIMER_STRICT = 1;

const int DISPATCH_ONCE_INLINE_FASTPATH = 1;

const int DISPATCH_DATA_DESTRUCTOR_DEFAULT = 0;

const int DISPATCH_IO_STREAM = 0;

const int DISPATCH_IO_RANDOM = 1;

const int DISPATCH_IO_STOP = 1;

const int DISPATCH_IO_STRICT_INTERVAL = 1;

const int __COREFOUNDATION_CFSET__ = 1;

const int __COREFOUNDATION_CFSTRINGENCODINGEXT__ = 1;

const int __COREFOUNDATION_CFTREE__ = 1;

const int __COREFOUNDATION_CFURLACCESS__ = 1;

const int __COREFOUNDATION_CFUUID__ = 1;

const int __COREFOUNDATION_CFUTILITIES__ = 1;

const int __COREFOUNDATION_CFBUNDLE__ = 1;

const int CPU_STATE_MAX = 4;

const int CPU_STATE_USER = 0;

const int CPU_STATE_SYSTEM = 1;

const int CPU_STATE_IDLE = 2;

const int CPU_STATE_NICE = 3;

const int CPU_ARCH_MASK = 4278190080;

const int CPU_ARCH_ABI64 = 16777216;

const int CPU_ARCH_ABI64_32 = 33554432;

const int CPU_SUBTYPE_MASK = 4278190080;

const int CPU_SUBTYPE_LIB64 = 2147483648;

const int CPU_SUBTYPE_PTRAUTH_ABI = 2147483648;

const int CPU_SUBTYPE_INTEL_FAMILY_MAX = 15;

const int CPU_SUBTYPE_INTEL_MODEL_ALL = 0;

const int CPU_SUBTYPE_ARM64_PTR_AUTH_MASK = 251658240;

const int CPUFAMILY_UNKNOWN = 0;

const int CPUFAMILY_POWERPC_G3 = 3471054153;

const int CPUFAMILY_POWERPC_G4 = 2009171118;

const int CPUFAMILY_POWERPC_G5 = 3983988906;

const int CPUFAMILY_INTEL_6_13 = 2855483691;

const int CPUFAMILY_INTEL_PENRYN = 2028621756;

const int CPUFAMILY_INTEL_NEHALEM = 1801080018;

const int CPUFAMILY_INTEL_WESTMERE = 1463508716;

const int CPUFAMILY_INTEL_SANDYBRIDGE = 1418770316;

const int CPUFAMILY_INTEL_IVYBRIDGE = 526772277;

const int CPUFAMILY_INTEL_HASWELL = 280134364;

const int CPUFAMILY_INTEL_BROADWELL = 1479463068;

const int CPUFAMILY_INTEL_SKYLAKE = 939270559;

const int CPUFAMILY_INTEL_KABYLAKE = 260141638;

const int CPUFAMILY_INTEL_ICELAKE = 943936839;

const int CPUFAMILY_INTEL_COMETLAKE = 486055998;

const int CPUFAMILY_ARM_9 = 3878847406;

const int CPUFAMILY_ARM_11 = 2415272152;

const int CPUFAMILY_ARM_XSCALE = 1404044789;

const int CPUFAMILY_ARM_12 = 3172666089;

const int CPUFAMILY_ARM_13 = 214503012;

const int CPUFAMILY_ARM_14 = 2517073649;

const int CPUFAMILY_ARM_15 = 2823887818;

const int CPUFAMILY_ARM_SWIFT = 506291073;

const int CPUFAMILY_ARM_CYCLONE = 933271106;

const int CPUFAMILY_ARM_TYPHOON = 747742334;

const int CPUFAMILY_ARM_TWISTER = 2465937352;

const int CPUFAMILY_ARM_HURRICANE = 1741614739;

const int CPUFAMILY_ARM_MONSOON_MISTRAL = 3894312694;

const int CPUFAMILY_ARM_VORTEX_TEMPEST = 131287967;

const int CPUFAMILY_ARM_LIGHTNING_THUNDER = 1176831186;

const int CPUFAMILY_ARM_FIRESTORM_ICESTORM = 458787763;

const int CPUFAMILY_ARM_BLIZZARD_AVALANCHE = 3660830781;

const int CPUSUBFAMILY_UNKNOWN = 0;

const int CPUSUBFAMILY_ARM_HP = 1;

const int CPUSUBFAMILY_ARM_HG = 2;

const int CPUSUBFAMILY_ARM_M = 3;

const int CPUSUBFAMILY_ARM_HS = 4;

const int CPUSUBFAMILY_ARM_HC_HD = 5;

const int CPUFAMILY_INTEL_6_23 = 2028621756;

const int CPUFAMILY_INTEL_6_26 = 1801080018;

const int __COREFOUNDATION_CFMESSAGEPORT__ = 1;

const int __COREFOUNDATION_CFPLUGIN__ = 1;

const int COREFOUNDATION_CFPLUGINCOM_SEPARATE = 1;

const int __COREFOUNDATION_CFMACHPORT__ = 1;

const int __COREFOUNDATION_CFATTRIBUTEDSTRING__ = 1;

const int __COREFOUNDATION_CFURLENUMERATOR__ = 1;

const int __COREFOUNDATION_CFFILESECURITY__ = 1;

const int KAUTH_GUID_SIZE = 16;

const int KAUTH_NTSID_MAX_AUTHORITIES = 16;

const int KAUTH_NTSID_HDRSIZE = 8;

const int KAUTH_EXTLOOKUP_SUCCESS = 0;

const int KAUTH_EXTLOOKUP_BADRQ = 1;

const int KAUTH_EXTLOOKUP_FAILURE = 2;

const int KAUTH_EXTLOOKUP_FATAL = 3;

const int KAUTH_EXTLOOKUP_INPROG = 100;

const int KAUTH_EXTLOOKUP_VALID_UID = 1;

const int KAUTH_EXTLOOKUP_VALID_UGUID = 2;

const int KAUTH_EXTLOOKUP_VALID_USID = 4;

const int KAUTH_EXTLOOKUP_VALID_GID = 8;

const int KAUTH_EXTLOOKUP_VALID_GGUID = 16;

const int KAUTH_EXTLOOKUP_VALID_GSID = 32;

const int KAUTH_EXTLOOKUP_WANT_UID = 64;

const int KAUTH_EXTLOOKUP_WANT_UGUID = 128;

const int KAUTH_EXTLOOKUP_WANT_USID = 256;

const int KAUTH_EXTLOOKUP_WANT_GID = 512;

const int KAUTH_EXTLOOKUP_WANT_GGUID = 1024;

const int KAUTH_EXTLOOKUP_WANT_GSID = 2048;

const int KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = 4096;

const int KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = 8192;

const int KAUTH_EXTLOOKUP_ISMEMBER = 16384;

const int KAUTH_EXTLOOKUP_VALID_PWNAM = 32768;

const int KAUTH_EXTLOOKUP_WANT_PWNAM = 65536;

const int KAUTH_EXTLOOKUP_VALID_GRNAM = 131072;

const int KAUTH_EXTLOOKUP_WANT_GRNAM = 262144;

const int KAUTH_EXTLOOKUP_VALID_SUPGRPS = 524288;

const int KAUTH_EXTLOOKUP_WANT_SUPGRPS = 1048576;

const int KAUTH_EXTLOOKUP_REGISTER = 0;

const int KAUTH_EXTLOOKUP_RESULT = 1;

const int KAUTH_EXTLOOKUP_WORKER = 2;

const int KAUTH_EXTLOOKUP_DEREGISTER = 4;

const int KAUTH_GET_CACHE_SIZES = 8;

const int KAUTH_SET_CACHE_SIZES = 16;

const int KAUTH_CLEAR_CACHES = 32;

const String IDENTITYSVC_ENTITLEMENT = 'com.apple.private.identitysvc';

const int KAUTH_ACE_KINDMASK = 15;

const int KAUTH_ACE_PERMIT = 1;

const int KAUTH_ACE_DENY = 2;

const int KAUTH_ACE_AUDIT = 3;

const int KAUTH_ACE_ALARM = 4;

const int KAUTH_ACE_INHERITED = 16;

const int KAUTH_ACE_FILE_INHERIT = 32;

const int KAUTH_ACE_DIRECTORY_INHERIT = 64;

const int KAUTH_ACE_LIMIT_INHERIT = 128;

const int KAUTH_ACE_ONLY_INHERIT = 256;

const int KAUTH_ACE_SUCCESS = 512;

const int KAUTH_ACE_FAILURE = 1024;

const int KAUTH_ACE_INHERIT_CONTROL_FLAGS = 480;

const int KAUTH_ACE_GENERIC_ALL = 2097152;

const int KAUTH_ACE_GENERIC_EXECUTE = 4194304;

const int KAUTH_ACE_GENERIC_WRITE = 8388608;

const int KAUTH_ACE_GENERIC_READ = 16777216;

const int KAUTH_ACL_MAX_ENTRIES = 128;

const int KAUTH_ACL_FLAGS_PRIVATE = 65535;

const int KAUTH_ACL_DEFER_INHERIT = 65536;

const int KAUTH_ACL_NO_INHERIT = 131072;

const int KAUTH_FILESEC_MAGIC = 19710317;

const int KAUTH_FILESEC_FLAGS_PRIVATE = 65535;

const int KAUTH_FILESEC_DEFER_INHERIT = 65536;

const int KAUTH_FILESEC_NO_INHERIT = 131072;

const String KAUTH_FILESEC_XATTR = 'com.apple.system.Security';

const int KAUTH_ENDIAN_HOST = 1;

const int KAUTH_ENDIAN_DISK = 2;

const int KAUTH_VNODE_READ_DATA = 2;

const int KAUTH_VNODE_LIST_DIRECTORY = 2;

const int KAUTH_VNODE_WRITE_DATA = 4;

const int KAUTH_VNODE_ADD_FILE = 4;

const int KAUTH_VNODE_EXECUTE = 8;

const int KAUTH_VNODE_SEARCH = 8;

const int KAUTH_VNODE_DELETE = 16;

const int KAUTH_VNODE_APPEND_DATA = 32;

const int KAUTH_VNODE_ADD_SUBDIRECTORY = 32;

const int KAUTH_VNODE_DELETE_CHILD = 64;

const int KAUTH_VNODE_READ_ATTRIBUTES = 128;

const int KAUTH_VNODE_WRITE_ATTRIBUTES = 256;

const int KAUTH_VNODE_READ_EXTATTRIBUTES = 512;

const int KAUTH_VNODE_WRITE_EXTATTRIBUTES = 1024;

const int KAUTH_VNODE_READ_SECURITY = 2048;

const int KAUTH_VNODE_WRITE_SECURITY = 4096;

const int KAUTH_VNODE_TAKE_OWNERSHIP = 8192;

const int KAUTH_VNODE_CHANGE_OWNER = 8192;

const int KAUTH_VNODE_SYNCHRONIZE = 1048576;

const int KAUTH_VNODE_LINKTARGET = 33554432;

const int KAUTH_VNODE_CHECKIMMUTABLE = 67108864;

const int KAUTH_VNODE_ACCESS = 2147483648;

const int KAUTH_VNODE_NOIMMUTABLE = 1073741824;

const int KAUTH_VNODE_SEARCHBYANYONE = 536870912;

const int KAUTH_VNODE_GENERIC_READ_BITS = 2690;

const int KAUTH_VNODE_GENERIC_WRITE_BITS = 5492;

const int KAUTH_VNODE_GENERIC_EXECUTE_BITS = 8;

const int KAUTH_VNODE_GENERIC_ALL_BITS = 8190;

const int KAUTH_VNODE_WRITE_RIGHTS = 100676980;

const int __DARWIN_ACL_READ_DATA = 2;

const int __DARWIN_ACL_LIST_DIRECTORY = 2;

const int __DARWIN_ACL_WRITE_DATA = 4;

const int __DARWIN_ACL_ADD_FILE = 4;

const int __DARWIN_ACL_EXECUTE = 8;

const int __DARWIN_ACL_SEARCH = 8;

const int __DARWIN_ACL_DELETE = 16;

const int __DARWIN_ACL_APPEND_DATA = 32;

const int __DARWIN_ACL_ADD_SUBDIRECTORY = 32;

const int __DARWIN_ACL_DELETE_CHILD = 64;

const int __DARWIN_ACL_READ_ATTRIBUTES = 128;

const int __DARWIN_ACL_WRITE_ATTRIBUTES = 256;

const int __DARWIN_ACL_READ_EXTATTRIBUTES = 512;

const int __DARWIN_ACL_WRITE_EXTATTRIBUTES = 1024;

const int __DARWIN_ACL_READ_SECURITY = 2048;

const int __DARWIN_ACL_WRITE_SECURITY = 4096;

const int __DARWIN_ACL_CHANGE_OWNER = 8192;

const int __DARWIN_ACL_SYNCHRONIZE = 1048576;

const int __DARWIN_ACL_EXTENDED_ALLOW = 1;

const int __DARWIN_ACL_EXTENDED_DENY = 2;

const int __DARWIN_ACL_ENTRY_INHERITED = 16;

const int __DARWIN_ACL_ENTRY_FILE_INHERIT = 32;

const int __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = 64;

const int __DARWIN_ACL_ENTRY_LIMIT_INHERIT = 128;

const int __DARWIN_ACL_ENTRY_ONLY_INHERIT = 256;

const int __DARWIN_ACL_FLAG_NO_INHERIT = 131072;

const int ACL_MAX_ENTRIES = 128;

const int ACL_UNDEFINED_ID = 0;

const int __COREFOUNDATION_CFSTRINGTOKENIZER__ = 1;

const int __COREFOUNDATION_CFFILEDESCRIPTOR__ = 1;

const int __COREFOUNDATION_CFUSERNOTIFICATION__ = 1;

const int __COREFOUNDATION_CFXMLNODE__ = 1;

const int __COREFOUNDATION_CFXMLPARSER__ = 1;

const int ADL_TRUE = 1;

const int ADL_FALSE = 0;

const int ADL_PMLOG_MAX_SENSORS = 256;

const int ADL_MAX_CHAR = 4096;

const int ADL_MAX_PATH = 256;

const int ADL_MAX_ADAPTERS = 250;

const int ADL_MAX_DISPLAYS = 150;

const int ADL_MAX_DEVICENAME = 32;

const int ADL_ADAPTER_INDEX_ALL = -1;

const int ADL_OK_WAIT = 4;

const int ADL_OK_RESTART = 3;

const int ADL_OK_MODE_CHANGE = 2;

const int ADL_OK_WARNING = 1;

const int ADL_OK = 0;

const int ADL_ERR = -1;

const int ADL_ERR_NOT_INIT = -2;

const int ADL_ERR_INVALID_PARAM = -3;

const int ADL_ERR_INVALID_PARAM_SIZE = -4;

const int ADL_ERR_INVALID_ADL_IDX = -5;

const int ADL_ERR_INVALID_CONTROLLER_IDX = -6;

const int ADL_ERR_INVALID_DIPLAY_IDX = -7;

const int ADL_ERR_NOT_SUPPORTED = -8;

const int ADL_ERR_NULL_POINTER = -9;

const int ADL_ERR_DISABLED_ADAPTER = -10;

const int ADL_ERR_INVALID_CALLBACK = -11;

const int ADL_ERR_RESOURCE_CONFLICT = -12;

const int ADL_ERR_SET_INCOMPLETE = -20;

const int ADL_ERR_NO_XDISPLAY = -21;

const int ADL_DL_FANCTRL_SPEED_TYPE_PERCENT = 1;

const int ADL_DL_FANCTRL_SPEED_TYPE_RPM = 2;

const int ADL_DL_FANCTRL_FLAG_USER_DEFINED_SPEED = 1;

const int NVAPI_GENERIC_STRING_MAX = 4096;

const int NVAPI_LONG_STRING_MAX = 256;

const int NVAPI_SHORT_STRING_MAX = 64;

const int NVAPI_MAX_PHYSICAL_GPUS = 64;

const int nvmlClocksThrottleReasonGpuIdle = 1;

const int nvmlClocksThrottleReasonApplicationsClocksSetting = 2;

const int nvmlClocksThrottleReasonUserDefinedClocks = 2;

const int nvmlClocksThrottleReasonSwPowerCap = 4;

const int nvmlClocksThrottleReasonHwSlowdown = 8;

const int nvmlClocksThrottleReasonUnknown = -9223372036854775808;

const int nvmlClocksThrottleReasonNone = 0;

const int VM_PAGE_QUERY_PAGE_PRESENT = 1;

const int VM_PAGE_QUERY_PAGE_FICTITIOUS = 2;

const int VM_PAGE_QUERY_PAGE_REF = 4;

const int VM_PAGE_QUERY_PAGE_DIRTY = 8;

const int VM_PAGE_QUERY_PAGE_PAGED_OUT = 16;

const int VM_PAGE_QUERY_PAGE_COPIED = 32;

const int VM_PAGE_QUERY_PAGE_SPECULATIVE = 64;

const int VM_PAGE_QUERY_PAGE_EXTERNAL = 128;

const int VM_PAGE_QUERY_PAGE_CS_VALIDATED = 256;

const int VM_PAGE_QUERY_PAGE_CS_TAINTED = 512;

const int VM_PAGE_QUERY_PAGE_CS_NX = 1024;

const int VM_PAGE_QUERY_PAGE_REUSABLE = 2048;

const int VM_FLAGS_FIXED = 0;

const int VM_FLAGS_ANYWHERE = 1;

const int VM_FLAGS_PURGABLE = 2;

const int VM_FLAGS_4GB_CHUNK = 4;

const int VM_FLAGS_RANDOM_ADDR = 8;

const int VM_FLAGS_NO_CACHE = 16;

const int VM_FLAGS_RESILIENT_CODESIGN = 32;

const int VM_FLAGS_RESILIENT_MEDIA = 64;

const int VM_FLAGS_PERMANENT = 128;

const int VM_FLAGS_OVERWRITE = 16384;

const int VM_FLAGS_SUPERPAGE_MASK = 458752;

const int VM_FLAGS_RETURN_DATA_ADDR = 1048576;

const int VM_FLAGS_RETURN_4K_DATA_ADDR = 8388608;

const int VM_FLAGS_ALIAS_MASK = 4278190080;

const int VM_FLAGS_USER_ALLOCATE = 4278665375;

const int VM_FLAGS_USER_MAP = 4288102559;

const int VM_FLAGS_USER_REMAP = 1065065;

const int VM_FLAGS_SUPERPAGE_SHIFT = 16;

const int SUPERPAGE_NONE = 0;

const int SUPERPAGE_SIZE_ANY = 1;

const int VM_FLAGS_SUPERPAGE_NONE = 0;

const int VM_FLAGS_SUPERPAGE_SIZE_ANY = 65536;

const int SUPERPAGE_SIZE_2MB = 2;

const int VM_FLAGS_SUPERPAGE_SIZE_2MB = 131072;

const int GUARD_TYPE_VIRT_MEMORY = 5;

const int __VM_LEDGER_ACCOUNTING_POSTMARK = 2019032600;

const int VM_LEDGER_TAG_NONE = 0;

const int VM_LEDGER_TAG_DEFAULT = 1;

const int VM_LEDGER_TAG_NETWORK = 2;

const int VM_LEDGER_TAG_MEDIA = 3;

const int VM_LEDGER_TAG_GRAPHICS = 4;

const int VM_LEDGER_TAG_NEURAL = 5;

const int VM_LEDGER_TAG_MAX = 5;

const int VM_LEDGER_FLAG_NO_FOOTPRINT = 1;

const int VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG = 2;

const int VM_LEDGER_FLAGS = 3;

const int VM_MEMORY_MALLOC = 1;

const int VM_MEMORY_MALLOC_SMALL = 2;

const int VM_MEMORY_MALLOC_LARGE = 3;

const int VM_MEMORY_MALLOC_HUGE = 4;

const int VM_MEMORY_SBRK = 5;

const int VM_MEMORY_REALLOC = 6;

const int VM_MEMORY_MALLOC_TINY = 7;

const int VM_MEMORY_MALLOC_LARGE_REUSABLE = 8;

const int VM_MEMORY_MALLOC_LARGE_REUSED = 9;

const int VM_MEMORY_ANALYSIS_TOOL = 10;

const int VM_MEMORY_MALLOC_NANO = 11;

const int VM_MEMORY_MALLOC_MEDIUM = 12;

const int VM_MEMORY_MALLOC_PGUARD = 13;

const int VM_MEMORY_MALLOC_PROB_GUARD = 13;

const int VM_MEMORY_MACH_MSG = 20;

const int VM_MEMORY_IOKIT = 21;

const int VM_MEMORY_STACK = 30;

const int VM_MEMORY_GUARD = 31;

const int VM_MEMORY_SHARED_PMAP = 32;

const int VM_MEMORY_DYLIB = 33;

const int VM_MEMORY_OBJC_DISPATCHERS = 34;

const int VM_MEMORY_UNSHARED_PMAP = 35;

const int VM_MEMORY_APPKIT = 40;

const int VM_MEMORY_FOUNDATION = 41;

const int VM_MEMORY_COREGRAPHICS = 42;

const int VM_MEMORY_CORESERVICES = 43;

const int VM_MEMORY_CARBON = 43;

const int VM_MEMORY_JAVA = 44;

const int VM_MEMORY_COREDATA = 45;

const int VM_MEMORY_COREDATA_OBJECTIDS = 46;

const int VM_MEMORY_ATS = 50;

const int VM_MEMORY_LAYERKIT = 51;

const int VM_MEMORY_CGIMAGE = 52;

const int VM_MEMORY_TCMALLOC = 53;

const int VM_MEMORY_COREGRAPHICS_DATA = 54;

const int VM_MEMORY_COREGRAPHICS_SHARED = 55;

const int VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS = 56;

const int VM_MEMORY_COREGRAPHICS_BACKINGSTORES = 57;

const int VM_MEMORY_COREGRAPHICS_XALLOC = 58;

const int VM_MEMORY_COREGRAPHICS_MISC = 42;

const int VM_MEMORY_DYLD = 60;

const int VM_MEMORY_DYLD_MALLOC = 61;

const int VM_MEMORY_SQLITE = 62;

const int VM_MEMORY_JAVASCRIPT_CORE = 63;

const int VM_MEMORY_WEBASSEMBLY = 63;

const int VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR = 64;

const int VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE = 65;

const int VM_MEMORY_GLSL = 66;

const int VM_MEMORY_OPENCL = 67;

const int VM_MEMORY_COREIMAGE = 68;

const int VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS = 69;

const int VM_MEMORY_IMAGEIO = 70;

const int VM_MEMORY_COREPROFILE = 71;

const int VM_MEMORY_ASSETSD = 72;

const int VM_MEMORY_OS_ALLOC_ONCE = 73;

const int VM_MEMORY_LIBDISPATCH = 74;

const int VM_MEMORY_ACCELERATE = 75;

const int VM_MEMORY_COREUI = 76;

const int VM_MEMORY_COREUIFILE = 77;

const int VM_MEMORY_GENEALOGY = 78;

const int VM_MEMORY_RAWCAMERA = 79;

const int VM_MEMORY_CORPSEINFO = 80;

const int VM_MEMORY_ASL = 81;

const int VM_MEMORY_SWIFT_RUNTIME = 82;

const int VM_MEMORY_SWIFT_METADATA = 83;

const int VM_MEMORY_DHMM = 84;

const int VM_MEMORY_SCENEKIT = 86;

const int VM_MEMORY_SKYWALK = 87;

const int VM_MEMORY_IOSURFACE = 88;

const int VM_MEMORY_LIBNETWORK = 89;

const int VM_MEMORY_AUDIO = 90;

const int VM_MEMORY_VIDEOBITSTREAM = 91;

const int VM_MEMORY_CM_XPC = 92;

const int VM_MEMORY_CM_RPC = 93;

const int VM_MEMORY_CM_MEMORYPOOL = 94;

const int VM_MEMORY_CM_READCACHE = 95;

const int VM_MEMORY_CM_CRABS = 96;

const int VM_MEMORY_QUICKLOOK_THUMBNAILS = 97;

const int VM_MEMORY_ACCOUNTS = 98;

const int VM_MEMORY_SANITIZER = 99;

const int VM_MEMORY_IOACCELERATOR = 100;

const int VM_MEMORY_CM_REGWARP = 101;

const int VM_MEMORY_EAR_DECODER = 102;

const int VM_MEMORY_COREUI_CACHED_IMAGE_DATA = 103;

const int VM_MEMORY_COLORSYNC = 104;

const int VM_MEMORY_ROSETTA = 230;

const int VM_MEMORY_ROSETTA_THREAD_CONTEXT = 231;

const int VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP = 232;

const int VM_MEMORY_ROSETTA_RETURN_STACK = 233;

const int VM_MEMORY_ROSETTA_EXECUTABLE_HEAP = 234;

const int VM_MEMORY_ROSETTA_USER_LDT = 235;

const int VM_MEMORY_ROSETTA_ARENA = 236;

const int VM_MEMORY_ROSETTA_10 = 239;

const int VM_MEMORY_APPLICATION_SPECIFIC_1 = 240;

const int VM_MEMORY_APPLICATION_SPECIFIC_16 = 255;

const int HOST_INFO_MAX = 1024;

const int KERNEL_VERSION_MAX = 512;

const int KERNEL_BOOT_INFO_MAX = 4096;

const int HOST_BASIC_INFO = 1;

const int HOST_SCHED_INFO = 3;

const int HOST_RESOURCE_SIZES = 4;

const int HOST_PRIORITY_INFO = 5;

const int HOST_SEMAPHORE_TRAPS = 7;

const int HOST_MACH_MSG_TRAP = 8;

const int HOST_VM_PURGABLE = 9;

const int HOST_DEBUG_INFO_INTERNAL = 10;

const int HOST_CAN_HAS_DEBUGGER = 11;

const int HOST_PREFERRED_USER_ARCH = 12;

const int HOST_LOAD_INFO = 1;

const int HOST_VM_INFO = 2;

const int HOST_CPU_LOAD_INFO = 3;

const int HOST_VM_INFO64 = 4;

const int HOST_EXTMOD_INFO64 = 5;

const int HOST_EXPIRED_TASK_INFO = 6;

const int HOST_NOTIFY_CALENDAR_CHANGE = 0;

const int HOST_NOTIFY_CALENDAR_SET = 1;

const int HOST_NOTIFY_TYPE_MAX = 1;

const int HOST_CALENDAR_CHANGED_REPLYID = 950;

const int HOST_CALENDAR_SET_REPLYID = 951;

const int HOST_SECURITY_PORT = 0;

const int HOST_MIN_SPECIAL_PORT = 0;

const int HOST_PORT = 1;

const int HOST_PRIV_PORT = 2;

const int HOST_IO_MASTER_PORT = 3;

const int HOST_MAX_SPECIAL_KERNEL_PORT = 7;

const int HOST_LAST_SPECIAL_KERNEL_PORT = 3;

const int HOST_DYNAMIC_PAGER_PORT = 8;

const int HOST_AUDIT_CONTROL_PORT = 9;

const int HOST_USER_NOTIFICATION_PORT = 10;

const int HOST_AUTOMOUNTD_PORT = 11;

const int HOST_LOCKD_PORT = 12;

const int HOST_KTRACE_BACKGROUND_PORT = 13;

const int HOST_SEATBELT_PORT = 14;

const int HOST_KEXTD_PORT = 15;

const int HOST_LAUNCHCTL_PORT = 16;

const int HOST_UNFREED_PORT = 17;

const int HOST_AMFID_PORT = 18;

const int HOST_GSSD_PORT = 19;

const int HOST_TELEMETRY_PORT = 20;

const int HOST_ATM_NOTIFICATION_PORT = 21;

const int HOST_COALITION_PORT = 22;

const int HOST_SYSDIAGNOSE_PORT = 23;

const int HOST_XPC_EXCEPTION_PORT = 24;

const int HOST_CONTAINERD_PORT = 25;

const int HOST_NODE_PORT = 26;

const int HOST_RESOURCE_NOTIFY_PORT = 27;

const int HOST_CLOSURED_PORT = 28;

const int HOST_SYSPOLICYD_PORT = 29;

const int HOST_FILECOORDINATIOND_PORT = 30;

const int HOST_FAIRPLAYD_PORT = 31;

const int HOST_IOCOMPRESSIONSTATS_PORT = 32;

const int HOST_MAX_SPECIAL_PORT = 32;

const int HOST_CHUD_PORT = 16;

const int HOST_LOCAL_NODE = -1;

const int PPNUM_MAX = 4294967295;

const int MEMORY_OBJECT_COPY_NONE = 0;

const int MEMORY_OBJECT_COPY_CALL = 1;

const int MEMORY_OBJECT_COPY_DELAY = 2;

const int MEMORY_OBJECT_COPY_TEMPORARY = 3;

const int MEMORY_OBJECT_COPY_SYMMETRIC = 4;

const int MEMORY_OBJECT_COPY_INVALID = 5;

const int MEMORY_OBJECT_RETURN_NONE = 0;

const int MEMORY_OBJECT_RETURN_DIRTY = 1;

const int MEMORY_OBJECT_RETURN_ALL = 2;

const int MEMORY_OBJECT_RETURN_ANYTHING = 3;

const int MEMORY_OBJECT_DATA_FLUSH = 1;

const int MEMORY_OBJECT_DATA_NO_CHANGE = 2;

const int MEMORY_OBJECT_DATA_PURGE = 4;

const int MEMORY_OBJECT_COPY_SYNC = 8;

const int MEMORY_OBJECT_DATA_SYNC = 16;

const int MEMORY_OBJECT_IO_SYNC = 32;

const int MEMORY_OBJECT_DATA_FLUSH_ALL = 64;

const int MEMORY_OBJECT_INFO_MAX = 1024;

const int MEMORY_OBJECT_PERFORMANCE_INFO = 11;

const int MEMORY_OBJECT_ATTRIBUTE_INFO = 14;

const int MEMORY_OBJECT_BEHAVIOR_INFO = 15;

const int MEMORY_OBJECT_TERMINATE_IDLE = 1;

const int MEMORY_OBJECT_RESPECT_CACHE = 2;

const int MEMORY_OBJECT_RELEASE_NO_OP = 4;

const int MAP_MEM_NOOP = 0;

const int MAP_MEM_COPYBACK = 1;

const int MAP_MEM_IO = 2;

const int MAP_MEM_WTHRU = 3;

const int MAP_MEM_WCOMB = 4;

const int MAP_MEM_INNERWBACK = 5;

const int MAP_MEM_POSTED = 6;

const int MAP_MEM_RT = 7;

const int MAP_MEM_POSTED_REORDERED = 8;

const int MAP_MEM_POSTED_COMBINED_REORDERED = 9;

const int MAP_MEM_LEDGER_TAGGED = 8192;

const int MAP_MEM_PURGABLE_KERNEL_ONLY = 16384;

const int MAP_MEM_GRAB_SECLUDED = 32768;

const int MAP_MEM_ONLY = 65536;

const int MAP_MEM_NAMED_CREATE = 131072;

const int MAP_MEM_PURGABLE = 262144;

const int MAP_MEM_NAMED_REUSE = 524288;

const int MAP_MEM_USE_DATA_ADDR = 1048576;

const int MAP_MEM_VM_COPY = 2097152;

const int MAP_MEM_VM_SHARE = 4194304;

const int MAP_MEM_4K_DATA_ADDR = 8388608;

const int MAP_MEM_FLAGS_MASK = 16776960;

const int MAP_MEM_FLAGS_USER = 16769024;

const int MAP_MEM_FLAGS_ALL = 16769024;

const int EXC_TYPES_COUNT = 14;

const int EXC_MASK_MACHINE = 0;

const int EXCEPTION_CODE_MAX = 2;

const int EXC_ARM_UNDEFINED = 1;

const int EXC_ARM_FP_UNDEFINED = 0;

const int EXC_ARM_FP_IO = 1;

const int EXC_ARM_FP_DZ = 2;

const int EXC_ARM_FP_OF = 3;

const int EXC_ARM_FP_UF = 4;

const int EXC_ARM_FP_IX = 5;

const int EXC_ARM_FP_ID = 6;

const int EXC_ARM_DA_ALIGN = 257;

const int EXC_ARM_DA_DEBUG = 258;

const int EXC_ARM_SP_ALIGN = 259;

const int EXC_ARM_SWP = 260;

const int EXC_ARM_PAC_FAIL = 261;

const int EXC_ARM_BREAKPOINT = 1;

const int EXC_BAD_ACCESS = 1;

const int EXC_BAD_INSTRUCTION = 2;

const int EXC_ARITHMETIC = 3;

const int EXC_EMULATION = 4;

const int EXC_SOFTWARE = 5;

const int EXC_BREAKPOINT = 6;

const int EXC_SYSCALL = 7;

const int EXC_MACH_SYSCALL = 8;

const int EXC_RPC_ALERT = 9;

const int EXC_CRASH = 10;

const int EXC_RESOURCE = 11;

const int EXC_GUARD = 12;

const int EXC_CORPSE_NOTIFY = 13;

const int EXC_CORPSE_VARIANT_BIT = 256;

const int EXCEPTION_DEFAULT = 1;

const int EXCEPTION_STATE = 2;

const int EXCEPTION_STATE_IDENTITY = 3;

const int EXCEPTION_IDENTITY_PROTECTED = 4;

const int MACH_EXCEPTION_ERRORS = 1073741824;

const int MACH_EXCEPTION_CODES = 2147483648;

const int MACH_EXCEPTION_MASK = 3221225472;

const int EXC_MASK_BAD_ACCESS = 2;

const int EXC_MASK_BAD_INSTRUCTION = 4;

const int EXC_MASK_ARITHMETIC = 8;

const int EXC_MASK_EMULATION = 16;

const int EXC_MASK_SOFTWARE = 32;

const int EXC_MASK_BREAKPOINT = 64;

const int EXC_MASK_SYSCALL = 128;

const int EXC_MASK_MACH_SYSCALL = 256;

const int EXC_MASK_RPC_ALERT = 512;

const int EXC_MASK_CRASH = 1024;

const int EXC_MASK_RESOURCE = 2048;

const int EXC_MASK_GUARD = 4096;

const int EXC_MASK_CORPSE_NOTIFY = 8192;

const int EXC_MASK_ALL = 7166;

const int FIRST_EXCEPTION = 1;

const int EXC_SOFT_SIGNAL = 65539;

const int EXC_MACF_MIN = 131072;

const int EXC_MACF_MAX = 196607;

const int ARM_THREAD_STATE_MAX = 1296;

const int THREAD_STATE_MAX = 1296;

const int ARM_THREAD_STATE = 1;

const int ARM_UNIFIED_THREAD_STATE = 1;

const int ARM_VFP_STATE = 2;

const int ARM_EXCEPTION_STATE = 3;

const int ARM_DEBUG_STATE = 4;

const int THREAD_STATE_NONE = 5;

const int ARM_THREAD_STATE64 = 6;

const int ARM_EXCEPTION_STATE64 = 7;

const int ARM_THREAD_STATE32 = 9;

const int ARM_DEBUG_STATE32 = 14;

const int ARM_DEBUG_STATE64 = 15;

const int ARM_NEON_STATE = 16;

const int ARM_NEON_STATE64 = 17;

const int ARM_CPMU_STATE64 = 18;

const int ARM_PAGEIN_STATE = 27;

const int MACHINE_THREAD_STATE = 1;

const int THREAD_MACHINE_STATE_MAX = 1296;

const int THREAD_STATE_FLAVOR_LIST = 0;

const int THREAD_STATE_FLAVOR_LIST_NEW = 128;

const int THREAD_STATE_FLAVOR_LIST_10_9 = 129;

const int THREAD_STATE_FLAVOR_LIST_10_13 = 130;

const int THREAD_STATE_FLAVOR_LIST_10_15 = 131;

const int THREAD_CONVERT_THREAD_STATE_TO_SELF = 1;

const int THREAD_CONVERT_THREAD_STATE_FROM_SELF = 2;

const int MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE = 5120;

const int MACH_VOUCHER_TRAP_STACK_LIMIT = 256;

const int MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL = 1;

const int MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL = 2;

const int MACH_ACTIVITY_ID_COUNT_MAX = 16;

const int PROCESSOR_CPU_STAT = 268435459;

const int PROCESSOR_CPU_STAT64 = 268435460;

const int PROCESSOR_INFO_MAX = 1024;

const int PROCESSOR_SET_INFO_MAX = 1024;

const int PROCESSOR_BASIC_INFO = 1;

const int PROCESSOR_CPU_LOAD_INFO = 2;

const int PROCESSOR_PM_REGS_INFO = 268435457;

const int PROCESSOR_TEMPERATURE = 268435458;

const int LOAD_SCALE = 1000;

const int PROCESSOR_SET_BASIC_INFO = 5;

const int PROCESSOR_SET_LOAD_INFO = 4;

const int POLICY_NULL = 0;

const int POLICY_TIMESHARE = 1;

const int POLICY_RR = 2;

const int POLICY_FIFO = 4;

const int POLICYCLASS_FIXEDPRI = 6;

const int TASK_INFO_MAX = 1024;

const int TASK_BASIC_INFO_32 = 4;

const int TASK_BASIC2_INFO_32 = 6;

const int TASK_BASIC_INFO_64 = 18;

const int TASK_BASIC_INFO = 18;

const int TASK_EVENTS_INFO = 2;

const int TASK_THREAD_TIMES_INFO = 3;

const int TASK_ABSOLUTETIME_INFO = 1;

const int TASK_KERNELMEMORY_INFO = 7;

const int TASK_SECURITY_TOKEN = 13;

const int TASK_AUDIT_TOKEN = 15;

const int TASK_AFFINITY_TAG_INFO = 16;

const int TASK_DYLD_INFO = 17;

const int TASK_DYLD_ALL_IMAGE_INFO_32 = 0;

const int TASK_DYLD_ALL_IMAGE_INFO_64 = 1;

const int TASK_BASIC_INFO_64_2 = 18;

const int TASK_EXTMOD_INFO = 19;

const int MACH_TASK_BASIC_INFO = 20;

const int TASK_POWER_INFO = 21;

const int TASK_VM_INFO = 22;

const int TASK_VM_INFO_PURGEABLE = 23;

const int TASK_TRACE_MEMORY_INFO = 24;

const int TASK_WAIT_STATE_INFO = 25;

const int TASK_POWER_INFO_V2 = 26;

const int TASK_VM_INFO_PURGEABLE_ACCOUNT = 27;

const int TASK_FLAGS_INFO = 28;

const int TF_LP64 = 1;

const int TF_64B_DATA = 2;

const int TASK_DEBUG_INFO_INTERNAL = 29;

const int TASK_EXC_GUARD_NONE = 0;

const int TASK_EXC_GUARD_VM_DELIVER = 1;

const int TASK_EXC_GUARD_VM_ONCE = 2;

const int TASK_EXC_GUARD_VM_CORPSE = 4;

const int TASK_EXC_GUARD_VM_FATAL = 8;

const int TASK_EXC_GUARD_VM_ALL = 15;

const int TASK_EXC_GUARD_MP_DELIVER = 16;

const int TASK_EXC_GUARD_MP_ONCE = 32;

const int TASK_EXC_GUARD_MP_CORPSE = 64;

const int TASK_EXC_GUARD_MP_FATAL = 128;

const int TASK_EXC_GUARD_MP_ALL = 240;

const int TASK_EXC_GUARD_ALL = 255;

const int TASK_CORPSE_FORKING_DISABLED_MEM_DIAG = 1;

const int TASK_SCHED_TIMESHARE_INFO = 10;

const int TASK_SCHED_RR_INFO = 11;

const int TASK_SCHED_FIFO_INFO = 12;

const int TASK_SCHED_INFO = 14;

const int TASK_CATEGORY_POLICY = 1;

const int TASK_SUPPRESSION_POLICY = 3;

const int TASK_POLICY_STATE = 4;

const int TASK_BASE_QOS_POLICY = 8;

const int TASK_OVERRIDE_QOS_POLICY = 9;

const int TASK_BASE_LATENCY_QOS_POLICY = 10;

const int TASK_BASE_THROUGHPUT_QOS_POLICY = 11;

const int PROC_FLAG_DARWINBG = 32768;

const int PROC_FLAG_EXT_DARWINBG = 65536;

const int PROC_FLAG_IOS_APPLEDAEMON = 131072;

const int PROC_FLAG_IOS_IMPPROMOTION = 524288;

const int PROC_FLAG_ADAPTIVE = 1048576;

const int PROC_FLAG_ADAPTIVE_IMPORTANT = 2097152;

const int PROC_FLAG_IMPORTANCE_DONOR = 4194304;

const int PROC_FLAG_SUPPRESSED = 8388608;

const int PROC_FLAG_APPLICATION = 16777216;

const int PROC_FLAG_IOS_APPLICATION = 16777216;

const int TASK_KERNEL_PORT = 1;

const int TASK_HOST_PORT = 2;

const int TASK_NAME_PORT = 3;

const int TASK_BOOTSTRAP_PORT = 4;

const int TASK_INSPECT_PORT = 5;

const int TASK_READ_PORT = 6;

const int TASK_ACCESS_PORT = 9;

const int TASK_DEBUG_CONTROL_PORT = 10;

const int TASK_RESOURCE_NOTIFY_PORT = 11;

const int TASK_MAX_SPECIAL_PORT = 11;

const int THREAD_INFO_MAX = 32;

const int THREAD_BASIC_INFO = 3;

const int THREAD_IDENTIFIER_INFO = 4;

const int TH_USAGE_SCALE = 1000;

const int TH_STATE_RUNNING = 1;

const int TH_STATE_STOPPED = 2;

const int TH_STATE_WAITING = 3;

const int TH_STATE_UNINTERRUPTIBLE = 4;

const int TH_STATE_HALTED = 5;

const int TH_FLAGS_SWAPPED = 1;

const int TH_FLAGS_IDLE = 2;

const int TH_FLAGS_GLOBAL_FORCED_IDLE = 4;

const int THREAD_EXTENDED_INFO = 5;

const int MAXTHREADNAMESIZE = 64;

const int THREAD_DEBUG_INFO_INTERNAL = 6;

const int IO_NUM_PRIORITIES = 4;

const int THREAD_SCHED_TIMESHARE_INFO = 10;

const int THREAD_SCHED_RR_INFO = 11;

const int THREAD_SCHED_FIFO_INFO = 12;

const int THREAD_STANDARD_POLICY = 1;

const int THREAD_STANDARD_POLICY_COUNT = 0;

const int THREAD_EXTENDED_POLICY = 1;

const int THREAD_TIME_CONSTRAINT_POLICY = 2;

const int THREAD_PRECEDENCE_POLICY = 3;

const int THREAD_AFFINITY_POLICY = 4;

const int THREAD_AFFINITY_TAG_NULL = 0;

const int THREAD_BACKGROUND_POLICY = 5;

const int THREAD_BACKGROUND_POLICY_DARWIN_BG = 4096;

const int THREAD_LATENCY_QOS_POLICY = 7;

const int THREAD_THROUGHPUT_QOS_POLICY = 8;

const int THREAD_KERNEL_PORT = 1;

const int THREAD_INSPECT_PORT = 2;

const int THREAD_READ_PORT = 3;

const int THREAD_MAX_SPECIAL_PORT = 3;

const int MATTR_CACHE = 1;

const int MATTR_MIGRATE = 2;

const int MATTR_REPLICATE = 4;

const int MATTR_VAL_OFF = 0;

const int MATTR_VAL_ON = 1;

const int MATTR_VAL_GET = 2;

const int MATTR_VAL_CACHE_FLUSH = 6;

const int MATTR_VAL_DCACHE_FLUSH = 7;

const int MATTR_VAL_ICACHE_FLUSH = 8;

const int MATTR_VAL_CACHE_SYNC = 9;

const int MATTR_VAL_GET_INFO = 10;

const int VM_PURGABLE_NO_AGING_SHIFT = 16;

const int VM_PURGABLE_NO_AGING_MASK = 65536;

const int VM_PURGABLE_NO_AGING = 65536;

const int VM_PURGABLE_DEBUG_SHIFT = 12;

const int VM_PURGABLE_DEBUG_MASK = 12288;

const int VM_PURGABLE_DEBUG_EMPTY = 4096;

const int VM_PURGABLE_DEBUG_FAULT = 8192;

const int VM_VOLATILE_GROUP_SHIFT = 8;

const int VM_VOLATILE_GROUP_MASK = 1792;

const int VM_VOLATILE_GROUP_DEFAULT = 0;

const int VM_VOLATILE_GROUP_0 = 0;

const int VM_VOLATILE_GROUP_1 = 256;

const int VM_VOLATILE_GROUP_2 = 512;

const int VM_VOLATILE_GROUP_3 = 768;

const int VM_VOLATILE_GROUP_4 = 1024;

const int VM_VOLATILE_GROUP_5 = 1280;

const int VM_VOLATILE_GROUP_6 = 1536;

const int VM_VOLATILE_GROUP_7 = 1792;

const int VM_PURGABLE_BEHAVIOR_SHIFT = 6;

const int VM_PURGABLE_BEHAVIOR_MASK = 64;

const int VM_PURGABLE_BEHAVIOR_FIFO = 0;

const int VM_PURGABLE_BEHAVIOR_LIFO = 64;

const int VM_PURGABLE_ORDERING_SHIFT = 5;

const int VM_PURGABLE_ORDERING_MASK = 32;

const int VM_PURGABLE_ORDERING_OBSOLETE = 32;

const int VM_PURGABLE_ORDERING_NORMAL = 0;

const int VM_VOLATILE_ORDER_SHIFT = 4;

const int VM_VOLATILE_ORDER_MASK = 16;

const int VM_VOLATILE_MAKE_FIRST_IN_GROUP = 16;

const int VM_VOLATILE_MAKE_LAST_IN_GROUP = 0;

const int VM_PURGABLE_STATE_MIN = 0;

const int VM_PURGABLE_STATE_MAX = 3;

const int VM_PURGABLE_STATE_MASK = 3;

const int VM_PURGABLE_NONVOLATILE = 0;

const int VM_PURGABLE_VOLATILE = 1;

const int VM_PURGABLE_EMPTY = 2;

const int VM_PURGABLE_DENY = 3;

const int VM_PURGABLE_ALL_MASKS = 79731;

const int BYTE_SIZE = 8;

const int PAGE_MAX_SHIFT = 14;

const int PAGE_MAX_SIZE = 16384;

const int PAGE_MAX_MASK = 16383;

const int PAGE_MIN_SHIFT = 12;

const int PAGE_MIN_SIZE = 4096;

const int PAGE_MIN_MASK = 4095;

const int MACH_VM_MIN_ADDRESS_RAW = 0;

const int MACH_VM_MAX_ADDRESS_RAW = 140737454800896;

const int MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW = 68719476736;

const int MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW = 481036337152;

const int SWI_SYSCALL = 128;

const int VM_REGION_INFO_MAX = 1024;

const int VM_REGION_BASIC_INFO_64 = 9;

const int VM_REGION_BASIC_INFO = 10;

const int SM_COW = 1;

const int SM_PRIVATE = 2;

const int SM_EMPTY = 3;

const int SM_SHARED = 4;

const int SM_TRUESHARED = 5;

const int SM_PRIVATE_ALIASED = 6;

const int SM_SHARED_ALIASED = 7;

const int SM_LARGE_PAGE = 8;

const int VM_REGION_EXTENDED_INFO = 13;

const int VM_REGION_TOP_INFO = 12;

const int VM_MAP_ENTRY_MAX = 256;

const int VM_PAGE_INFO_BASIC = 1;

const int KMOD_MAX_NAME = 64;

const int KMOD_RETURN_SUCCESS = 0;

const int KMOD_RETURN_FAILURE = 5;

const int KMOD_INFO_VERSION = 1;

const int TASK_FLAVOR_CONTROL = 0;

const int TASK_FLAVOR_READ = 1;

const int TASK_FLAVOR_INSPECT = 2;

const int TASK_FLAVOR_NAME = 3;

const int TASK_FLAVOR_MAX = 3;

const int THREAD_FLAVOR_CONTROL = 0;

const int THREAD_FLAVOR_READ = 1;

const int THREAD_FLAVOR_INSPECT = 2;

const int THREAD_FLAVOR_MAX = 2;

const int _MACH_INIT_ = 1;

const int NAME_SERVER_SLOT = 0;

const int ENVIRONMENT_SLOT = 1;

const int SERVICE_SLOT = 2;

const int MACH_PORTS_SLOTS_USED = 3;

const int IOKIT = 1;

const int system_emask = -67108864;

const int sub_emask = 67092480;

const int code_emask = 16383;

const int err_kern = 0;

const int err_us = 67108864;

const int err_server = 134217728;

const int err_ipc = 201326592;

const int err_mach_ipc = 268435456;

const int err_dipc = 469762048;

const int err_local = -134217728;

const int err_ipc_compat = -67108864;

const int err_max_system = 63;

const int sys_iokit = -536870912;

const int sub_iokit_common = 0;

const int sub_iokit_usb = 16384;

const int sub_iokit_firewire = 32768;

const int sub_iokit_block_storage = 65536;

const int sub_iokit_graphics = 81920;

const int sub_iokit_networking = 98304;

const int sub_iokit_bluetooth = 131072;

const int sub_iokit_pmu = 147456;

const int sub_iokit_acpi = 163840;

const int sub_iokit_smbus = 180224;

const int sub_iokit_ahci = 196608;

const int sub_iokit_powermanagement = 212992;

const int sub_iokit_hidsystem = 229376;

const int sub_iokit_scsi = 262144;

const int sub_iokit_usbaudio = 278528;

const int sub_iokit_wirelesscharging = 294912;

const int sub_iokit_thunderbolt = 475136;

const int sub_iokit_graphics_acceleration = 491520;

const int sub_iokit_keystore = 507904;

const int sub_iokit_apfs = 540672;

const int sub_iokit_acpiec = 557056;

const int sub_iokit_timesync_avb = 573440;

const int sub_iokit_platform = 688128;

const int sub_iokit_audio_video = 1130496;

const int sub_iokit_cec = 1146880;

const int sub_iokit_baseband = 2097152;

const int sub_iokit_HDA = 4161536;

const int sub_iokit_hsic = 5357568;

const int sub_iokit_sdio = 6094848;

const int sub_iokit_wlan = 8519680;

const int sub_iokit_appleembeddedsleepwakehandler = 8536064;

const int sub_iokit_appleppm = 8552448;

const int sub_iokit_vendor_specific = 67076096;

const int sub_iokit_reserved = 67092480;

const int kIOReturnSuccess = 0;

const int kIOReturnError = -536870212;

const int kIOReturnNoMemory = -536870211;

const int kIOReturnNoResources = -536870210;

const int kIOReturnIPCError = -536870209;

const int kIOReturnNoDevice = -536870208;

const int kIOReturnNotPrivileged = -536870207;

const int kIOReturnBadArgument = -536870206;

const int kIOReturnLockedRead = -536870205;

const int kIOReturnLockedWrite = -536870204;

const int kIOReturnExclusiveAccess = -536870203;

const int kIOReturnBadMessageID = -536870202;

const int kIOReturnUnsupported = -536870201;

const int kIOReturnVMError = -536870200;

const int kIOReturnInternalError = -536870199;

const int kIOReturnIOError = -536870198;

const int kIOReturnCannotLock = -536870196;

const int kIOReturnNotOpen = -536870195;

const int kIOReturnNotReadable = -536870194;

const int kIOReturnNotWritable = -536870193;

const int kIOReturnNotAligned = -536870192;

const int kIOReturnBadMedia = -536870191;

const int kIOReturnStillOpen = -536870190;

const int kIOReturnRLDError = -536870189;

const int kIOReturnDMAError = -536870188;

const int kIOReturnBusy = -536870187;

const int kIOReturnTimeout = -536870186;

const int kIOReturnOffline = -536870185;

const int kIOReturnNotReady = -536870184;

const int kIOReturnNotAttached = -536870183;

const int kIOReturnNoChannels = -536870182;

const int kIOReturnNoSpace = -536870181;

const int kIOReturnPortExists = -536870179;

const int kIOReturnCannotWire = -536870178;

const int kIOReturnNoInterrupt = -536870177;

const int kIOReturnNoFrames = -536870176;

const int kIOReturnMessageTooLarge = -536870175;

const int kIOReturnNotPermitted = -536870174;

const int kIOReturnNoPower = -536870173;

const int kIOReturnNoMedia = -536870172;

const int kIOReturnUnformattedMedia = -536870171;

const int kIOReturnUnsupportedMode = -536870170;

const int kIOReturnUnderrun = -536870169;

const int kIOReturnOverrun = -536870168;

const int kIOReturnDeviceError = -536870167;

const int kIOReturnNoCompletion = -536870166;

const int kIOReturnAborted = -536870165;

const int kIOReturnNoBandwidth = -536870164;

const int kIOReturnNotResponding = -536870163;

const int kIOReturnIsoTooOld = -536870162;

const int kIOReturnIsoTooNew = -536870161;

const int kIOReturnNotFound = -536870160;

const int kIOReturnInvalid = -536870911;

const int OSTYPES_K64_REV = 2;

const int IOPhysSize = 64;

const String kIOKitBuildVersionKey = 'IOKitBuildVersion';

const String kIOKitDiagnosticsKey = 'IOKitDiagnostics';

const String kIORegistryPlanesKey = 'IORegistryPlanes';

const String kIOCatalogueKey = 'IOCatalogue';

const String kIOServicePlane = 'IOService';

const String kIOPowerPlane = 'IOPower';

const String kIODeviceTreePlane = 'IODeviceTree';

const String kIOAudioPlane = 'IOAudio';

const String kIOFireWirePlane = 'IOFireWire';

const String kIOUSBPlane = 'IOUSB';

const String kIORegistryEntryIDKey = 'IORegistryEntryID';

const String kIORegistryEntryPropertyKeysKey = 'IORegistryEntryPropertyKeys';

const String kIOServiceClass = 'IOService';

const String kIOResourcesClass = 'IOResources';

const String kIOClassKey = 'IOClass';

const String kIOProbeScoreKey = 'IOProbeScore';

const String kIOKitDebugKey = 'IOKitDebug';

const String kIOSupportedPropertiesKey = 'IOSupportedProperties';

const String kIOUserServicePropertiesKey = 'IOUserServiceProperties';

const String kIOProviderClassKey = 'IOProviderClass';

const String kIONameMatchKey = 'IONameMatch';

const String kIOPropertyMatchKey = 'IOPropertyMatch';

const String kIOPropertyExistsMatchKey = 'IOPropertyExistsMatch';

const String kIOPathMatchKey = 'IOPathMatch';

const String kIOLocationMatchKey = 'IOLocationMatch';

const String kIOParentMatchKey = 'IOParentMatch';

const String kIOResourceMatchKey = 'IOResourceMatch';

const String kIOResourceMatchedKey = 'IOResourceMatched';

const String kIOMatchedServiceCountKey = 'IOMatchedServiceCountMatch';

const String kIONameMatchedKey = 'IONameMatched';

const String kIOMatchCategoryKey = 'IOMatchCategory';

const String kIODefaultMatchCategoryKey = 'IODefaultMatchCategory';

const String kIOMatchedPersonalityKey = 'IOMatchedPersonality';

const String kIORematchPersonalityKey = 'IORematchPersonality';

const String kIORematchCountKey = 'IORematchCount';

const String kIODEXTMatchCountKey = 'IODEXTMatchCount';

const String kIOServiceDEXTEntitlementsKey = 'IOServiceDEXTEntitlements';

const String kIODriverKitEntitlementKey = 'com.apple.developer.driverkit';

const String kIODriverKitUserClientEntitlementsKey =
    'com.apple.developer.driverkit.userclient-access';

const String kIODriverKitRequiredEntitlementsKey =
    'com.apple.private.driverkit.driver-access';

const String kIODriverKitUserClientEntitlementAllowAnyKey =
    'com.apple.developer.driverkit.allow-any-userclient-access';

const String kIODriverKitUserClientEntitlementAdministratorKey =
    'com.apple.developer.driverkit.administrator';

const String kIODriverKitUSBTransportEntitlementKey =
    'com.apple.developer.driverkit.transport.usb';

const String kIODriverKitHIDTransportEntitlementKey =
    'com.apple.developer.driverkit.transport.hid';

const String kIODriverKitHIDFamilyDeviceEntitlementKey =
    'com.apple.developer.driverkit.family.hid.device';

const String kIODriverKitHIDFamilyEventServiceEntitlementKey =
    'com.apple.developer.driverkit.family.hid.eventservice';

const String kIODriverKitTransportBuiltinEntitlementKey =
    'com.apple.developer.driverkit.builtin';

const String kIONVRAMReadAccessKey =
    'com.apple.private.iokit.nvram-read-access';

const String kIONVRAMWriteAccessKey =
    'com.apple.private.iokit.nvram-write-access';

const String kIOResourcesSetPropertyKey =
    'com.apple.private.iokit.ioresources.setproperty';

const String kIONVRAMSystemAllowKey =
    'com.apple.private.iokit.system-nvram-allow';

const String kIOMatchDeferKey = 'IOMatchDefer';

const String kIOAllCPUInitializedKey = 'IOAllCPUInitialized';

const String kIOUserClientClassKey = 'IOUserClientClass';

const String kIOMapperIDKey = 'IOMapperID';

const String kIOUserClientCrossEndianKey = 'IOUserClientCrossEndian';

const String kIOUserClientCrossEndianCompatibleKey =
    'IOUserClientCrossEndianCompatible';

const String kIOUserClientSharedInstanceKey = 'IOUserClientSharedInstance';

const String kIOUserClientDefaultLockingKey = 'IOUserClientDefaultLocking';

const String kIOUserClientCreatorKey = 'IOUserClientCreator';

const String kIOUserServerCDHashKey = 'IOUserServerCDHash';

const String kIOUserUserClientKey = 'IOUserUserClient';

const String kIOUserServerOneProcessKey = 'IOUserServerOneProcess';

const String kIOPublishNotification = 'IOServicePublish';

const String kIOFirstPublishNotification = 'IOServiceFirstPublish';

const String kIOMatchedNotification = 'IOServiceMatched';

const String kIOFirstMatchNotification = 'IOServiceFirstMatch';

const String kIOTerminatedNotification = 'IOServiceTerminate';

const String kIOWillTerminateNotification = 'IOServiceWillTerminate';

const String kIOGeneralInterest = 'IOGeneralInterest';

const String kIOBusyInterest = 'IOBusyInterest';

const String kIOAppPowerStateInterest = 'IOAppPowerStateInterest';

const String kIOPriorityPowerStateInterest = 'IOPriorityPowerStateInterest';

const String kIOPlatformDeviceMessageKey = 'IOPlatformDeviceMessage';

const String kIOCFPlugInTypesKey = 'IOCFPlugInTypes';

const String kIOCompatibilityMatchKey = 'IOCompatibilityMatch';

const String kIOCompatibilityPropertiesKey = 'IOCompatibilityProperties';

const String kIOPathKey = 'IOPath';

const String kIOCommandPoolSizeKey = 'IOCommandPoolSize';

const String kIOMaximumPriorityCountKey = 'IOMaximumPriorityCount';

const String kIOMaximumBlockCountReadKey = 'IOMaximumBlockCountRead';

const String kIOMaximumBlockCountWriteKey = 'IOMaximumBlockCountWrite';

const String kIOMaximumByteCountReadKey = 'IOMaximumByteCountRead';

const String kIOMaximumByteCountWriteKey = 'IOMaximumByteCountWrite';

const String kIOMaximumSegmentCountReadKey = 'IOMaximumSegmentCountRead';

const String kIOMaximumSegmentCountWriteKey = 'IOMaximumSegmentCountWrite';

const String kIOMaximumSegmentByteCountReadKey =
    'IOMaximumSegmentByteCountRead';

const String kIOMaximumSegmentByteCountWriteKey =
    'IOMaximumSegmentByteCountWrite';

const String kIOMinimumSegmentAlignmentByteCountKey =
    'IOMinimumSegmentAlignmentByteCount';

const String kIOMaximumSegmentAddressableBitCountKey =
    'IOMaximumSegmentAddressableBitCount';

const String kIOMinimumSaturationByteCountKey = 'IOMinimumSaturationByteCount';

const String kIOMaximumSwapWriteKey = 'IOMaximumSwapWrite';

const String kIOIconKey = 'IOIcon';

const String kIOBundleResourceFileKey = 'IOBundleResourceFile';

const String kIOBusBadgeKey = 'IOBusBadge';

const String kIODeviceIconKey = 'IODeviceIcon';

const String kIOPlatformSerialNumberKey = 'IOPlatformSerialNumber';

const String kIOPlatformUUIDKey = 'IOPlatformUUID';

const String kIONVRAMBootArgsKey = 'boot-args';

const String kIONVRAMDeletePropertyKey = 'IONVRAM-DELETE-PROPERTY';

const String kIONVRAMSyncNowPropertyKey = 'IONVRAM-SYNCNOW-PROPERTY';

const String kIONVRAMActivateCSRConfigPropertyKey = 'IONVRAM-ARMCSR-PROPERTY';

const String kIODTNVRAMPanicInfoKey = 'aapl,panic-info';

const String kIOBootDeviceKey = 'IOBootDevice';

const String kIOBootDevicePathKey = 'IOBootDevicePath';

const String kIOBootDeviceSizeKey = 'IOBootDeviceSize';

const String kOSBuildVersionKey = 'OS Build Version';

const String kIOStateNotificationItemCreateKey =
    'com.apple.iokit.statenotification.create';

const String kIOStateNotificationItemSetKey =
    'com.apple.iokit.statenotification.set';

const String kIOStateNotificationItemCopyKey =
    'com.apple.iokit.statenotification.copy';

const String kIOStateNotificationNameKey =
    'com.apple.iokit.statenotification.name';

const String kIOStateNotificationEntitlementSetKey =
    'com.apple.iokit.statenotification.entitlement-set';

const String kIOStateNotificationEntitlementGetKey =
    'com.apple.iokit.statenotification.entitlement-get';

const String kIOSystemStateClamshellKey = 'com.apple.iokit.pm.clamshell';

const String kIOSystemStateSleepDescriptionKey =
    'com.apple.iokit.pm.sleepdescription';

const String kIOSystemStateSleepDescriptionReasonKey =
    'com.apple.iokit.pm.sleepreason';

const String kIOSystemStateSleepDescriptionHibernateStateKey =
    'com.apple.iokit.pm.hibernatestate';

const String kIOSystemStateHaltDescriptionKey =
    'com.apple.iokit.pm.haltdescription';

const String kIOSystemStateHaltDescriptionHaltStateKey =
    'com.apple.iokit.pm.haltstate';

const String kIOSystemStatePowerSourceDescriptionKey =
    'com.apple.iokit.pm.powersourcedescription';

const String kIOSystemStatePowerSourceDescriptionACAttachedKey =
    'com.apple.iokit.pm.acattached';

const String HM_IOKIT_SMC_SENSOR_GRAPHICS_HOT = 'SGHT';

const String HM_IOKIT_SMC_CPU_PROXIMITY = 'TC0P';

const String HM_IOKIT_SMC_GPU_PROXIMITY = 'TG0P';

const String HM_IOKIT_SMC_PECI_GPU = 'TCGC';

const int KERNEL_INDEX_SMC = 2;

const String DATATYPE_FPE2 = 'fpe2';

const String DATATYPE_FLT = 'flt ';

const String DATATYPE_UINT8 = 'ui8 ';

const String DATATYPE_UINT16 = 'ui16';

const String DATATYPE_UINT32 = 'ui32';

const String DATATYPE_SP78 = 'sp78';

const int MAX_OLD_EVENTS = 10;

const int MAX_TOKENS = 128;

const int MAX_SIGNATURES = 16;
